# Task Description

You are an algorithm tasked with extracting declarative process models from natural language process descriptions.
The process descriptions consist of a series of actions, each described by a predicate and an object.
Your goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.

# Type Definitions

- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.

- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.

## Constraint Types

- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.

- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.

- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.

- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.

- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.

- ** existence **: requires that an action is executed at some point in the process; the execution is not dependent on any other explicitly mentioned action; there is only a head action but no tail action.

- ** absence **: requires that an action is NOT executed at any time in the process; the absence is not dependent on any other action but other circumstances (e.g., information from the process context); there is only a head action but no tail action; Note: negated absence constraint is semantically equivalent to an existence constraint.

- ** noncooccurrence **: indicates that two actions are mutually exclusive, usually indicated by phrases like "or", "either", etc.

## Negation

Additionally, you may encounter negative constraints, indicated by statements like "do not" or "must not." Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.

# Disambiguation

The constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed
because the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.
However, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.
The following abstract examples illustrate the differences:

- Example 1: If action A is performed, action B can be carried out. (precedence)
- Example 2: If action A is performed, action B is carried out, too. (response)
- Example 3: If action A is performed, action B can and must also be performed carried out. (succession)

# Format

Please ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.

Print one constraint per line, where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):

<negative>	<constraint type>	<head action>	<tail action>

# Procedure

Let's carry out your task in two steps.

- Step 1: First, extract all actions contained in the input sentence and list them under the heading "Actions:" line by line (a description how you can identify actions is given in ACTION (Def.) above).

- Step 2: Second, identify and extract constraints based on the constraint types above (see "Constraint Types"). To do this, only use the actions that you defined in Step 1, under the heading "Actions:".

# Important Restriction

Restriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.

Restriction 2: Pay special attention to the existence constraint. Some sentences might to cover a precedence, response, or succession constraint but if there is only one action in the sentence in such cases it is more likely an existence constraint.

Restriction 3: Sentences may contain up to three constraints, but some may contain no constraints at all!

Restriction 4: You may use the context between sentences, but constraints are always only between actions of one sentence.

# Example

Here is an example for input and expected output:

## Input:

Sentence 0: The process begins when the author submits the paper.
Sentence 1: After signing the contract, the product can be advertised.
Sentence 2: After signing the contract, the product is advertised but never before.
Sentence 3: When the manager is called, the request needs to be forwarded to the secretary, too.
Sentence 4: The process is completed as soon as the proposal is archived
Sentence 5: After notifying the manager, the request must not be rejected.
Sentence 6: If it rains, products are covered until they are needed.
Sentence 7: If it is sunny, products are NOT covered but remain in the yard until they are needed.
Sentence 8: If the offer is archived, it is not sent and if it is sent, archiving is unnecessary.

## Output:

** Sentence 0 **

Actions:
submit paper

Constraints:
FALSE	init	submit paper

** Sentence 1 **

Actions:
sign contract
advertise product

Constraints:
FALSE	precedence	sign contract	advertise product

** Sentence 2 **

Actions:
sign contract
advertise product

Constraints:
FALSE	succession	sign contract	advertise product

** Sentence 3 **

Actions:
call manager
forward request

Constraints:
FALSE	response	call manager	forward request

** Sentence 4 **

Actions:
archive proposal

Constraints:
0	FALSE	end	archive proposal

** Sentence 5 **

Actions:
nofify manager
reject request

Constraints:
TRUE	response	nofify manager	reject request

** Sentence 6 **

Actions:
cover products

Constraints:
FALSE	existence	cover products

** Sentence 7 **

Actions:
cover products

Constraints:
FALSE	absence	cover products

** Sentence 8 **

Actions:
archive offer
send offer

Constraints:
FALSE	noncooccurrence	archive offer	send offer

# Notes

Please return raw text, do not use any formatting.