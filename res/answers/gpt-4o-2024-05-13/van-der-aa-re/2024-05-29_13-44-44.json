[{"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it can be approved or rejected.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n0\tFALSE\tprecedence\tcreate claim\treject claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim can be approved, after it has been created.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be created, before it can be approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1915, "output_tokens": 12, "total_costs": 0.009755, "answers": ["\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-0"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it can be approved or rejected.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n0\tFALSE\tprecedence\tcreate claim\treject claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be created, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1926, "output_tokens": 12, "total_costs": 0.00981, "answers": ["\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-1"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is approved, then it must have been created first.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n\nAI: \n0\tFALSE\tresponse\tsubmit case\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1898, "output_tokens": 12, "total_costs": 0.00967, "answers": ["\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-2"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is approved, then it must have been created first.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1912, "output_tokens": 12, "total_costs": 0.009739999999999999, "answers": ["\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-3"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Finally, we have to pay the invoice before we can confirm payment.\n\nAI: \n0\tFALSE\tprecedence\tpay invoice\tconfirm payment\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after a claim is created, it is possible to approve the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the scenario where the management does not approve the request, it can send the request back to the IT department for rework, then the IT department has to go back to editing and completing a request.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tSend back request to IT\n0\tFALSE\tresponse\tSend back request to IT\tComplete request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n\nAI: \n0\tTRUE\tsuccession\tcheck-in flight\tmodify provided data\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: They have to create the claim, before they can approve it.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1936, "output_tokens": 12, "total_costs": 0.009859999999999999, "answers": ["\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-4"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after the creation of a claim, the approval of the claim is possible.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after a claim is created, it is possible to approve the claim.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1913, "output_tokens": 12, "total_costs": 0.009745, "answers": ["\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-5"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is approved, then it must have been created first.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1928, "output_tokens": 12, "total_costs": 0.009819999999999999, "answers": ["\n0\tFALSE\tsuccession\tcreate claim\tapprove claim"], "original_id": "datacollection-1-6"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be created, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n\nAI: \n0\tFALSE\tresponse\tsubmit case\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: To approve a claim, it should be created first.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1912, "output_tokens": 12, "total_costs": 0.009739999999999999, "answers": ["\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-7"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be created, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a date has been agreed upon a meeting should eventually be held.\n\nAI: \n0\tFALSE\tresponse\tagree date\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim can be approved, after it has been created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1904, "output_tokens": 12, "total_costs": 0.009699999999999999, "answers": ["\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-8"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A case can be closed manually at any time, unless we still need to pay out the claim.\n\nAI: \n0\tFALSE\tprecedence\tpay out claim\tcase closed manually\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be created, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted it may get a local id at the union, but it should also subsequently be assigned a case id in LO.\n\nAI: \n0\tFALSE\tprecedence\tsubmit case\tget local id\n0\tFALSE\tresponse\tsubmit case\tassign case id\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n\nAI: \n0\tTRUE\tsuccession\tcheck-in flight\tmodify provided data\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Approving the claim can happen at anytime, unless it still needs to be created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1950, "output_tokens": 12, "total_costs": 0.00993, "answers": ["\n0\tTRUE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-9"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be created, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1907, "output_tokens": 12, "total_costs": 0.009715, "answers": ["\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-10"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after the creation of a claim, the approval of the claim is possible.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim should be preceded by the creation of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim requires that the creation of the claim occurs before it.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tbooking phase completion\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n\nAI: \n0\tFALSE\tresponse\tapproval, rejection, change\tsend notification\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The loan approval process starts by receiving a customer request for a loan amount.\n\nAI: \n0\tFALSE\tinit\treceive customer request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The creation of the claim is a condition for the approval of the claim.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1957, "output_tokens": 13, "total_costs": 0.009980000000000001, "answers": ["\n0\tFALSE\tprecedence\tcreation claim\tapproval claim"], "original_id": "datacollection-1-11"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after a claim is created, it is possible to approve the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The creation of the claim is a condition for the approval of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When approval of the claim occurs, creation of the claim must have preceded.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n\nAI: \n0\tFALSE\tresponse\tapproval, rejection, change\tsend notification\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after the creation of a claim, the approval of the claim is possible.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1921, "output_tokens": 12, "total_costs": 0.009785, "answers": ["\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-12"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If approval of the claim occurs, then creation of the claim must have been carried out first.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim should be preceded by the creation of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after the creation of a claim, the approval of the claim is possible.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When the client leaves, the bill must be charged\n\nAI: \n0\tFALSE\tresponse\tleave\tcharge bill\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n\nAI: \n0\tFALSE\tprecedence\treserve part\tassemble bicycle\n0\tFALSE\tsuccession\tpreparation activity has finished\tAssemble bycicle\n0\tFALSE\tprecedence\tback-ordered every item\tAssemble bycicle\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When approval of the claim occurs, creation of the claim must have preceded.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1944, "output_tokens": 13, "total_costs": 0.009915, "answers": ["\n0\tFALSE\tprecedence\tcreation claim\tapproval claim"], "original_id": "datacollection-1-13"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When approval of the claim occurs, creation of the claim must have preceded.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is approved, then it must have been created first.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after the creation of a claim, the approval of the claim is possible.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n\nAI: \n0\tFALSE\tprecedence\treserve part\tassemble bicycle\n0\tFALSE\tsuccession\tpreparation activity has finished\tAssemble bycicle\n0\tFALSE\tprecedence\tback-ordered every item\tAssemble bycicle\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If approval of the claim occurs, then creation of the claim must have been carried out first.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1981, "output_tokens": 12, "total_costs": 0.010085, "answers": ["\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-14"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The creation of the claim is a condition for the approval of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When approval of the claim occurs, creation of the claim must have preceded.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim should be preceded by the creation of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tbooking phase completion\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n\nAI: \n0\tFALSE\tresponse\tapproval, rejection, change\tsend notification\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process begins with the booking of the ticket\n\nAI: \n0\tFALSE\tinit\tbook ticket\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim requires that the creation of the claim occurs before it.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1923, "output_tokens": 13, "total_costs": 0.009810000000000001, "answers": ["\n0\tFALSE\tprecedence\tcreation claim\tapproval claim"], "original_id": "datacollection-1-15"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The creation of the claim is a condition for the approval of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When approval of the claim occurs, creation of the claim must have preceded.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim requires that the creation of the claim occurs before it.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tbooking phase completion\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim should be preceded by the creation of the claim.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1887, "output_tokens": 13, "total_costs": 0.009630000000000001, "answers": ["\n0\tFALSE\tprecedence\tcreation claim\tapproval claim"], "original_id": "datacollection-1-16"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be created, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim can be approved, after it has been created.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every provided room service must be billed.\n\nAI: \n0\tFALSE\tresponse\tprovide room service\tbill\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it can be approved or rejected.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1901, "output_tokens": 42, "total_costs": 0.010135, "answers": ["** Sentence 0 **\n\nActions:\ncreate claim\napprove claim\nreject claim\n\nConstraints:\n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n0\tFALSE\tprecedence\tcreate claim\treject claim"], "original_id": "datacollection-1-17"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be created, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it can be approved or rejected.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n0\tFALSE\tprecedence\tcreate claim\treject claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be approved before it can be paid out.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1908, "output_tokens": 13, "total_costs": 0.009735, "answers": ["\n0\tFALSE\tprecedence\tapprove claim\tpay claim"], "original_id": "datacollection-1-18"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim can be approved, after it has been created.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be approved before it can be paid out.\n\nAI: \n0\tFALSE\tprecedence\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a date has been agreed upon a meeting should eventually be held.\n\nAI: \n0\tFALSE\tresponse\tagree date\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n\nAI: \n0\tFALSE\tresponse\tsubmit case\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1876, "output_tokens": 11, "total_costs": 0.009545, "answers": ["\n0\tFALSE\tresponse\tapprove claim\tpay claim"], "original_id": "datacollection-1-19"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: To approve a claim, it should be created first.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim can be approved, after it has been created.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be approved before it can be paid out.\n\nAI: \n0\tFALSE\tprecedence\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a date has been agreed upon a meeting should eventually be held.\n\nAI: \n0\tFALSE\tresponse\tagree date\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1938, "output_tokens": 11, "total_costs": 0.009855000000000001, "answers": ["\n0\tTRUE\tresponse\treject claim\tpay claim"], "original_id": "datacollection-1-20"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is OK, the claim handling process proceeds.\n\nAI: \n0\tFALSE\tprecedence\tMark as Ok\tProceed with claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: However, if the request is approved it is edited and completed.\n\nAI: \n0\tFALSE\tprecedence\tApprove request\tedit request\n0\tFALSE\tprecedence\tApprove request\tComplete request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the driver delivers the package, she should update the system so all stakeholders are notified.\n\nAI: \n0\tFALSE\tresponse\tdeliver package\tupdate system\n0\tFALSE\tprecedence\tupdate system\tnotify all stakeholders\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n\nAI: \n0\tFALSE\tresponse\tsubmit case\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1960, "output_tokens": 8, "total_costs": 0.00992, "answers": ["\n0\tFALSE\tend\tpayout\n"], "original_id": "datacollection-1-21"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Approving the claim can happen at anytime, unless it still needs to be created.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Finally, we have to pay the invoice before we can confirm payment.\n\nAI: \n0\tFALSE\tprecedence\tpay invoice\tconfirm payment\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be created, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted it may get a local id at the union, but it should also subsequently be assigned a case id in LO.\n\nAI: \n0\tFALSE\tprecedence\tsubmit case\tget local id\n0\tFALSE\tresponse\tsubmit case\tassign case id\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n\nAI: \n0\tTRUE\tsuccession\tcheck-in flight\tmodify provided data\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A case can be closed manually at any time, unless we still need to pay out the claim.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1939, "output_tokens": 12, "total_costs": 0.009875, "answers": ["\n0\tTRUE\tprecedence\tpay claim\tclose case"], "original_id": "datacollection-1-22"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim can be approved, after it has been created.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Approving the claim can happen at anytime, unless it still needs to be created.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted it may get a local id at the union, but it should also subsequently be assigned a case id in LO.\n\nAI: \n0\tFALSE\tprecedence\tsubmit case\tget local id\n0\tFALSE\tresponse\tsubmit case\tassign case id\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n\nAI: \n0\tFALSE\tresponse\tcreate case\tarrange meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case can be managed at the union after it has been created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1954, "output_tokens": 13, "total_costs": 0.009965, "answers": ["\n0\tFALSE\tprecedence\tcreate case\tmanage case\n"], "original_id": "datacollection-2-23"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is approved, then it must have been created first.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n\nAI: \n0\tFALSE\tresponse\tsubmit case\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1993, "output_tokens": 12, "total_costs": 0.010145, "answers": ["\n0\tFALSE\tsuccession\tcreate case\tarrange meeting"], "original_id": "datacollection-2-24"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a date has been agreed upon a meeting should eventually be held.\n\nAI: \n0\tFALSE\tresponse\tagree date\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n\nAI: \n0\tFALSE\tresponse\tcreate case\tarrange meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1919, "output_tokens": 13, "total_costs": 0.009790000000000002, "answers": ["\n0\tFALSE\tsuccession\tarrange meeting\thold meeting"], "original_id": "datacollection-2-25"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n\nAI: \n0\tFALSE\tprecedence\tinform customer\torder missing products\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted it may get a local id at the union, but it should also subsequently be assigned a case id in LO.\n\nAI: \n0\tFALSE\tprecedence\tsubmit case\tget local id\n0\tFALSE\tresponse\tsubmit case\tassign case id\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n\nAI: \n0\tFALSE\tresponse\tcreate case\tarrange meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n\nAI: \n0\tFALSE\tresponse\tsubmit case\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1993, "output_tokens": 25, "total_costs": 0.01034, "answers": ["\n0\tFALSE\tprecedence\tenter metadata\tinform availability\n0\tFALSE\tprecedence\tinform availability\tsubmit case"], "original_id": "datacollection-2-26"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case can be managed at the union after it has been created.\n\nAI: \n0\tFALSE\tprecedence\tcreate case\tmanage case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after LO has assigned its case id it is possible to manage the case and for LO to propose dates.\n\nAI: \n0\tFALSE\tprecedence\tassign case id\tmanage case\n0\tFALSE\tprecedence\tassign case id\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n\nAI: \n0\tFALSE\tresponse\tsubmit case\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted it may get a local id at the union, but it should also subsequently be assigned a case id in LO.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1974, "output_tokens": 28, "total_costs": 0.01029, "answers": ["\n0\tFALSE\tprecedence\tsubmit case\tassign local id\n0\tFALSE\tsuccession\tsubmit case\tassign case id in LO"], "original_id": "datacollection-2-27"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted it may get a local id at the union, but it should also subsequently be assigned a case id in LO.\n\nAI: \n0\tFALSE\tprecedence\tsubmit case\tget local id\n0\tFALSE\tresponse\tsubmit case\tassign case id\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after LO has assigned its case id it is possible to manage the case and for LO to propose dates.\n\nAI: \n0\tFALSE\tprecedence\tassign case id\tmanage case\n0\tFALSE\tprecedence\tassign case id\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted it may get a local id at the union, but it should also subsequently be assigned a case id in LO.\n\nAI: \n0\tFALSE\tprecedence\tsubmit case\tget local id\n0\tFALSE\tresponse\tsubmit case\tassign case id\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1969, "output_tokens": 11, "total_costs": 0.010010000000000002, "answers": ["\n0\tFALSE\tresponse\tsubmit case\tpropose dates"], "original_id": "datacollection-2-28"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after a claim is created, it is possible to approve the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The next step is for the IT department to analyse the request and either approve or deny it.\n\nAI: \n0\tFALSE\tprecedence\tAnalyze request\tApprove request\n0\tFALSE\tprecedence\tAnalyze request\tDeny request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case can be managed at the union after it has been created.\n\nAI: \n0\tFALSE\tprecedence\tcreate case\tmanage case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n\nAI: \n0\tFALSE\tresponse\tsubmit case\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted it may get a local id at the union, but it should also subsequently be assigned a case id in LO.\n\nAI: \n0\tFALSE\tprecedence\tsubmit case\tget local id\n0\tFALSE\tresponse\tsubmit case\tassign case id\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after LO has assigned its case id it is possible to manage the case and for LO to propose dates.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2010, "output_tokens": 26, "total_costs": 0.01044, "answers": ["\n0\tFALSE\tprecedence\tassign case id\tmanage case\n0\tFALSE\tprecedence\tassign case id\tpropose dates"], "original_id": "datacollection-2-29"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: To approve a claim, it should be created first.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim can be approved, after it has been created.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case can be managed at the union after it has been created.\n\nAI: \n0\tFALSE\tprecedence\tcreate case\tmanage case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n\nAI: \n0\tFALSE\tresponse\tsubmit case\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The loan approval process starts by receiving a customer request for a loan amount.\n\nAI: \n0\tFALSE\tinit\treceive customer request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a date has been agreed upon a meeting should eventually be held.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1869, "output_tokens": 11, "total_costs": 0.009510000000000001, "answers": ["\n0\tFALSE\tresponse\tagree date\thold meeting"], "original_id": "datacollection-2-30"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a claim is registered, it is examined by a claims officer.\n\nAI: \n0\tFALSE\tprecedence\tregister claim\texamine claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every provided room service must be billed.\n\nAI: \n0\tFALSE\tresponse\tprovide room service\tbill\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n\nAI: \n0\tFALSE\tresponse\tsubmit case\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance has to start by registering client data\n\nAI: \n0\tFALSE\tinit\tregister client data\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The loan approval process starts by receiving a customer request for a loan amount.\n\nAI: \n0\tFALSE\tinit\treceive customer request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1853, "output_tokens": 8, "total_costs": 0.009385000000000001, "answers": ["\n0\tFALSE\tinit\texamine patient"], "original_id": "datacollection-6-31"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is approved, then it must have been created first.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a request is sent, then a proposal is expected to be prepared afterwards\n\nAI: \n0\tFALSE\tresponse\tsend request\tprepare proposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an x-ray is taken, then the x-ray risk must be checked before it\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1937, "output_tokens": 13, "total_costs": 0.009880000000000002, "answers": ["\n0\tFALSE\tresponse\tcheck x-ray risk\ttake x-ray"], "original_id": "datacollection-6-32"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When this is accepted and the financial resources are found, the hardware is received by the IT department.\n\nAI: \n0\tFALSE\tprecedence\tthis is accepted\treceive hardware by IT department\n0\tFALSE\tprecedence\tfinancial resourced are found\treceive hardware by IT department\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n\nAI: \n0\tFALSE\tresponse\tsubmit case\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n\nAI: \n0\tFALSE\tresponse\tcreate case\tarrange meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Performing a reposition, applying a cast and performing surgery require that x-rays are performed before.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1976, "output_tokens": 36, "total_costs": 0.01042, "answers": ["\n0\tFALSE\tresponse\tperform x-rays\tperform reposition\n0\tFALSE\tresponse\tperform x-rays\tapply cast\n0\tFALSE\tresponse\tperform x-rays\tperform surgery"], "original_id": "datacollection-6-33"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is approved, then it must have been created first.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after a claim is created, it is possible to approve the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n\nAI: \n0\tFALSE\tresponse\tsubmit case\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a request is sent, then a proposal is expected to be prepared afterwards\n\nAI: \n0\tFALSE\tresponse\tsend request\tprepare proposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1929, "output_tokens": 12, "total_costs": 0.009825, "answers": ["\n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation"], "original_id": "datacollection-6-34"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an x-ray is taken, then the x-ray risk must be checked before it\n\nAI: \n0\tFALSE\tprecedence\tcheck x-ray risk\tperform x-ray risk\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n\nAI: \n0\tFALSE\tresponse\tcreate case\tarrange meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1978, "output_tokens": 24, "total_costs": 0.010249999999999999, "answers": ["\n0\tFALSE\tsuccession\tapply cast\tremove cast\n0\tFALSE\tsuccession\tremove cast\tapply cast"], "original_id": "datacollection-6-35"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Personal information of passengers can be provided after the booking of the ticket\n\nAI: \n0\tFALSE\tprecedence\tbook ticket\tprovide personal information\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The creation of the claim is a condition for the approval of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim should be preceded by the creation of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tbooking phase completion\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket is eventually followed by the actual transfer of money\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tmoney transfer\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n\nAI: \n0\tTRUE\tsuccession\tcheck-in flight\tmodify provided data\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of an Office Supply Request starts when any employee of the organization submits an office supply request.\n\nAI: \n0\tFALSE\tinit\tsubmit office supply request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process begins with the booking of the ticket\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1917, "output_tokens": 7, "total_costs": 0.009689999999999999, "answers": ["\n0\tFALSE\tinit\tbook ticket"], "original_id": "datacollection-3-36"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case can be managed at the union after it has been created.\n\nAI: \n0\tFALSE\tprecedence\tcreate case\tmanage case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim can be approved, after it has been created.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tbooking phase completion\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket is eventually followed by the actual transfer of money\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tmoney transfer\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every provided laundry service must be billed\n\nAI: \n0\tFALSE\tresponse\tprovide laundry service\tbill\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n\nAI: \n0\tTRUE\tsuccession\tcheck-in flight\tmodify provided data\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process begins with the booking of the ticket\n\nAI: \n0\tFALSE\tinit\tbook ticket\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of an Office Supply Request starts when any employee of the organization submits an office supply request.\n\nAI: \n0\tFALSE\tinit\tsubmit office supply request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Personal information of passengers can be provided after the booking of the ticket\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1913, "output_tokens": 13, "total_costs": 0.009760000000000001, "answers": ["\n0\tFALSE\tprecedence\tbook ticket\tprovide personal information"], "original_id": "datacollection-3-37"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Personal information of passengers can be provided after the booking of the ticket\n\nAI: \n0\tFALSE\tprecedence\tbook ticket\tprovide personal information\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The creation of the claim is a condition for the approval of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim should be preceded by the creation of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket is eventually followed by the actual transfer of money\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tmoney transfer\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n\nAI: \n0\tFALSE\tprecedence\treserve part\tassemble bicycle\n0\tFALSE\tsuccession\tpreparation activity has finished\tAssemble bycicle\n0\tFALSE\tprecedence\tback-ordered every item\tAssemble bycicle\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process begins with the booking of the ticket\n\nAI: \n0\tFALSE\tinit\tbook ticket\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1936, "output_tokens": 12, "total_costs": 0.009859999999999999, "answers": ["\n0\tFALSE\tresponse\tpayment ticket\tcomplete booking phase"], "original_id": "datacollection-3-38"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The creation of the claim is a condition for the approval of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim should be preceded by the creation of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The receipt of an invoice is required before the administration department can enter data or scan the invoice.\n\nAI: \n0\tFALSE\tprecedence\treceipt of an invoice\tenter data\n0\tFALSE\tprecedence\treceipt of an invoice\tscan invoice\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tbooking phase completion\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process begins with the booking of the ticket\n\nAI: \n0\tFALSE\tinit\tbook ticket\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket is eventually followed by the actual transfer of money\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1936, "output_tokens": 13, "total_costs": 0.009875, "answers": ["\n0\tFALSE\tsuccession\tpayment ticket\ttransfer money"], "original_id": "datacollection-3-39"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Approving the claim can happen at anytime, unless it still needs to be created.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After check-in of the flight, only the cancellation is admitted\n\nAI: \n0\tFALSE\tprecedence\tcheck-in flight\tcancellation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the scenario where the management does not approve the request, it can send the request back to the IT department for rework, then the IT department has to go back to editing and completing a request.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tSend back request to IT\n0\tFALSE\tresponse\tSend back request to IT\tComplete request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n\nAI: \n0\tFALSE\tresponse\tapproval, rejection, change\tsend notification\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process begins with the booking of the ticket\n\nAI: \n0\tFALSE\tinit\tbook ticket\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2025, "output_tokens": 13, "total_costs": 0.010320000000000001, "answers": ["\n0\tTRUE\tprecedence\tcheck-in flight\tmodify data"], "original_id": "datacollection-3-40"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after the creation of a claim, the approval of the claim is possible.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is OK, the claim handling process proceeds.\n\nAI: \n0\tFALSE\tprecedence\tMark as Ok\tProceed with claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket is eventually followed by the actual transfer of money\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tmoney transfer\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n\nAI: \n0\tTRUE\tsuccession\tcheck-in flight\tmodify provided data\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process begins with the booking of the ticket\n\nAI: \n0\tFALSE\tinit\tbook ticket\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After check-in of the flight, only the cancellation is admitted\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1910, "output_tokens": 10, "total_costs": 0.0097, "answers": ["\n0\tFALSE\tresponse\tcheck-in flight\tcancel flight"], "original_id": "datacollection-3-41"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The receipt of an invoice is required before the administration department can enter data or scan the invoice.\n\nAI: \n0\tFALSE\tprecedence\treceipt of an invoice\tenter data\n0\tFALSE\tprecedence\treceipt of an invoice\tscan invoice\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When this is accepted and the financial resources are found, the hardware is received by the IT department.\n\nAI: \n0\tFALSE\tprecedence\tthis is accepted\treceive hardware by IT department\n0\tFALSE\tprecedence\tfinancial resourced are found\treceive hardware by IT department\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is OK, the claim handling process proceeds.\n\nAI: \n0\tFALSE\tprecedence\tMark as Ok\tProceed with claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket is eventually followed by the actual transfer of money\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tmoney transfer\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1975, "output_tokens": 11, "total_costs": 0.01004, "answers": ["\n0\tFALSE\tinit\treceive invoice by administration department"], "original_id": "datacollection-1-42"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The receipt of an invoice is required before the administration department can enter data or scan the invoice.\n\nAI: \n0\tFALSE\tprecedence\treceipt of an invoice\tenter data\n0\tFALSE\tprecedence\treceipt of an invoice\tscan invoice\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When all necessary approvals have been received the invoice can be paid.\n\nAI: \n0\tFALSE\tprecedence\treceive all necessary approvals\tpay invoice\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an x-ray is taken, then the x-ray risk must be checked before it\n\nAI: \n0\tFALSE\tprecedence\tcheck x-ray risk\tperform x-ray risk\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the driver delivers the package, she should update the system so all stakeholders are notified.\n\nAI: \n0\tFALSE\tresponse\tdeliver package\tupdate system\n0\tFALSE\tprecedence\tupdate system\tnotify all stakeholders\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n\nAI: \n0\tTRUE\tsuccession\tcheck-in flight\tmodify provided data\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process begins with the booking of the ticket\n\nAI: \n0\tFALSE\tinit\tbook ticket\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If they decide that the invoice appears legit then they enter all relevant data into the system\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1976, "output_tokens": 18, "total_costs": 0.01015, "answers": ["\n0\tFALSE\tprecedence\tdecide invoice appears legit\tenter relevant data into system"], "original_id": "datacollection-1-43"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case can be managed at the union after it has been created.\n\nAI: \n0\tFALSE\tprecedence\tcreate case\tmanage case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Finally, we have to pay the invoice before we can confirm payment.\n\nAI: \n0\tFALSE\tprecedence\tpay invoice\tconfirm payment\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim can be approved, after it has been created.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When the client leaves, the bill must be charged\n\nAI: \n0\tFALSE\tresponse\tleave\tcharge bill\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When all necessary approvals have been received the invoice can be paid.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1868, "output_tokens": 13, "total_costs": 0.009535000000000002, "answers": ["\n0\tFALSE\tprecedence\treceive approvals\tpay invoice"], "original_id": "datacollection-1-44"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Finally, we have to pay the invoice before we can confirm payment.\n\nAI: \n0\tFALSE\tprecedence\tpay invoice\tconfirm payment\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A case can be closed manually at any time, unless we still need to pay out the claim.\n\nAI: \n0\tFALSE\tprecedence\tpay out claim\tcase closed manually\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n\nAI: \n0\tFALSE\tresponse\tsubmit case\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1890, "output_tokens": 11, "total_costs": 0.009615, "answers": ["\n0\tFALSE\tresponse\tconfirm payment\tclose invoice case"], "original_id": "datacollection-1-45"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Enter data is required before any approval can be given.\n\nAI: \n0\tFALSE\tprecedence\tenter data\tgive approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The next step is for the IT department to analyse the request and either approve or deny it.\n\nAI: \n0\tFALSE\tprecedence\tAnalyze request\tApprove request\n0\tFALSE\tprecedence\tAnalyze request\tDeny request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tbooking phase completion\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n\nAI: \n0\tFALSE\tprecedence\treserve part\tassemble bicycle\n0\tFALSE\tsuccession\tpreparation activity has finished\tAssemble bycicle\n0\tFALSE\tprecedence\tback-ordered every item\tAssemble bycicle\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The receipt of an invoice is required before the administration department can enter data or scan the invoice.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2001, "output_tokens": 27, "total_costs": 0.010409999999999999, "answers": ["\n0\tFALSE\tprecedence\treceipt of invoice\tenter data\n0\tFALSE\tprecedence\treceipt of invoice\tscan invoice"], "original_id": "datacollection-1-46"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The receipt of an invoice is required before the administration department can enter data or scan the invoice.\n\nAI: \n0\tFALSE\tprecedence\treceipt of an invoice\tenter data\n0\tFALSE\tprecedence\treceipt of an invoice\tscan invoice\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The loan approval process starts by receiving a customer request for a loan amount.\n\nAI: \n0\tFALSE\tinit\treceive customer request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Enter data is required before any approval can be given.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1919, "output_tokens": 12, "total_costs": 0.009775, "answers": ["\n0\tFALSE\tprecedence\tenter data\tgive approval"], "original_id": "datacollection-1-47"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: They have to create the claim, before they can approve it.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A case can be closed manually at any time, unless we still need to pay out the claim.\n\nAI: \n0\tFALSE\tprecedence\tpay out claim\tcase closed manually\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tbooking phase completion\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n\nAI: \n0\tTRUE\tsuccession\tcheck-in flight\tmodify provided data\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Finally, we have to pay the invoice before we can confirm payment.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1918, "output_tokens": 13, "total_costs": 0.009785, "answers": ["\n0\tFALSE\tprecedence\tpay invoice\tconfirm payment"], "original_id": "datacollection-1-48"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is approved, then it must have been created first.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an x-ray is taken, then the x-ray risk must be checked before it\n\nAI: \n0\tFALSE\tprecedence\tcheck x-ray risk\tperform x-ray risk\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a request is sent, then a proposal is expected to be prepared afterwards\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1990, "output_tokens": 10, "total_costs": 0.010100000000000001, "answers": ["\n0\tFALSE\tresponse\tsend request\tprepare proposal"], "original_id": "datacollection-4-49"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after a claim is created, it is possible to approve the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A case can be closed manually at any time, unless we still need to pay out the claim.\n\nAI: \n0\tFALSE\tprecedence\tpay out claim\tcase closed manually\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a request is sent, then a proposal is expected to be prepared afterwards\n\nAI: \n0\tFALSE\tresponse\tsend request\tprepare proposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n\nAI: \n0\tFALSE\tresponse\tcreate case\tarrange meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1998, "output_tokens": 13, "total_costs": 0.010185000000000001, "answers": ["\n0\tFALSE\tsuccession\tgive confirmation\tprepare proposal"], "original_id": "datacollection-4-50"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The courier company informs the client about a potential delay until there are enough human resources to process the delivery.\n\nAI: \n0\tFALSE\tprecedence\tinform about delay\tprocess delivery\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n\nAI: \n0\tFALSE\tprecedence\tinform customer\torder missing products\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after LO has assigned its case id it is possible to manage the case and for LO to propose dates.\n\nAI: \n0\tFALSE\tprecedence\tassign case id\tmanage case\n0\tFALSE\tprecedence\tassign case id\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every provided laundry service must be billed\n\nAI: \n0\tFALSE\tresponse\tprovide laundry service\tbill\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every provided room service must be billed.\n\nAI: \n0\tFALSE\tresponse\tprovide room service\tbill\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When the client leaves, the bill must be charged\n\nAI: \n0\tFALSE\tresponse\tleave\tcharge bill\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n\nAI: \n0\tTRUE\tsuccession\tcheck-in flight\tmodify provided data\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance has to start by registering client data\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1905, "output_tokens": 8, "total_costs": 0.009645, "answers": ["\n0\tFALSE\tinit\tregister client data"], "original_id": "datacollection-5-51"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it can be approved or rejected.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n0\tFALSE\tprecedence\tcreate claim\treject claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every provided laundry service must be billed\n\nAI: \n0\tFALSE\tresponse\tprovide laundry service\tbill\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance has to start by registering client data\n\nAI: \n0\tFALSE\tinit\tregister client data\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every provided room service must be billed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1851, "output_tokens": 12, "total_costs": 0.009434999999999999, "answers": ["\n0\tFALSE\tresponse\tprovide room service\tbill\n"], "original_id": "datacollection-5-52"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Personal information of passengers can be provided after the booking of the ticket\n\nAI: \n0\tFALSE\tprecedence\tbook ticket\tprovide personal information\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it can be approved or rejected.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n0\tFALSE\tprecedence\tcreate claim\treject claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every provided room service must be billed.\n\nAI: \n0\tFALSE\tresponse\tprovide room service\tbill\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When the client leaves, the bill must be charged\n\nAI: \n0\tFALSE\tresponse\tleave\tcharge bill\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance has to start by registering client data\n\nAI: \n0\tFALSE\tinit\tregister client data\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process begins with the booking of the ticket\n\nAI: \n0\tFALSE\tinit\tbook ticket\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every provided laundry service must be billed\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1881, "output_tokens": 12, "total_costs": 0.009585, "answers": ["\n0\tFALSE\tresponse\tprovide laundry service\tbill\n"], "original_id": "datacollection-5-53"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When approval of the claim occurs, creation of the claim must have preceded.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an x-ray is taken, then the x-ray risk must be checked before it\n\nAI: \n0\tFALSE\tprecedence\tcheck x-ray risk\tperform x-ray risk\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every provided laundry service must be billed\n\nAI: \n0\tFALSE\tresponse\tprovide laundry service\tbill\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When the client leaves, the bill must be charged\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1899, "output_tokens": 10, "total_costs": 0.009645, "answers": ["\n0\tFALSE\tresponse\tclient leaves\tcharge bill"], "original_id": "datacollection-5-54"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The next step is for the IT department to analyse the request and either approve or deny it.\n\nAI: \n0\tFALSE\tprecedence\tAnalyze request\tApprove request\n0\tFALSE\tprecedence\tAnalyze request\tDeny request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n\nAI: \n0\tFALSE\tprecedence\tinform customer\torder missing products\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n\nAI: \n0\tFALSE\tresponse\tcreate case\tarrange meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted it may get a local id at the union, but it should also subsequently be assigned a case id in LO.\n\nAI: \n0\tFALSE\tprecedence\tsubmit case\tget local id\n0\tFALSE\tresponse\tsubmit case\tassign case id\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The Police Report related to the car accident is searched within the Police Report database and put in a file together with the Claim Documentation.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2069, "output_tokens": 14, "total_costs": 0.010555, "answers": ["\n0\tFALSE\tprecedence\tsearch Police Report\tput in file\n"], "original_id": "datacollection-claimscreation.txt-55"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n\nAI: \n0\tFALSE\tprecedence\tinform customer\torder missing products\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The Police Report related to the car accident is searched within the Police Report database and put in a file together with the Claim Documentation.\n\nAI: \n0\tFALSE\tprecedence\tsearch report\tput in a file together with the claim documentation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n\nAI: \n0\tFALSE\tresponse\tcreate case\tarrange meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A customer brings in a defective computer and the manager analyzes the defect and gives back an invoice.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1962, "output_tokens": 29, "total_costs": 0.010244999999999999, "answers": ["\n0\tFALSE\tprecedence\tbring in defective computer\tanalyze defect\n0\tFALSE\tprecedence\tanalyze defect\tgive back invoice"], "original_id": "datacollection-Model1-2.txt-56"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After check-in of the flight, only the cancellation is admitted\n\nAI: \n0\tFALSE\tprecedence\tcheck-in flight\tcancellation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after the creation of a claim, the approval of the claim is possible.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n\nAI: \n0\tFALSE\tresponse\tapproval, rejection, change\tsend notification\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1931, "output_tokens": 10, "total_costs": 0.009805000000000001, "answers": ["\n0\tFALSE\tresponse\tperform activity\ttest functionality"], "original_id": "datacollection-Model1-2.txt-57"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is OK, the claim handling process proceeds.\n\nAI: \n0\tFALSE\tprecedence\tMark as Ok\tProceed with claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an x-ray is taken, then the x-ray risk must be checked before it\n\nAI: \n0\tFALSE\tprecedence\tcheck x-ray risk\tperform x-ray risk\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n\nAI: \n0\tFALSE\tprecedence\treserve part\tassemble bicycle\n0\tFALSE\tsuccession\tpreparation activity has finished\tAssemble bycicle\n0\tFALSE\tprecedence\tback-ordered every item\tAssemble bycicle\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an error is detected, another arbitrary repair activity is executed, otherwise the repair is finished.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1994, "output_tokens": 23, "total_costs": 0.010315, "answers": ["\n0\tFALSE\tprecedence\tdetect error\texecute repair activity\n0\tFALSE\tend\texecute repair activity"], "original_id": "datacollection-Model1-2.txt-58"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is approved, then it must have been created first.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a claim is registered, it is examined by a claims officer.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1904, "output_tokens": 12, "total_costs": 0.009699999999999999, "answers": ["\n0\tFALSE\tsuccession\tregister claim\texamine claim"], "original_id": "datacollection-Model3-3.txt-59"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is marked as Not OK, it is sent back to the claims officer and the recommendation is repeated.\n\nAI: \n0\tFALSE\tprecedence\tMark as not ok\tsend it back\n0\tFALSE\tprecedence\tsend it back\tRepeat recommendation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a claim is registered, it is examined by a claims officer.\n\nAI: \n0\tFALSE\tprecedence\tregister claim\texamine claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted it may get a local id at the union, but it should also subsequently be assigned a case id in LO.\n\nAI: \n0\tFALSE\tprecedence\tsubmit case\tget local id\n0\tFALSE\tresponse\tsubmit case\tassign case id\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This recommendation is then checked by a senior claims officer who may mark the claim as OK or Not OK.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2026, "output_tokens": 29, "total_costs": 0.010564999999999998, "answers": ["\n0\tFALSE\tprecedence\tcheck recommendation\tmark claim as OK\n0\tFALSE\tprecedence\tcheck recommendation\tmark claim as Not OK"], "original_id": "datacollection-Model3-3.txt-60"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This recommendation is then checked by a senior claims officer who may mark the claim as OK or Not OK.\n\nAI: \n0\tFALSE\tprecedence\tCheck recommendation\tMark as OK\n0\tFALSE\tprecedence\tCheck recommendation\tMark as Not OK\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is OK, the claim handling process proceeds.\n\nAI: \n0\tFALSE\tprecedence\tMark as Ok\tProceed with claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a claim is registered, it is examined by a claims officer.\n\nAI: \n0\tFALSE\tprecedence\tregister claim\texamine claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a request is sent, then a proposal is expected to be prepared afterwards\n\nAI: \n0\tFALSE\tresponse\tsend request\tprepare proposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is marked as Not OK, it is sent back to the claims officer and the recommendation is repeated.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1991, "output_tokens": 30, "total_costs": 0.010405000000000001, "answers": ["\n0\tFALSE\tresponse\tMark claim as Not OK\tSend back to claims officer\n0\tFALSE\tresponse\tMark claim as Not OK\tRepeat recommendation"], "original_id": "datacollection-Model3-3.txt-61"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is marked as Not OK, it is sent back to the claims officer and the recommendation is repeated.\n\nAI: \n0\tFALSE\tprecedence\tMark as not ok\tsend it back\n0\tFALSE\tprecedence\tsend it back\tRepeat recommendation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is OK, the claim handling process proceeds.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1949, "output_tokens": 15, "total_costs": 0.00997, "answers": ["\n0\tFALSE\tprecedence\tclaim OK\tproceed claim handling process"], "original_id": "datacollection-Model3-3.txt-62"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The next step is for the IT department to analyse the request and either approve or deny it.\n\nAI: \n0\tFALSE\tprecedence\tAnalyze request\tApprove request\n0\tFALSE\tprecedence\tAnalyze request\tDeny request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When this is accepted and the financial resources are found, the hardware is received by the IT department.\n\nAI: \n0\tFALSE\tprecedence\tthis is accepted\treceive hardware by IT department\n0\tFALSE\tprecedence\tfinancial resourced are found\treceive hardware by IT department\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The creation of the claim is a condition for the approval of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket is eventually followed by the actual transfer of money\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tmoney transfer\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tbooking phase completion\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The loan approval process starts by receiving a customer request for a loan amount.\n\nAI: \n0\tFALSE\tinit\treceive customer request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1997, "output_tokens": 11, "total_costs": 0.010150000000000001, "answers": ["\n0\tFALSE\tinit\treceive request by IT department"], "original_id": "datacollection-472026493_rev3.txt-63"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The management then analyses the request and decides if it is approved or not.\n\nAI: \n0\tFALSE\tprecedence\tAnalyze request\tdecide if approved\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: However, if the request is approved it is edited and completed.\n\nAI: \n0\tFALSE\tprecedence\tApprove request\tedit request\n0\tFALSE\tprecedence\tApprove request\tComplete request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the scenario where the management does not approve the request, it can send the request back to the IT department for rework, then the IT department has to go back to editing and completing a request.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tSend back request to IT\n0\tFALSE\tresponse\tSend back request to IT\tComplete request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n\nAI: \n0\tFALSE\tprecedence\treserve part\tassemble bicycle\n0\tFALSE\tsuccession\tpreparation activity has finished\tAssemble bycicle\n0\tFALSE\tprecedence\tback-ordered every item\tAssemble bycicle\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The next step is for the IT department to analyse the request and either approve or deny it.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2088, "output_tokens": 26, "total_costs": 0.010830000000000001, "answers": ["\n0\tFALSE\tprecedence\tanalyze request\tapprove request\n0\tFALSE\tprecedence\tanalyze request\tdeny request"], "original_id": "datacollection-472026493_rev3.txt-64"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is OK, the claim handling process proceeds.\n\nAI: \n0\tFALSE\tprecedence\tMark as Ok\tProceed with claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: However, if the request is approved it is edited and completed.\n\nAI: \n0\tFALSE\tprecedence\tApprove request\tedit request\n0\tFALSE\tprecedence\tApprove request\tComplete request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1972, "output_tokens": 18, "total_costs": 0.01013, "answers": ["\n0\tFALSE\tresponse\tdeny\tinform employee\n0\tFALSE\tend\tinform employee"], "original_id": "datacollection-472026493_rev3.txt-65"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The management then analyses the request and decides if it is approved or not.\n\nAI: \n0\tFALSE\tprecedence\tAnalyze request\tdecide if approved\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: However, if the request is approved it is edited and completed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1979, "output_tokens": 25, "total_costs": 0.010270000000000001, "answers": ["\n0\tFALSE\tsuccession\tapprove request\tedit request\n0\tFALSE\tsuccession\tapprove request\tcomplete request"], "original_id": "datacollection-472026493_rev3.txt-66"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When this is accepted and the financial resources are found, the hardware is received by the IT department.\n\nAI: \n0\tFALSE\tprecedence\tthis is accepted\treceive hardware by IT department\n0\tFALSE\tprecedence\tfinancial resourced are found\treceive hardware by IT department\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after a claim is created, it is possible to approve the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n\nAI: \n0\tFALSE\tprecedence\tinform customer\torder missing products\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n\nAI: \n0\tFALSE\tresponse\tcreate case\tarrange meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2017, "output_tokens": 27, "total_costs": 0.01049, "answers": ["\n0\tFALSE\tsuccession\treceive offer\tfill in form\n0\tFALSE\tsuccession\tfill in form\tsend form to management"], "original_id": "datacollection-472026493_rev3.txt-67"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: However, if the request is approved it is edited and completed.\n\nAI: \n0\tFALSE\tprecedence\tApprove request\tedit request\n0\tFALSE\tprecedence\tApprove request\tComplete request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The next step is for the IT department to analyse the request and either approve or deny it.\n\nAI: \n0\tFALSE\tprecedence\tAnalyze request\tApprove request\n0\tFALSE\tprecedence\tAnalyze request\tDeny request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the scenario where the management does not approve the request, it can send the request back to the IT department for rework, then the IT department has to go back to editing and completing a request.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tSend back request to IT\n0\tFALSE\tresponse\tSend back request to IT\tComplete request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The management then analyses the request and decides if it is approved or not.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2076, "output_tokens": 26, "total_costs": 0.01077, "answers": ["\n0\tFALSE\tprecedence\tAnalyze request\tApprove request\n0\tFALSE\tprecedence\tAnalyze request\tDeny request"], "original_id": "datacollection-472026493_rev3.txt-68"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The next step is for the IT department to analyse the request and either approve or deny it.\n\nAI: \n0\tFALSE\tprecedence\tAnalyze request\tApprove request\n0\tFALSE\tprecedence\tAnalyze request\tDeny request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: However, if the request is approved it is edited and completed.\n\nAI: \n0\tFALSE\tprecedence\tApprove request\tedit request\n0\tFALSE\tprecedence\tApprove request\tComplete request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n\nAI: \n0\tFALSE\tresponse\tsubmit case\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When this is accepted and the financial resources are found, the hardware is received by the IT department.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1978, "output_tokens": 28, "total_costs": 0.01031, "answers": ["\n0\tFALSE\tprecedence\taccept this\tFind financial resources\n0\tFALSE\tprecedence\tFind financial resources\tReceive hardware"], "original_id": "datacollection-472026493_rev3.txt-69"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The receipt of an invoice is required before the administration department can enter data or scan the invoice.\n\nAI: \n0\tFALSE\tprecedence\treceipt of an invoice\tenter data\n0\tFALSE\tprecedence\treceipt of an invoice\tscan invoice\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When this is accepted and the financial resources are found, the hardware is received by the IT department.\n\nAI: \n0\tFALSE\tprecedence\tthis is accepted\treceive hardware by IT department\n0\tFALSE\tprecedence\tfinancial resourced are found\treceive hardware by IT department\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a vendor is selected and confirmed, the system will generate and send a purchase order and wait for the product to be delivered and the invoice received.\n\nAI: \n0\tFALSE\tprecedence\tselect vendor\tgenerate purchase order\n0\tFALSE\tprecedence\tconfirm vendor\tgeneate purchase order\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n\nAI: \n0\tFALSE\tresponse\tcreate case\tarrange meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n\nAI: \n0\tFALSE\tprecedence\treserve part\tassemble bicycle\n0\tFALSE\tsuccession\tpreparation activity has finished\tAssemble bycicle\n0\tFALSE\tprecedence\tback-ordered every item\tAssemble bycicle\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2094, "output_tokens": 10, "total_costs": 0.010620000000000001, "answers": ["\n0\tFALSE\tend\ttake care of invoice"], "original_id": "datacollection-472026493_rev3.txt-70"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The next step is for the IT department to analyse the request and either approve or deny it.\n\nAI: \n0\tFALSE\tprecedence\tAnalyze request\tApprove request\n0\tFALSE\tprecedence\tAnalyze request\tDeny request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is asked to make a change, then it is returned to the petitioner who can review the comments for the change request.\n\nAI: \n0\tFALSE\tprecedence\task to make change\treturn to petitioner/employee\n0\tFALSE\tprecedence\treturn to petitioner/employee\treview comments\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n\nAI: \n0\tFALSE\tresponse\tcreate case\tarrange meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n\nAI: \n0\tFALSE\tresponse\tapproval, rejection, change\tsend notification\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the scenario where the management does not approve the request, it can send the request back to the IT department for rework, then the IT department has to go back to editing and completing a request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2106, "output_tokens": 39, "total_costs": 0.011115, "answers": ["\n0\tTRUE\tprecedence\tapprove request\tsend request back\n0\tFALSE\tsuccession\tsend request back\tgo back to editing\n0\tFALSE\tresponse\tgo back to editing\tcomplete request"], "original_id": "datacollection-472026493_rev3.txt-71"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after a claim is created, it is possible to approve the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: They have to create the claim, before they can approve it.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The next step is for the IT department to analyse the request and either approve or deny it.\n\nAI: \n0\tFALSE\tprecedence\tAnalyze request\tApprove request\n0\tFALSE\tprecedence\tAnalyze request\tDeny request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the scenario where the management does not approve the request, it can send the request back to the IT department for rework, then the IT department has to go back to editing and completing a request.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tSend back request to IT\n0\tFALSE\tresponse\tSend back request to IT\tComplete request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n\nAI: \n0\tTRUE\tsuccession\tcheck-in flight\tmodify provided data\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2020, "output_tokens": 21, "total_costs": 0.010414999999999999, "answers": ["\n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tFALSE\tend\tdeny request"], "original_id": "datacollection-472026493_rev3.txt-72"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The creation of the claim is a condition for the approval of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer needs further review or the loan amount is for \\$10,000 or more, the request is sent to the approver Web service.\n\nAI: \n0\tFALSE\tprecedence\tneed further review\tsend request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim should be preceded by the creation of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n\nAI: \n0\tFALSE\tresponse\tapproval, rejection, change\tsend notification\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The loan approval process starts by receiving a customer request for a loan amount.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1919, "output_tokens": 10, "total_costs": 0.009745000000000002, "answers": ["\n0\tFALSE\tinit\treceive customer request\t\n"], "original_id": "datacollection-Model5-1.txt-73"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n\nAI: \n0\tFALSE\tprecedence\tReceive amount request\tAssess credit risk\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n\nAI: \n0\tFALSE\tprecedence\tReceive amount request\tAssess credit risk\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the application is returned to the applicant/employee who can review the rejection reasons.\n\nAI: \n0\tFALSE\tprecedence\treject request\treturn application\n0\tFALSE\tprecedence\treturn application\treview rejection reasons\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a request is sent, then a proposal is expected to be prepared afterwards\n\nAI: \n0\tFALSE\tresponse\tsend request\tprepare proposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The loan approval process starts by receiving a customer request for a loan amount.\n\nAI: \n0\tFALSE\tinit\treceive customer request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer needs further review or the loan amount is for \\$10,000 or more, the request is sent to the approver Web service.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2035, "output_tokens": 39, "total_costs": 0.010760000000000002, "answers": ["\n0\tFALSE\tprecedence\tneed further review\tsend request to approver\n0\tFALSE\tprecedence\tloan amount is for $10,000 or more\tsend request to approver"], "original_id": "datacollection-Model5-1.txt-74"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the office supplies.\n\nAI: \n0\tFALSE\tprecedence\tregister requirement\treceive request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The receipt of an invoice is required before the administration department can enter data or scan the invoice.\n\nAI: \n0\tFALSE\tprecedence\treceipt of an invoice\tenter data\n0\tFALSE\tprecedence\treceipt of an invoice\tscan invoice\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the vacation.\n\nAI: \n0\tFALSE\tprecedence\tregister requirement\treceive request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tbooking phase completion\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n\nAI: \n0\tFALSE\tresponse\tapproval, rejection, change\tsend notification\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After waiting an average of x days for the delivery, the staff should check again if all products are on store.\n\nAI: \n0\tFALSE\tresponse\twait for x days\tcheck again \n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of an Office Supply Request starts when any employee of the organization submits an office supply request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1978, "output_tokens": 10, "total_costs": 0.01004, "answers": ["\n0\tFALSE\tinit\tsubmit office supply request"], "original_id": "datacollection-Model5-3.txt-75"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the vacation.\n\nAI: \n0\tFALSE\tprecedence\tregister requirement\treceive request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket is eventually followed by the actual transfer of money\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tmoney transfer\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of an Office Supply Request starts when any employee of the organization submits an office supply request.\n\nAI: \n0\tFALSE\tinit\tsubmit office supply request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the office supplies.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1991, "output_tokens": 13, "total_costs": 0.010150000000000001, "answers": ["\n0\tFALSE\tprecedence\tregister requirement\treceive request\n"], "original_id": "datacollection-Model5-3.txt-76"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is OK, the claim handling process proceeds.\n\nAI: \n0\tFALSE\tprecedence\tMark as Ok\tProceed with claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the application is returned to the applicant/employee who can review the rejection reasons.\n\nAI: \n0\tFALSE\tprecedence\treject request\treturn application\n0\tFALSE\tprecedence\treturn application\treview rejection reasons\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: However, if the request is approved it is edited and completed.\n\nAI: \n0\tFALSE\tprecedence\tApprove request\tedit request\n0\tFALSE\tprecedence\tApprove request\tComplete request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1981, "output_tokens": 8, "total_costs": 0.010025000000000001, "answers": ["\n0\tFALSE\tend\treject request"], "original_id": "datacollection-Model5-3.txt-77"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the application is returned to the applicant/employee who can review the rejection reasons.\n\nAI: \n0\tFALSE\tprecedence\treject request\treturn application\n0\tFALSE\tprecedence\treturn application\treview rejection reasons\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a request is sent, then a proposal is expected to be prepared afterwards\n\nAI: \n0\tFALSE\tresponse\tsend request\tprepare proposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is asked to make a change, then it is returned to the petitioner who can review the comments for the change request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2041, "output_tokens": 26, "total_costs": 0.010595, "answers": ["\n0\tFALSE\tprecedence\task to make change\treturn request\n0\tFALSE\tprecedence\treturn request\treview comments"], "original_id": "datacollection-Model5-3.txt-78"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: However, if the request is approved it is edited and completed.\n\nAI: \n0\tFALSE\tprecedence\tApprove request\tedit request\n0\tFALSE\tprecedence\tApprove request\tComplete request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a request is sent, then a proposal is expected to be prepared afterwards\n\nAI: \n0\tFALSE\tresponse\tsend request\tprepare proposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, it will go to the purchase department that will be in charge of making quotations (using a subprocess) and select a vendor.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1995, "output_tokens": 34, "total_costs": 0.010485000000000001, "answers": ["\n0\tFALSE\tprecedence\tapprove request\tgo to purchase department\n0\tFALSE\tresponse\tgo to purchase department\tmake quotations\n0\tFALSE\tresponse\tmake quotations\tselect vendor"], "original_id": "datacollection-Model5-3.txt-79"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, it will go to the purchase department that will be in charge of making quotations (using a subprocess) and select a vendor.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgo to purchase department\n0\tFALSE\tprecedence\tgo to purchase department\tmake quotations / select vendor\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n\nAI: \n0\tFALSE\tprecedence\tinform customer\torder missing products\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n\nAI: \n0\tFALSE\tresponse\tapproval, rejection, change\tsend notification\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a vendor is selected and confirmed, the system will generate and send a purchase order and wait for the product to be delivered and the invoice received.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1991, "output_tokens": 69, "total_costs": 0.01099, "answers": ["\n0\tFALSE\tprecedence\tselect vendor\tconfirm vendor\n0\tFALSE\tprecedence\tconfirm vendor\tgenerate purchase order\n0\tFALSE\tprecedence\tgenerate purchase order\tsend purchase order\n0\tFALSE\tprecedence\tsend purchase order\twait for product delivery\n0\tFALSE\tprecedence\twait for product delivery\twait for invoice received"], "original_id": "datacollection-Model5-3.txt-80"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after the creation of a claim, the approval of the claim is possible.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The creation of the claim is a condition for the approval of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n\nAI: \n0\tFALSE\tprecedence\treserve part\tassemble bicycle\n0\tFALSE\tsuccession\tpreparation activity has finished\tAssemble bycicle\n0\tFALSE\tprecedence\tback-ordered every item\tAssemble bycicle\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of an Office Supply Request starts when any employee of the organization submits an office supply request.\n\nAI: \n0\tFALSE\tinit\tsubmit office supply request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1986, "output_tokens": 27, "total_costs": 0.010335, "answers": ["\n0\tFALSE\tresponse\tapproval\tsend notification\n0\tFALSE\tresponse\trejection\tsend notification\n0\tFALSE\tresponse\tchange required\tsend notification"], "original_id": "datacollection-Model5-3.txt-81"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The creation of the claim is a condition for the approval of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the vacation.\n\nAI: \n0\tFALSE\tprecedence\tregister requirement\treceive request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The courier company informs the client about a potential delay until there are enough human resources to process the delivery.\n\nAI: \n0\tFALSE\tprecedence\tinform about delay\tprocess delivery\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tbooking phase completion\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n\nAI: \n0\tFALSE\tresponse\tapproval, rejection, change\tsend notification\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of an Office Supply Request starts when any employee of the organization submits an office supply request.\n\nAI: \n0\tFALSE\tinit\tsubmit office supply request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1952, "output_tokens": 9, "total_costs": 0.009895, "answers": ["\n0\tFALSE\tinit\tsubmit vacation request"], "original_id": "datacollection-Model5-2.txt-82"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the office supplies.\n\nAI: \n0\tFALSE\tprecedence\tregister requirement\treceive request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket is eventually followed by the actual transfer of money\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tmoney transfer\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the vacation.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1984, "output_tokens": 12, "total_costs": 0.0101, "answers": ["\n0\tFALSE\tprecedence\tregister requirement\treceive request"], "original_id": "datacollection-Model5-2.txt-83"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is asked to make a change, then it is returned to the petitioner who can review the comments for the change request.\n\nAI: \n0\tFALSE\tprecedence\task to make change\treturn to petitioner/employee\n0\tFALSE\tprecedence\treturn to petitioner/employee\treview comments\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a request is sent, then a proposal is expected to be prepared afterwards\n\nAI: \n0\tFALSE\tresponse\tsend request\tprepare proposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the application is returned to the applicant/employee who can review the rejection reasons.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2064, "output_tokens": 25, "total_costs": 0.010695000000000001, "answers": ["\n0\tFALSE\tprecedence\treject request\treturn application\n0\tFALSE\tprecedence\treturn application\treview rejection reasons"], "original_id": "datacollection-Model5-2.txt-84"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is approved, then it must have been created first.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the application is returned to the applicant/employee who can review the rejection reasons.\n\nAI: \n0\tFALSE\tprecedence\treject request\treturn application\n0\tFALSE\tprecedence\treturn application\treview rejection reasons\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is asked to make a change, then it is returned to the petitioner who can review the comments for the change request.\n\nAI: \n0\tFALSE\tprecedence\task to make change\treturn to petitioner/employee\n0\tFALSE\tprecedence\treturn to petitioner/employee\treview comments\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a request is sent, then a proposal is expected to be prepared afterwards\n\nAI: \n0\tFALSE\tresponse\tsend request\tprepare proposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n\nAI: \n0\tFALSE\tresponse\tcreate case\tarrange meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2031, "output_tokens": 25, "total_costs": 0.010530000000000001, "answers": ["\n0\tFALSE\tsuccession\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures"], "original_id": "datacollection-Model5-2.txt-85"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim should be preceded by the creation of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is OK, the claim handling process proceeds.\n\nAI: \n0\tFALSE\tprecedence\tMark as Ok\tProceed with claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The courier company informs the client about a potential delay until there are enough human resources to process the delivery.\n\nAI: \n0\tFALSE\tprecedence\tinform about delay\tprocess delivery\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tbooking phase completion\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket is eventually followed by the actual transfer of money\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tmoney transfer\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n\nAI: \n0\tFALSE\tinit\texamine patient\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1904, "output_tokens": 8, "total_costs": 0.00964, "answers": ["\n0\tFALSE\tinit\treview order"], "original_id": "datacollection-784358570_rev2.txt-86"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after a claim is created, it is possible to approve the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a request is sent, then a proposal is expected to be prepared afterwards\n\nAI: \n0\tFALSE\tresponse\tsend request\tprepare proposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1999, "output_tokens": 23, "total_costs": 0.01034, "answers": ["\n0\tFALSE\tresponse\tmissing\tinform customer about potential delay\n0\tFALSE\tresponse\tmissing\torder missing products"], "original_id": "datacollection-784358570_rev2.txt-87"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the driver delivers the package, she should update the system so all stakeholders are notified.\n\nAI: \n0\tFALSE\tresponse\tdeliver package\tupdate system\n0\tFALSE\tprecedence\tupdate system\tnotify all stakeholders\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After check-in of the flight, only the cancellation is admitted\n\nAI: \n0\tFALSE\tprecedence\tcheck-in flight\tcancellation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Third, if it takes the supervisor more than 7 days to respond, an email is sent to the employee informing him/her that the approval is in progress and the part of the processes after a supervisor is asked for approval is repeated.\n\nAI: \n0\tFALSE\tprecedence\trespond\tsend email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the driver delivers the package, she should update the system so all stakeholders are notified.\n\nAI: \n0\tFALSE\tresponse\tdeliver package\tupdate system\n0\tFALSE\tprecedence\tupdate system\tnotify all stakeholders\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of an Office Supply Request starts when any employee of the organization submits an office supply request.\n\nAI: \n0\tFALSE\tinit\tsubmit office supply request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After waiting an average of x days for the delivery, the staff should check again if all products are on store.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1984, "output_tokens": 12, "total_costs": 0.0101, "answers": ["\n0\tFALSE\tresponse\twait for delivery\tcheck products on store"], "original_id": "datacollection-784358570_rev2.txt-88"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n\nAI: \n0\tFALSE\tprecedence\tinform customer\torder missing products\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after a claim is created, it is possible to approve the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The creation of the claim is a condition for the approval of the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreation claim\tapproval claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After waiting an average of x days for the delivery, the staff should check again if all products are on store.\n\nAI: \n0\tFALSE\tresponse\twait for x days\tcheck again \n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n\nAI: \n0\tFALSE\tresponse\tpayment ticket\tbooking phase completion\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The courier company informs the client about a potential delay until there are enough human resources to process the delivery.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1977, "output_tokens": 12, "total_costs": 0.010065000000000001, "answers": ["\n0\tFALSE\tprecedence\tinform client\tprocess delivery"], "original_id": "datacollection-784358570_rev2.txt-89"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When this is accepted and the financial resources are found, the hardware is received by the IT department.\n\nAI: \n0\tFALSE\tprecedence\tthis is accepted\treceive hardware by IT department\n0\tFALSE\tprecedence\tfinancial resourced are found\treceive hardware by IT department\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: To approve a claim, it should be created first.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After waiting an average of x days for the delivery, the staff should check again if all products are on store.\n\nAI: \n0\tFALSE\tresponse\twait for x days\tcheck again \n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n\nAI: \n0\tFALSE\tinit\treview order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the driver delivers the package, she should update the system so all stakeholders are notified.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1934, "output_tokens": 12, "total_costs": 0.00985, "answers": ["\n0\tFALSE\tsuccession\tdeliver package\tupdate system"], "original_id": "datacollection-784358570_rev2.txt-90"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after a claim is created, it is possible to approve the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n\nAI: \n0\tFALSE\tresponse\tcreate case\tarrange meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n\nAI: \n0\tFALSE\tresponse\tsubmit case\tpropose dates\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1950, "output_tokens": 11, "total_costs": 0.009915, "answers": ["\n0\tFALSE\tresponse\tReceive order\tCreate process instance"], "original_id": "datacollection-BicycleManufacturing.txt-91"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an error is detected, another arbitrary repair activity is executed, otherwise the repair is finished.\n\nAI: \n0\tFALSE\tprecedence\terror is detected\texecute repair activity\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n\nAI: \n0\tFALSE\tprecedence\tinform customer\torder missing products\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n\nAI: \n0\tFALSE\tprecedence\tReceive amount request\tAssess credit risk\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n\nAI: \n0\tFALSE\tresponse\tapproval, rejection, change\tsend notification\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2000, "output_tokens": 31, "total_costs": 0.010465, "answers": ["\n0\tFALSE\tprecedence\treserve or back-order every item\tassemble bicycle\n0\tFALSE\tprecedence\tfinish preparation activity\tassemble bicycle"], "original_id": "datacollection-BicycleManufacturing.txt-92"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n\nAI: \n0\tFALSE\tprecedence\tinform customer\torder missing products\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The next step is for the IT department to analyse the request and either approve or deny it.\n\nAI: \n0\tFALSE\tprecedence\tAnalyze request\tApprove request\n0\tFALSE\tprecedence\tAnalyze request\tDeny request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the scenario where the management does not approve the request, it can send the request back to the IT department for rework, then the IT department has to go back to editing and completing a request.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tSend back request to IT\n0\tFALSE\tresponse\tSend back request to IT\tComplete request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n\nAI: \n0\tFALSE\tprecedence\treserve part\tassemble bicycle\n0\tFALSE\tsuccession\tpreparation activity has finished\tAssemble bycicle\n0\tFALSE\tprecedence\tback-ordered every item\tAssemble bycicle\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n\nAI: \n0\tFALSE\tend\tpayout\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2044, "output_tokens": 9, "total_costs": 0.010355, "answers": ["\n0\tFALSE\tend\tship bicycle\t\n"], "original_id": "datacollection-BicycleManufacturing.txt-93"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n\nAI: \n0\tFALSE\tprecedence\tReceive amount request\tAssess credit risk\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer needs further review or the loan amount is for \\$10,000 or more, the request is sent to the approver Web service.\n\nAI: \n0\tFALSE\tprecedence\tneed further review\tsend request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is OK, the claim handling process proceeds.\n\nAI: \n0\tFALSE\tprecedence\tMark as Ok\tProceed with claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n\nAI: \n0\tFALSE\tprecedence\treserve part\tassemble bicycle\n0\tFALSE\tsuccession\tpreparation activity has finished\tAssemble bycicle\n0\tFALSE\tprecedence\tback-ordered every item\tAssemble bycicle\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2038, "output_tokens": 51, "total_costs": 0.010955, "answers": ["** Sentence 0 **\n\nActions:\nrequested amount lower or equal to 1M$\nassess risk of the credit\n\nConstraints:\n0\tFALSE\tprecedence\trequested amount lower or equal to 1M$\tassess risk of the credit"], "original_id": "datacollection-20818304_rev1.txt-94"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it can be approved or rejected.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n0\tFALSE\tprecedence\tcreate claim\treject claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After check-in of the flight, only the cancellation is admitted\n\nAI: \n0\tFALSE\tprecedence\tcheck-in flight\tcancellation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the application is returned to the applicant/employee who can review the rejection reasons.\n\nAI: \n0\tFALSE\tprecedence\treject request\treturn application\n0\tFALSE\tprecedence\treturn application\treview rejection reasons\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When the client leaves, the bill must be charged\n\nAI: \n0\tFALSE\tresponse\tleave\tcharge bill\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The loan approval process starts by receiving a customer request for a loan amount.\n\nAI: \n0\tFALSE\tinit\treceive customer request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After the approval request, the credit could be accepted or rejected\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1936, "output_tokens": 26, "total_costs": 0.010069999999999999, "answers": ["\n0\tFALSE\tprecedence\tapproval request\taccept credit\n0\tFALSE\tprecedence\tapproval request\treject credit"], "original_id": "datacollection-20818304_rev1.txt-95"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n\nAI: \n0\tFALSE\tprecedence\tReceive amount request\tAssess credit risk\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n\nAI: \n0\tFALSE\tprecedence\tReceive amount request\tAssess credit risk\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an x-ray is taken, then the x-ray risk must be checked before it\n\nAI: \n0\tFALSE\tprecedence\tcheck x-ray risk\tperform x-ray risk\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n\nAI: \n0\tFALSE\tresponse\tarrange meeting\thold meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When the client leaves, the bill must be charged\n\nAI: \n0\tFALSE\tresponse\tleave\tcharge bill\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\nAI: \n0\tFALSE\tsuccession\tapply cast\tremove cast\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1962, "output_tokens": 10, "total_costs": 0.00996, "answers": ["\n0\tFALSE\tresponse\trequest amount approval\trequest approval"], "original_id": "datacollection-20818304_rev1.txt-96"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n\nAI: \n0\tFALSE\tprecedence\tReceive amount request\tAssess credit risk\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer needs further review or the loan amount is for \\$10,000 or more, the request is sent to the approver Web service.\n\nAI: \n0\tFALSE\tprecedence\tneed further review\tsend request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is OK, the claim handling process proceeds.\n\nAI: \n0\tFALSE\tprecedence\tMark as Ok\tProceed with claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n\nAI: \n0\tFALSE\tprecedence\treserve part\tassemble bicycle\n0\tFALSE\tsuccession\tpreparation activity has finished\tAssemble bycicle\n0\tFALSE\tprecedence\tback-ordered every item\tAssemble bycicle\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2038, "output_tokens": 29, "total_costs": 0.010624999999999999, "answers": ["** Sentence 0 **\n\nActions:\nrequest amount\nassess risk\n\nConstraints:\n0\tFALSE\tprecedence\trequest amount\tassess risk"], "original_id": "datacollection-20818304_rev1.txt-97"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is OK, the claim handling process proceeds.\n\nAI: \n0\tFALSE\tprecedence\tMark as Ok\tProceed with claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an error is detected, another arbitrary repair activity is executed, otherwise the repair is finished.\n\nAI: \n0\tFALSE\tprecedence\terror is detected\texecute repair activity\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n\nAI: \n0\tTRUE\tsuccession\tcheck-in flight\tmodify provided data\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1981, "output_tokens": 8, "total_costs": 0.010025000000000001, "answers": ["\n0\tFALSE\tinit\tfile expense report"], "original_id": "datacollection-348018817_rev1.txt-98"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after a claim is created, it is possible to approve the claim.\n\nAI: \n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the vacation.\n\nAI: \n0\tFALSE\tprecedence\tregister requirement\treceive request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n\nAI: \n0\tFALSE\tresponse\tconfirm payment\tclose case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n\nAI: \n0\tFALSE\tsuccession\tgive confirmation\tproposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n\nAI: \n0\tFALSE\tinit\treceive invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1963, "output_tokens": 14, "total_costs": 0.010025000000000001, "answers": ["\n0\tFALSE\tprecedence\treceive expense report\tperform check"], "original_id": "datacollection-348018817_rev1.txt-99"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is OK, the claim handling process proceeds.\n\nAI: \n0\tFALSE\tprecedence\tMark as Ok\tProceed with claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a request is sent, then a proposal is expected to be prepared afterwards\n\nAI: \n0\tFALSE\tresponse\tsend request\tprepare proposal\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n\nAI: \n0\tFALSE\tresponse\tcreate case\tarrange meeting\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n\nAI: \n0\tTRUE\tsuccession\tcheck-in flight\tmodify provided data\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2001, "output_tokens": 24, "total_costs": 0.010365, "answers": ["\n0\tTRUE\tsuccession\tperform check\tstop process\n0\tFALSE\tprecedence\tstop process\tsend submit email"], "original_id": "datacollection-348018817_rev1.txt-100"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Second, the supervisor rejects within 7 days, as a result the employee receives a notification through email that the request has been rejected.\n\nAI: \n0\tFALSE\tprecedence\tsupervisor rejects\treceives a notification\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Third, if it takes the supervisor more than 7 days to respond, an email is sent to the employee informing him/her that the approval is in progress and the part of the processes after a supervisor is asked for approval is repeated.\n\nAI: \n0\tFALSE\tprecedence\trespond\tsend email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n\nAI: \n0\tFALSE\tresponse\tapproval, rejection, change\tsend notification\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n\nAI: \n0\tFALSE\tresponse\teach of these activities\ttest proper system functionality\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After waiting an average of x days for the delivery, the staff should check again if all products are on store.\n\nAI: \n0\tFALSE\tresponse\twait for x days\tcheck again \n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n\nAI: \n0\tTRUE\tsuccession\tcheck-in flight\tmodify provided data\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n\nAI: \n0\tFALSE\tend\tship bicycle to the customer\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of an Office Supply Request starts when any employee of the organization submits an office supply request.\n\nAI: \n0\tFALSE\tinit\tsubmit office supply request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: First, the supervisor approves within 7 days, this will result in the deposit of the reimbursement directly to the employee's bank account.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2011, "output_tokens": 12, "total_costs": 0.010235000000000001, "answers": ["\n0\tFALSE\tprecedence\tapprove\tdeposit reimbursement"], "original_id": "datacollection-348018817_rev1.txt-101"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: First, the supervisor approves within 7 days, this will result in the deposit of the reimbursement directly to the employee's bank account.\n\nAI: \n0\tFALSE\tprecedence\tsupervisor approves\tdeposit of reimbursement\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Third, if it takes the supervisor more than 7 days to respond, an email is sent to the employee informing him/her that the approval is in progress and the part of the processes after a supervisor is asked for approval is repeated.\n\nAI: \n0\tFALSE\tprecedence\trespond\tsend email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the vacation.\n\nAI: \n0\tFALSE\tprecedence\tregister requirement\treceive request\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n\nAI: \n0\tFALSE\tresponse\tapprove claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete management procedures\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n\nAI: \n0\tFALSE\tresponse\tapproval, rejection, change\tsend notification\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n\nAI: \n0\tTRUE\tsuccession\treject claim\tpay claim\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n\nAI: \n0\tFALSE\tend\treject request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n\nAI: \n0\tFALSE\tinit\tsubmit vacation request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Second, the supervisor rejects within 7 days, as a result the employee receives a notification through email that the request has been rejected.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2029, "output_tokens": 15, "total_costs": 0.010369999999999999, "answers": ["\n0\tFALSE\tprecedence\treject request\treceive notification through email"], "original_id": "datacollection-348018817_rev1.txt-102"}]}, {"meta": {"num_shots": 3, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nAI: \n0\tFALSE\tprecedence\tReceive offer\tfill in form\n0\tFALSE\tprecedence\tReceive offer\tsend to management\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, it will go to the purchase department that will be in charge of making quotations (using a subprocess) and select a vendor.\n\nAI: \n0\tFALSE\tprecedence\tapprove request\tgo to purchase department\n0\tFALSE\tprecedence\tgo to purchase department\tmake quotations / select vendor\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: First, the supervisor approves within 7 days, this will result in the deposit of the reimbursement directly to the employee's bank account.\n\nAI: \n0\tFALSE\tprecedence\tsupervisor approves\tdeposit of reimbursement\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After waiting an average of x days for the delivery, the staff should check again if all products are on store.\n\nAI: \n0\tFALSE\tresponse\twait for x days\tcheck again \n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n\nAI: \n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n\nAI: \n0\tFALSE\tresponse\tReceive amount request\tRequest approval\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\nAI: \n0\tTRUE\tsuccession\tcheck take place\tstop process\n0\tTRUE\tsuccession\tcheck take place\tSend submit email\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n\nAI: \n0\tFALSE\tsuccession\tReceive expense report\tPerform check\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n\nAI: \n0\tFALSE\tsuccession\tenter metadata\tinform\n0\tFALSE\tsuccession\tinform\tsubmit case\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n\nAI: \n0\tFALSE\tprecedence\tDeny request\tinform employee via email\n0\tFALSE\tend\tinform employee via email\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n\nAI: \n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tTRUE\tend\tdeny request\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n\nAI: \n0\tFALSE\tend\ttake care of invoice\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n\nAI: \n0\tFALSE\tinit\tReceive order\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n\nAI: \n0\tFALSE\tinit\tFile expense\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n\nAI: \n0\tFALSE\tinit\tReceive request for new hardware\t\n\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Third, if it takes the supervisor more than 7 days to respond, an email is sent to the employee informing him/her that the approval is in progress and the part of the processes after a supervisor is asked for approval is repeated.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 2085, "output_tokens": 18, "total_costs": 0.010695, "answers": ["\n0\tFALSE\tresponse\trespond in more than 7 days\tsend email to employee\n"], "original_id": "datacollection-348018817_rev1.txt-103"}]}]