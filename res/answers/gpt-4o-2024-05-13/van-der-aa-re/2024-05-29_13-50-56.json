[{"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be created, before it can be approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1111, "output_tokens": 27, "total_costs": 0.00596, "answers": ["** Sentence 0 **\n\nActions:\ncreate claim\napprove claim\n\nConstraints:\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1110, "output_tokens": 25, "total_costs": 0.005925000000000001, "answers": ["** Sentence 0 **\n\nActions:\ncreate claim\napprove claim\n\nConstraints:\n0\tFALSE\tresponse\tcreate claim\tapprove claim"], "original_id": "datacollection-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1110, "output_tokens": 27, "total_costs": 0.005955, "answers": ["** Sentence 0 **\n\nActions:\ncreate claim\napprove claim\n\nConstraints:\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1110, "output_tokens": 27, "total_costs": 0.005955, "answers": ["** Sentence 0 **\n\nActions:\ncreate claim\napprove claim\n\nConstraints:\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: They have to create the claim, before they can approve it.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1112, "output_tokens": 27, "total_costs": 0.005965000000000001, "answers": ["** Sentence 0 **\n\nActions:\ncreate claim\napprove it\n\nConstraints:\n0\tFALSE\tsuccession\tcreate claim\tapprove it"], "original_id": "datacollection-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after a claim is created, it is possible to approve the claim.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1114, "output_tokens": 27, "total_costs": 0.005975, "answers": ["** Sentence 0 **\n\nActions:\ncreate claim\napprove claim\n\nConstraints:\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is approved, then it must have been created first.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1113, "output_tokens": 25, "total_costs": 0.00594, "answers": ["** Sentence 0 **\n\nActions:\napprove claim\ncreate claim\n\nConstraints:\n0\tFALSE\tresponse\tapprove claim\tcreate claim"], "original_id": "datacollection-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: To approve a claim, it should be created first.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1110, "output_tokens": 27, "total_costs": 0.005955, "answers": ["** Sentence 0 **\n\nActions:\napprove claim\ncreate claim\n\nConstraints:\n0\tFALSE\tsuccession\tcreate claim\tapprove claim"], "original_id": "datacollection-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim can be approved, after it has been created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1111, "output_tokens": 27, "total_costs": 0.00596, "answers": ["** Sentence 0 **\n\nActions:\napprove claim\ncreate claim\n\nConstraints:\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Approving the claim can happen at anytime, unless it still needs to be created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1116, "output_tokens": 27, "total_costs": 0.005985000000000001, "answers": ["** Sentence 0 **\n\nActions:\napprove claim\ncreate claim\n\nConstraints:\n0\tTRUE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1112, "output_tokens": 25, "total_costs": 0.005935000000000001, "answers": ["** Sentence 0 **\n\nActions:\ncreate claim\napprove claim\n\nConstraints:\n0\tFALSE\tresponse\tcreate claim\tapprove claim"], "original_id": "datacollection-1-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The creation of the claim is a condition for the approval of the claim.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1114, "output_tokens": 27, "total_costs": 0.005975, "answers": ["** Sentence 0 **\n\nActions:\ncreate claim\napprove claim\n\nConstraints:\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after the creation of a claim, the approval of the claim is possible.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1115, "output_tokens": 27, "total_costs": 0.00598, "answers": ["** Sentence 0 **\n\nActions:\ncreate claim\napprove claim\n\nConstraints:\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-12"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When approval of the claim occurs, creation of the claim must have preceded.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1114, "output_tokens": 25, "total_costs": 0.005945000000000001, "answers": ["** Sentence 0 **\n\nActions:\napprove claim\ncreate claim\n\nConstraints:\n0\tFALSE\tresponse\tapprove claim\tcreate claim"], "original_id": "datacollection-1-13"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If approval of the claim occurs, then creation of the claim must have been carried out first.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1118, "output_tokens": 25, "total_costs": 0.005965000000000001, "answers": ["** Sentence 0 **\n\nActions:\napprove claim\ncreate claim\n\nConstraints:\n0\tFALSE\tresponse\tapprove claim\tcreate claim"], "original_id": "datacollection-1-14"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim requires that the creation of the claim occurs before it.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1115, "output_tokens": 27, "total_costs": 0.00598, "answers": ["** Sentence 0 **\n\nActions:\napprove claim\ncreate claim\n\nConstraints:\n0\tFALSE\tsuccession\tcreate claim\tapprove claim"], "original_id": "datacollection-1-15"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim should be preceded by the creation of the claim.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1114, "output_tokens": 27, "total_costs": 0.005975, "answers": ["** Sentence 0 **\n\nActions:\napprove claim\ncreate claim\n\nConstraints:\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection-1-16"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it can be approved or rejected.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1113, "output_tokens": 42, "total_costs": 0.006195, "answers": ["** Sentence 0 **\n\nActions:\ncreate claim\napprove claim\nreject claim\n\nConstraints:\n0\tFALSE\tsuccession\tcreate claim\tapprove claim\n0\tFALSE\tsuccession\tcreate claim\treject claim"], "original_id": "datacollection-1-17"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be approved before it can be paid out.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1111, "output_tokens": 30, "total_costs": 0.006005, "answers": ["** Sentence 0 **\n\nActions:\napprove claim\npay out claim\n\nConstraints:\n0\tFALSE\tprecedence\tapprove claim\tpay out claim"], "original_id": "datacollection-1-18"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1113, "output_tokens": 30, "total_costs": 0.0060149999999999995, "answers": ["** Sentence 0 **\n\nActions:\napprove claim\npay out claim\n\nConstraints:\n0\tFALSE\tsuccession\tapprove claim\tpay out claim"], "original_id": "datacollection-1-19"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1113, "output_tokens": 28, "total_costs": 0.005985, "answers": ["** Sentence 0 **\n\nActions:\nreject claim\npay out claim\n\nConstraints:\n0\tTRUE\tresponse\treject claim\tpay out claim"], "original_id": "datacollection-1-20"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1110, "output_tokens": 32, "total_costs": 0.006030000000000001, "answers": ["** Sentence 0 **\n\nActions:\nend process\nexclude everything\n\nConstraints:\n0\tFALSE\tend\tend process\n0\tFALSE\tresponse\tend process\texclude everything"], "original_id": "datacollection-1-21"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A case can be closed manually at any time, unless we still need to pay out the claim.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1119, "output_tokens": 31, "total_costs": 0.00606, "answers": ["** Sentence 0 **\n\nActions:\nclose case manually\npay out claim\n\nConstraints:\n0\tTRUE\tprecedence\tclose case manually\tpay out claim"], "original_id": "datacollection-1-22"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case can be managed at the union after it has been created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1113, "output_tokens": 27, "total_costs": 0.00597, "answers": ["** Sentence 0 **\n\nActions:\nmanage case\ncreate case\n\nConstraints:\n0\tFALSE\tprecedence\tcreate case\tmanage case"], "original_id": "datacollection-2-23"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1123, "output_tokens": 28, "total_costs": 0.006035, "answers": ["** Sentence 0 **\n\nActions:\ncreate case\narrange meeting\n\nConstraints:\n0\tFALSE\tsuccession\tcreate case\tarrange meeting"], "original_id": "datacollection-2-24"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1109, "output_tokens": 29, "total_costs": 0.00598, "answers": ["** Sentence 0 **\n\nActions:\narrange meeting\nhold meeting\n\nConstraints:\n0\tFALSE\tsuccession\tarrange meeting\thold meeting"], "original_id": "datacollection-2-25"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1126, "output_tokens": 43, "total_costs": 0.006274999999999999, "answers": ["** Sentence 0 **\n\nActions:\nenter metadata\ninform availability\nsubmit case\n\nConstraints:\n0\tFALSE\tsuccession\tenter metadata\tinform availability\n0\tFALSE\tsuccession\tinform availability\tsubmit case"], "original_id": "datacollection-2-26"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted it may get a local id at the union, but it should also subsequently be assigned a case id in LO.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1127, "output_tokens": 46, "total_costs": 0.006325, "answers": ["** Sentence 0 **\n\nActions:\nsubmit case\nget local id\nassign case id\n\nConstraints:\n0\tFALSE\tprecedence\tsubmit case\tget local id\n0\tFALSE\tsuccession\tsubmit case\tassign case id"], "original_id": "datacollection-2-27"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1111, "output_tokens": 27, "total_costs": 0.00596, "answers": ["** Sentence 0 **\n\nActions:\nsubmit case\npropose dates\n\nConstraints:\n0\tFALSE\tresponse\tsubmit case\tpropose dates"], "original_id": "datacollection-2-28"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after LO has assigned its case id it is possible to manage the case and for LO to propose dates.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1121, "output_tokens": 46, "total_costs": 0.006294999999999999, "answers": ["** Sentence 0 **\n\nActions:\nassign case id\nmanage case\npropose dates\n\nConstraints:\n0\tFALSE\tprecedence\tassign case id\tmanage case\n0\tFALSE\tprecedence\tassign case id\tpropose dates"], "original_id": "datacollection-2-29"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a date has been agreed upon a meeting should eventually be held.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1113, "output_tokens": 26, "total_costs": 0.005954999999999999, "answers": ["** Sentence 0 **\n\nActions:\nagree date\nhold meeting\n\nConstraints:\n0\tFALSE\tresponse\tagree date\thold meeting"], "original_id": "datacollection-2-30"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1108, "output_tokens": 21, "total_costs": 0.005855000000000001, "answers": ["** Sentence 0 **\n\nActions:\nexamine patient\n\nConstraints:\n0\tFALSE\tinit\texamine patient"], "original_id": "datacollection-6-31"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an x-ray is taken, then the x-ray risk must be checked before it\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1117, "output_tokens": 31, "total_costs": 0.00605, "answers": ["** Sentence 0 **\n\nActions:\ntake x-ray\ncheck x-ray risk\n\nConstraints:\n0\tFALSE\tresponse\ttake x-ray\tcheck x-ray risk"], "original_id": "datacollection-6-32"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Performing a reposition, applying a cast and performing surgery require that x-rays are performed before.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1117, "output_tokens": 58, "total_costs": 0.006455, "answers": ["** Sentence 0 **\n\nActions:\nperform reposition\napply cast\nperform surgery\nperform x-rays\n\nConstraints:\n0\tFALSE\tresponse\tperform x-rays\tperform reposition\n0\tFALSE\tresponse\tperform x-rays\tapply cast\n0\tFALSE\tresponse\tperform x-rays\tperform surgery"], "original_id": "datacollection-6-33"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1114, "output_tokens": 30, "total_costs": 0.00602, "answers": ["** Sentence 0 **\n\nActions:\nperform surgery\nprescribe rehabilitation\n\nConstraints:\n0\tFALSE\tsuccession\tperform surgery\tprescribe rehabilitation"], "original_id": "datacollection-6-34"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1127, "output_tokens": 49, "total_costs": 0.006370000000000001, "answers": ["** Sentence 0 **\n\nActions:\napply cast\nremove cast\n\nConstraints:\n0\tFALSE\tsuccession\tapply cast\tremove cast\n0\tFALSE\tsuccession\tremove cast\tapply cast\n0\tFALSE\tresponse\tapply cast\tremove cast"], "original_id": "datacollection-6-35"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process begins with the booking of the ticket\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1109, "output_tokens": 19, "total_costs": 0.00583, "answers": ["** Sentence 0 **\n\nActions:\nbook ticket\n\nConstraints:\n0\tFALSE\tinit\tbook ticket"], "original_id": "datacollection-3-36"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Personal information of passengers can be provided after the booking of the ticket\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1113, "output_tokens": 27, "total_costs": 0.00597, "answers": ["** Sentence 0 **\n\nActions:\nprovide information\nbook ticket\n\nConstraints:\n0\tFALSE\tprecedence\tbook ticket\tprovide information"], "original_id": "datacollection-3-37"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1112, "output_tokens": 28, "total_costs": 0.005980000000000001, "answers": ["** Sentence 0 **\n\nActions:\npay ticket\ncomplete booking phase\n\nConstraints:\n0\tFALSE\tresponse\tpay ticket\tcomplete booking phase"], "original_id": "datacollection-3-38"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket is eventually followed by the actual transfer of money\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1114, "output_tokens": 28, "total_costs": 0.0059900000000000005, "answers": ["** Sentence 0 **\n\nActions:\npay ticket\ntransfer money\n\nConstraints:\n0\tFALSE\tsuccession\tpay ticket\ttransfer money"], "original_id": "datacollection-3-39"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1124, "output_tokens": 29, "total_costs": 0.0060550000000000005, "answers": ["** Sentence 0 **\n\nActions:\ncheck-in flight\nmodify data\n\nConstraints:\n0\tTRUE\tprecedence\tcheck-in flight\tmodify data"], "original_id": "datacollection-3-40"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After check-in of the flight, only the cancellation is admitted\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1112, "output_tokens": 30, "total_costs": 0.006010000000000001, "answers": ["** Sentence 0 **\n\nActions:\ncheck-in flight\nadmit cancellation\n\nConstraints:\n0\tFALSE\tprecedence\tcheck-in flight\tadmit cancellation"], "original_id": "datacollection-3-41"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1112, "output_tokens": 20, "total_costs": 0.005860000000000001, "answers": ["** Sentence 0 **\n\nActions:\nreceive invoice\n\nConstraints:\n0\tFALSE\tinit\treceive invoice"], "original_id": "datacollection-1-42"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If they decide that the invoice appears legit then they enter all relevant data into the system\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1117, "output_tokens": 29, "total_costs": 0.006019999999999999, "answers": ["** Sentence 0 **\n\nActions:\ndecide invoice\nenter data\n\nConstraints:\n0\tFALSE\tprecedence\tdecide invoice\tenter data"], "original_id": "datacollection-1-43"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When all necessary approvals have been received the invoice can be paid.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1112, "output_tokens": 28, "total_costs": 0.005980000000000001, "answers": ["** Sentence 0 **\n\nActions:\nreceive approvals\npay invoice\n\nConstraints:\n0\tFALSE\tprecedence\treceive approvals\tpay invoice"], "original_id": "datacollection-1-44"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1111, "output_tokens": 29, "total_costs": 0.00599, "answers": ["** Sentence 0 **\n\nActions:\nconfirm payment\nclose invoice case\n\nConstraints:\n0\tFALSE\tsuccession\tconfirm payment\tclose invoice case"], "original_id": "datacollection-1-45"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The receipt of an invoice is required before the administration department can enter data or scan the invoice.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1118, "output_tokens": 43, "total_costs": 0.006235, "answers": ["** Sentence 0 **\n\nActions:\nreceive invoice\nenter data\nscan invoice\n\nConstraints:\n0\tFALSE\tprecedence\treceive invoice\tenter data\n0\tFALSE\tprecedence\treceive invoice\tscan invoice"], "original_id": "datacollection-1-46"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Enter data is required before any approval can be given.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1110, "output_tokens": 27, "total_costs": 0.005955, "answers": ["** Sentence 0 **\n\nActions:\nenter data\ngive approval\n\nConstraints:\n0\tFALSE\tprecedence\tenter data\tgive approval"], "original_id": "datacollection-1-47"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Finally, we have to pay the invoice before we can confirm payment.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1113, "output_tokens": 28, "total_costs": 0.005985, "answers": ["** Sentence 0 **\n\nActions:\npay invoice\nconfirm payment\n\nConstraints:\n0\tFALSE\tsuccession\tpay invoice\tconfirm payment"], "original_id": "datacollection-1-48"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a request is sent, then a proposal is expected to be prepared afterwards\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1115, "output_tokens": 25, "total_costs": 0.00595, "answers": ["** Sentence 0 **\n\nActions:\nsend request\nprepare proposal\n\nConstraints:\n0\tFALSE\tresponse\tsend request\tprepare proposal"], "original_id": "datacollection-4-49"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1127, "output_tokens": 29, "total_costs": 0.00607, "answers": ["** Sentence 0 **\n\nActions:\ngive confirmation\npropose proposal\n\nConstraints:\n0\tFALSE\tsuccession\tpropose proposal\tgive confirmation"], "original_id": "datacollection-4-50"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance has to start by registering client data\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1110, "output_tokens": 21, "total_costs": 0.005865, "answers": ["** Sentence 0 **\n\nActions:\nregister client data\n\nConstraints:\n0\tFALSE\tinit\tregister client data"], "original_id": "datacollection-5-51"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every provided room service must be billed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1107, "output_tokens": 30, "total_costs": 0.005985, "answers": ["** Sentence 0 **\n\nActions:\nprovide room service\nbill room service\n\nConstraints:\n0\tFALSE\tresponse\tprovide room service\tbill room service"], "original_id": "datacollection-5-52"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every provided laundry service must be billed\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1107, "output_tokens": 30, "total_costs": 0.005985, "answers": ["** Sentence 0 **\n\nActions:\nprovide laundry service\nbill laundry service\n\nConstraints:\n0\tFALSE\tresponse\tprovide laundry service\tbill laundry service"], "original_id": "datacollection-5-53"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When the client leaves, the bill must be charged\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1110, "output_tokens": 26, "total_costs": 0.00594, "answers": ["** Sentence 0 **\n\nActions:\nleave client\ncharge bill\n\nConstraints:\n0\tFALSE\tresponse\tleave client\tcharge bill"], "original_id": "datacollection-5-54"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The Police Report related to the car accident is searched within the Police Report database and put in a file together with the Claim Documentation.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1125, "output_tokens": 34, "total_costs": 0.006135, "answers": ["** Sentence 0 **\n\nActions:\nsearch Police Report\nput Police Report in file\n\nConstraints:\n0\tFALSE\tsuccession\tsearch Police Report\tput Police Report in file"], "original_id": "datacollection-claimscreation.txt-55"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A customer brings in a defective computer and the manager analyzes the defect and gives back an invoice.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1118, "output_tokens": 42, "total_costs": 0.006220000000000001, "answers": ["** Sentence 0 **\n\nActions:\nbring in computer\nanalyze defect\ngive back invoice\n\nConstraints:\n0\tFALSE\tinit\tbring in computer\n0\tFALSE\tresponse\tanalyze defect\tgive back invoice"], "original_id": "datacollection-Model1-2.txt-56"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1112, "output_tokens": 17, "total_costs": 0.005815000000000001, "answers": ["** Sentence 0 **\n\nActions:\ntest functionality\n\nConstraints:\nNo constraints found."], "original_id": "datacollection-Model1-2.txt-57"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an error is detected, another arbitrary repair activity is executed, otherwise the repair is finished.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1118, "output_tokens": 46, "total_costs": 0.00628, "answers": ["** Sentence 0 **\n\nActions:\ndetect error\nexecute repair activity\nfinish repair\n\nConstraints:\n0\tFALSE\tprecedence\tdetect error\texecute repair activity\n0\tFALSE\tprecedence\tdetect error\tfinish repair"], "original_id": "datacollection-Model1-2.txt-58"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a claim is registered, it is examined by a claims officer.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1113, "output_tokens": 28, "total_costs": 0.005985, "answers": ["** Sentence 0 **\n\nActions:\nregister claim\nexamine claim\n\nConstraints:\n0\tFALSE\tprecedence\tregister claim\texamine claim"], "original_id": "datacollection-Model3-3.txt-59"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This recommendation is then checked by a senior claims officer who may mark the claim as OK or Not OK.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1120, "output_tokens": 27, "total_costs": 0.006005000000000001, "answers": ["** Sentence 0 **\n\nActions:\ncheck recommendation\nmark claim\n\nConstraints:\n0\tFALSE\tprecedence\tcheck recommendation\tmark claim"], "original_id": "datacollection-Model3-3.txt-60"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is marked as Not OK, it is sent back to the claims officer and the recommendation is repeated.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1122, "output_tokens": 39, "total_costs": 0.006195000000000001, "answers": ["** Sentence 0 **\n\nActions:\nmark claim\nsend claim\nrepeat recommendation\n\nConstraints:\n0\tFALSE\tresponse\tmark claim\tsend claim\n0\tFALSE\tresponse\tmark claim\trepeat recommendation"], "original_id": "datacollection-Model3-3.txt-61"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is OK, the claim handling process proceeds.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1111, "output_tokens": 33, "total_costs": 0.00605, "answers": ["** Sentence 0 **\n\nActions:\nclaim OK\nproceed claim handling process\n\nConstraints:\n0\tFALSE\tprecedence\tclaim OK\tproceed claim handling process"], "original_id": "datacollection-Model3-3.txt-62"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1122, "output_tokens": 36, "total_costs": 0.00615, "answers": ["** Sentence 0 **\n\nActions:\nbuy hardware\nreceive request\n\nConstraints:\n0\tFALSE\tinit\tbuy hardware\n0\tFALSE\tprecedence\treceive request\tbuy hardware"], "original_id": "datacollection-472026493_rev3.txt-63"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The next step is for the IT department to analyse the request and either approve or deny it.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1118, "output_tokens": 19, "total_costs": 0.005875, "answers": ["** Sentence 0 **\n\nActions:\nanalyse request\napprove request\ndeny request\n\nConstraints:\n"], "original_id": "datacollection-472026493_rev3.txt-64"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1119, "output_tokens": 37, "total_costs": 0.00615, "answers": ["** Sentence 0 **\n\nActions:\ndeny it\ninform employee\nend process\n\nConstraints:\n0\tFALSE\tresponse\tdeny it\tinform employee\n0\tFALSE\tend\tinform employee"], "original_id": "datacollection-472026493_rev3.txt-65"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: However, if the request is approved it is edited and completed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1112, "output_tokens": 55, "total_costs": 0.006385000000000001, "answers": ["** Sentence 0 **\n\nActions:\napprove request\nedit request\ncomplete request\n\nConstraints:\n0\tFALSE\tprecedence\tapprove request\tedit request\n0\tFALSE\tprecedence\tapprove request\tcomplete request\n0\tFALSE\tsuccession\tedit request\tcomplete request"], "original_id": "datacollection-472026493_rev3.txt-66"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1116, "output_tokens": 56, "total_costs": 0.00642, "answers": ["** Sentence 0 **\n\nActions:\nreceive offer\nfill in form\nsend form\n\nConstraints:\n0\tFALSE\tprecedence\treceive offer\tfill in form\n0\tFALSE\tprecedence\treceive offer\tsend form\n0\tFALSE\tsuccession\tfill in form\tsend form"], "original_id": "datacollection-472026493_rev3.txt-67"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The management then analyses the request and decides if it is approved or not.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1114, "output_tokens": 21, "total_costs": 0.0058850000000000005, "answers": ["** Sentence 0 **\n\nActions:\nanalyse request\ndecide approval\n\nConstraints:\nNo constraints found."], "original_id": "datacollection-472026493_rev3.txt-68"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When this is accepted and the financial resources are found, the hardware is received by the IT department.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1119, "output_tokens": 41, "total_costs": 0.00621, "answers": ["** Sentence 0 **\n\nActions:\naccept this\nfind financial resources\nreceive hardware\n\nConstraints:\n0\tFALSE\tresponse\taccept this\treceive hardware\n0\tFALSE\tresponse\tfind financial resources\treceive hardware"], "original_id": "datacollection-472026493_rev3.txt-69"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1116, "output_tokens": 23, "total_costs": 0.005925000000000001, "answers": ["** Sentence 0 **\n\nActions:\ntake care invoice\nend process\n\nConstraints:\n0\tFALSE\tend\tend process"], "original_id": "datacollection-472026493_rev3.txt-70"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the scenario where the management does not approve the request, it can send the request back to the IT department for rework, then the IT department has to go back to editing and completing a request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1140, "output_tokens": 54, "total_costs": 0.006509999999999999, "answers": ["** Sentence 0 **\n\nActions:\napprove request\nsend request\nedit request\ncomplete request\n\nConstraints:\n0\tTRUE\tprecedence\tapprove request\tsend request\n0\tFALSE\tresponse\tsend request\tedit request\n0\tFALSE\tsuccession\tedit request\tcomplete request"], "original_id": "datacollection-472026493_rev3.txt-71"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1123, "output_tokens": 43, "total_costs": 0.00626, "answers": ["** Sentence 0 **\n\nActions:\napprove request\ndeny request\nend process\n\nConstraints:\n0\tTRUE\tprecedence\tapprove request\tdeny request\n0\tFALSE\tsuccession\tdeny request\tend process"], "original_id": "datacollection-472026493_rev3.txt-72"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The loan approval process starts by receiving a customer request for a loan amount.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1114, "output_tokens": 20, "total_costs": 0.00587, "answers": ["** Sentence 0 **\n\nActions:\nreceive request\n\nConstraints:\n0\tFALSE\tinit\treceive request"], "original_id": "datacollection-Model5-1.txt-73"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer needs further review or the loan amount is for \\$10,000 or more, the request is sent to the approver Web service.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1129, "output_tokens": 27, "total_costs": 0.00605, "answers": ["** Sentence 0 **\n\nActions:\nneed further review\nsend request\n\nConstraints:\n0\tFALSE\tresponse\tneed further review\tsend request"], "original_id": "datacollection-Model5-1.txt-74"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of an Office Supply Request starts when any employee of the organization submits an office supply request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1119, "output_tokens": 24, "total_costs": 0.005955, "answers": ["** Sentence 0 **\n\nActions:\nsubmit office supply request\n\nConstraints:\n0\tFALSE\tinit\tsubmit office supply request"], "original_id": "datacollection-Model5-3.txt-75"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the office supplies.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1121, "output_tokens": 27, "total_costs": 0.00601, "answers": ["** Sentence 0 **\n\nActions:\nregister requirement\nreceive request\n\nConstraints:\n0\tFALSE\tprecedence\tregister requirement\treceive request"], "original_id": "datacollection-Model5-3.txt-76"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1110, "output_tokens": 25, "total_costs": 0.005925000000000001, "answers": ["** Sentence 0 **\n\nActions:\nreject request\nend process\n\nConstraints:\n0\tFALSE\tresponse\treject request\tend process"], "original_id": "datacollection-Model5-3.txt-77"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is asked to make a change, then it is returned to the petitioner who can review the comments for the change request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1126, "output_tokens": 42, "total_costs": 0.00626, "answers": ["** Sentence 0 **\n\nActions:\nask request\nreturn request\nreview comments\n\nConstraints:\n0\tFALSE\tprecedence\task request\treturn request\n0\tFALSE\tprecedence\treturn request\treview comments"], "original_id": "datacollection-Model5-3.txt-78"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, it will go to the purchase department that will be in charge of making quotations (using a subprocess) and select a vendor.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1130, "output_tokens": 55, "total_costs": 0.006475, "answers": ["** Sentence 0 **\n\nActions:\napprove request\ngo purchase department\nmake quotations\nselect vendor\n\nConstraints:\n0\tFALSE\tprecedence\tapprove request\tgo purchase department\n0\tFALSE\tresponse\tgo purchase department\tmake quotations\n0\tFALSE\tresponse\tgo purchase department\tselect vendor"], "original_id": "datacollection-Model5-3.txt-79"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a vendor is selected and confirmed, the system will generate and send a purchase order and wait for the product to be delivered and the invoice received.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1129, "output_tokens": 122, "total_costs": 0.007475, "answers": ["** Sentence 0 **\n\nActions:\nselect vendor\nconfirm vendor\ngenerate purchase order\nsend purchase order\nwait product to be delivered\nwait invoice received\n\nConstraints:\n0\tFALSE\tprecedence\tselect vendor\tconfirm vendor\n0\tFALSE\tprecedence\tconfirm vendor\tgenerate purchase order\n0\tFALSE\tprecedence\tconfirm vendor\tsend purchase order\n0\tFALSE\tresponse\tgenerate purchase order\twait product to be delivered\n0\tFALSE\tresponse\tgenerate purchase order\twait invoice received\n0\tFALSE\tresponse\tsend purchase order\twait product to be delivered\n0\tFALSE\tresponse\tsend purchase order\twait invoice received"], "original_id": "datacollection-Model5-3.txt-80"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1120, "output_tokens": 50, "total_costs": 0.006350000000000001, "answers": ["** Sentence 0 **\n\nActions:\napprove case\nreject case\nchange case\nsend notification\n\nConstraints:\n0\tFALSE\tresponse\tapprove case\tsend notification\n0\tFALSE\tresponse\treject case\tsend notification\n0\tFALSE\tresponse\tchange case\tsend notification"], "original_id": "datacollection-Model5-3.txt-81"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1113, "output_tokens": 22, "total_costs": 0.005894999999999999, "answers": ["** Sentence 0 **\n\nActions:\nsubmit vacation request\n\nConstraints:\n0\tFALSE\tinit\tsubmit vacation request"], "original_id": "datacollection-Model5-2.txt-82"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the vacation.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1120, "output_tokens": 27, "total_costs": 0.006005000000000001, "answers": ["** Sentence 0 **\n\nActions:\nregister requirement\nreceive request\n\nConstraints:\n0\tFALSE\tprecedence\tregister requirement\treceive request"], "original_id": "datacollection-Model5-2.txt-83"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the application is returned to the applicant/employee who can review the rejection reasons.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1121, "output_tokens": 44, "total_costs": 0.006265, "answers": ["** Sentence 0 **\n\nActions:\nreject request\nreturn application\nreview rejection reasons\n\nConstraints:\n0\tFALSE\tprecedence\treject request\treturn application\n0\tFALSE\tprecedence\treturn application\treview rejection reasons"], "original_id": "datacollection-Model5-2.txt-84"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1123, "output_tokens": 42, "total_costs": 0.0062450000000000006, "answers": ["** Sentence 0 **\n\nActions:\napprove request\ngenerate notification\ncomplete procedures\n\nConstraints:\n0\tFALSE\tprecedence\tapprove request\tgenerate notification\n0\tFALSE\tresponse\tgenerate notification\tcomplete procedures"], "original_id": "datacollection-Model5-2.txt-85"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1107, "output_tokens": 20, "total_costs": 0.005835, "answers": ["** Sentence 0 **\n\nActions:\nreview order\n\nConstraints:\n0\tFALSE\tinit\treview order"], "original_id": "datacollection-784358570_rev2.txt-86"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1120, "output_tokens": 25, "total_costs": 0.005975000000000001, "answers": ["** Sentence 0 **\n\nActions:\ninform customer\norder products\n\nConstraints:\n0\tFALSE\tresponse\tinform customer\torder products"], "original_id": "datacollection-784358570_rev2.txt-87"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After waiting an average of x days for the delivery, the staff should check again if all products are on store.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1122, "output_tokens": 26, "total_costs": 0.006, "answers": ["** Sentence 0 **\n\nActions:\nwait delivery\ncheck products\n\nConstraints:\n0\tFALSE\tprecedence\twait delivery\tcheck products"], "original_id": "datacollection-784358570_rev2.txt-88"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The courier company informs the client about a potential delay until there are enough human resources to process the delivery.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1120, "output_tokens": 27, "total_costs": 0.006005000000000001, "answers": ["** Sentence 0 **\n\nActions:\ninform client\nprocess delivery\n\nConstraints:\n0\tFALSE\tprecedence\tinform client\tprocess delivery"], "original_id": "datacollection-784358570_rev2.txt-89"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the driver delivers the package, she should update the system so all stakeholders are notified.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1117, "output_tokens": 40, "total_costs": 0.0061849999999999995, "answers": ["** Sentence 0 **\n\nActions:\ndeliver package\nupdate system\nnotify stakeholders\n\nConstraints:\n0\tFALSE\tprecedence\tdeliver package\tupdate system\n0\tFALSE\tresponse\tupdate system\tnotify stakeholders"], "original_id": "datacollection-784358570_rev2.txt-90"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1114, "output_tokens": 27, "total_costs": 0.005975, "answers": ["** Sentence 0 **\n\nActions:\nreceive order\ncreate process instance\n\nConstraints:\n0\tFALSE\tresponse\treceive order\tcreate process instance"], "original_id": "datacollection-BicycleManufacturing.txt-91"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1131, "output_tokens": 63, "total_costs": 0.0066, "answers": ["** Sentence 0 **\n\nActions:\nreserve item\nback-order item\nfinish preparation activity\nassemble bicycle\n\nConstraints:\n0\tFALSE\tprecedence\treserve item\tassemble bicycle\n0\tFALSE\tprecedence\tback-order item\tassemble bicycle\n0\tFALSE\tprecedence\tfinish preparation activity\tassemble bicycle"], "original_id": "datacollection-BicycleManufacturing.txt-92"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1116, "output_tokens": 39, "total_costs": 0.006165, "answers": ["** Sentence 0 **\n\nActions:\nship bicycle\nfinish process instance\n\nConstraints:\n0\tFALSE\tprecedence\tship bicycle\tfinish process instance\n0\tFALSE\tend\tfinish process instance"], "original_id": "datacollection-BicycleManufacturing.txt-93"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1121, "output_tokens": 26, "total_costs": 0.0059949999999999995, "answers": ["** Sentence 0 **\n\nActions:\nassess risk\n\nConstraints:\n0\tFALSE\tprecedence\trequest amount\tassess risk"], "original_id": "datacollection-20818304_rev1.txt-94"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After the approval request, the credit could be accepted or rejected\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1112, "output_tokens": 44, "total_costs": 0.006220000000000001, "answers": ["** Sentence 0 **\n\nActions:\napprove request\naccept credit\nreject credit\n\nConstraints:\n0\tFALSE\tprecedence\tapprove request\taccept credit\n0\tFALSE\tprecedence\tapprove request\treject credit"], "original_id": "datacollection-20818304_rev1.txt-95"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1116, "output_tokens": 21, "total_costs": 0.005895000000000001, "answers": ["** Sentence 0 **\n\nActions:\nrequest approval\n\nConstraints:\n0\tFALSE\tresponse\trequest amount\trequest approval"], "original_id": "datacollection-20818304_rev1.txt-96"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1121, "output_tokens": 26, "total_costs": 0.0059949999999999995, "answers": ["** Sentence 0 **\n\nActions:\nassess risk\n\nConstraints:\n0\tFALSE\tprecedence\trequest amount\tassess risk"], "original_id": "datacollection-20818304_rev1.txt-97"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1114, "output_tokens": 21, "total_costs": 0.0058850000000000005, "answers": ["** Sentence 0 **\n\nActions:\nfile expense report\n\nConstraints:\n0\tFALSE\tinit\tfile expense report"], "original_id": "datacollection-348018817_rev1.txt-98"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1119, "output_tokens": 44, "total_costs": 0.006255, "answers": ["** Sentence 0 **\n\nActions:\nreceive expense report\nperform check\nhave account\n\nConstraints:\n0\tFALSE\tprecedence\treceive expense report\tperform check\n0\tFALSE\tresponse\tperform check\thave account"], "original_id": "datacollection-348018817_rev1.txt-99"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1124, "output_tokens": 36, "total_costs": 0.0061600000000000005, "answers": ["** Sentence 0 **\n\nActions:\ncheck place\nstop process\nsend email\n\nConstraints:\n0\tTRUE\tresponse\tcheck place\tstop process\n0\tFALSE\tresponse\tcheck place\tsend email"], "original_id": "datacollection-348018817_rev1.txt-100"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: First, the supervisor approves within 7 days, this will result in the deposit of the reimbursement directly to the employee's bank account.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1126, "output_tokens": 34, "total_costs": 0.00614, "answers": ["** Sentence 0 **\n\nActions:\napprove within 7 days\ndeposit reimbursement\n\nConstraints:\n0\tFALSE\tsuccession\tapprove within 7 days\tdeposit reimbursement"], "original_id": "datacollection-348018817_rev1.txt-101"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Second, the supervisor rejects within 7 days, as a result the employee receives a notification through email that the request has been rejected.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1126, "output_tokens": 32, "total_costs": 0.00611, "answers": ["** Sentence 0 **\n\nActions:\nreject within 7 days\nreceive notification\n\nConstraints:\n0\tFALSE\tresponse\treject within 7 days\treceive notification"], "original_id": "datacollection-348018817_rev1.txt-102"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: # Task Description\n\nYou are an algorithm tasked with extracting declarative process models from natural language process descriptions.\nThe process descriptions consist of a series of actions, each described by a predicate and an object.\nYour goal is to identify constraints between these actions, which dictate the ordering and existence of actions within the process.\n\n# Type Definitions\n\n- ** ACTION **: predicate and object describing a task. Predicate is usually a transitive verb, and object is some physical or digital object on which is being acted on.\n\n- ** CONSTRAINT **: defines if and how actions can be executed. Always has a source / head action and sometimes a target / tail action, depending on the type. If a constraint has a head action, the tail action is restricted in a way defined by the type.\n\n## Constraint Types\n\n- ** init **: marks an action as the start of an entire process. This action is the source / head action of the init constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started for an init constraint to apply. Signal words alone are not sufficient here.\n\n- ** end **: marks an action as the end of the whole process. The action is the source / head action. There is no no target / tail action. Note that it must be explicitly stated that the PROCESS is ended for an end constraint to apply. Signal words alone are not sufficient here.\n\n- ** precedence **: if the head action is executed the tail action CAN be executed as well. Thus, the head action is a precondition for executing the tail action.\n\n- ** response **: if the head action was executed, the tail action has to be executed, too. Thus, executing the tail action is mandatory in this case.\n\n- ** succession **: combination of **precedence** and **response**. The tail action cannot be executed before the head action, but once the head action has been executed, it is mandatory to also execute the tail action.\n\n## Negation\n\nAdditionally, you may encounter negative constraints, indicated by statements like \"do not\" or \"must not.\" Negations invert the restriction of the tail activity. A negation is NOT a constraint type itself.\n\n# Disambiguation\n\nThe constraints precedence, response and succession are easy to confuse. To differentiate between Response and Precedence, carefully analyze whether the tail action CAN be performed\nbecause the head action has already been performed (Precedence), or whether the tail action MUST THEREFORE be performed (Response). If BOTH is true, it is a Succession constraint. Thus, modal verbs play an important role for disambiguating constraints.\nHowever, if you recognize an action in a sentence and there is no other action, it is NEVER a Precedence, Response or Succession constraint.\nThe following abstract examples illustrate the differences:\n\n- Example 1: If action A is performed, action B is carried out. (precedence)\n- Example 2: If action A is performed, action B must be carried out, before that. (response)\n- Example 3: action A is performed, action B can and must also be carried out. (succession)\n\n# Format\n\nPlease ensure the correct identification and formatting of constraints in the given text. Output one constraint per line, including whether the constraint is negated (TRUE or FALSE), the type of constraint, and the extracted head and tail actions separated by tabs. Stick closely to the provided examples and descriptions, and be careful to distinguish between precedence, response, and succession constraints.\n\nPrint one constraint per line prefixed with the sentence index (starting with 0), where you separate if the constraint is negative (TRUE if the document describes a negation, else it reads FALSE), the type of the constraint, and the extracted actions by tabs in the following form (<...> are placeholders):\n\n0\t<negative>\t<constraint type>\t<head action>\t<tail action>\n\n# Procedure\n\nLet's carry out your task in two steps.\n\n- Step 1: First, extract all actions contained in the input sentence and list them under the heading \"Actions:\" line by line (a description how you can identify actions is given in ACTION (Def.) above).\n\n- Step 2: Second, identify and extract constraints based on the constraint types above (see \"Constraint Types\"). To do this, only use the actions that you defined in Step 1, under the heading \"Actions:\".\n\n# Important Restriction\n\nRestriction 1: Make sure that for Step 1 you generate actions in the form of 'predicate object', which usually consists of a transitive verb and the corresponding object. It must be an actual task, described in the same sentence.\n\nRestriction 2: Sentences may contain up to three constraints, but some may contain no constraints at all!\n\nRestriction 3: You may use the context between sentences, but constraints are always only between actions of one sentence.\n\n# Example\n\nHere is an example for input and expected output:\n\n## Input:\n\nSentence 0: After signing the contract, the product can be advertised.\n\n## Output:\n\n** Sentence 0 **\n\nActions:\nsign contract\nadvertise product\n\nConstraints:\n1\tFALSE\tprecedence\tsign contract\tadvertise product\n\n# Notes\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Third, if it takes the supervisor more than 7 days to respond, an email is sent to the employee informing him/her that the approval is in progress and the part of the processes after a supervisor is asked for approval is repeated.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "van-der-aa/re/step-wise_tuning_CCoT_single.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 1146, "output_tokens": 55, "total_costs": 0.006555, "answers": ["** Sentence 0 **\n\nActions:\nrespond supervisor\nsend email\ninform employee\nask approval\nrepeat processes\n\nConstraints:\n0\tFALSE\tresponse\trespond supervisor\tsend email\n0\tFALSE\tresponse\tsend email\tinform employee\n0\tFALSE\tresponse\task approval\trepeat processes"], "original_id": "datacollection-348018817_rev1.txt-103"}]}]