[{"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A small company manufactures customized bicycles.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 848, "output_tokens": 30, "total_costs": 0.00469, "answers": ["ACTIONS:\n1. manufactures customized bicycles\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tmanufactures customized bicycles"], "original_id": "1-1_bicycle_manufacturing-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 45, "total_costs": 0.004955, "answers": ["Sentence 0: Whenever the sales department receives an order, a new process instance is created.\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\treceives an order\tcreated a new process instance"], "original_id": "1-1_bicycle_manufacturing-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A member of the sales department can then reject or accept the order for a customized bike.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 81, "total_costs": 0.00551, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- reject the order\n- accept the order\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\treject the order\taccept the order\n0\tFALSE\tprecedence\taccept the order\treject the order"], "original_id": "1-1_bicycle_manufacturing-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the former case, the process instance is finished.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 34, "total_costs": 0.00477, "answers": ["Sentence 0: In the former case, the process instance is finished.\n#-#-#RESULT#-#-#\n0\tFALSE\tend\tfinished process instance"], "original_id": "1-1_bicycle_manufacturing-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the latter case, the storehouse and the engineering department are informed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 49, "total_costs": 0.005015, "answers": ["Sentence 0: In the latter case, the storehouse and the engineering department are informed.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tinformed storehouse\t\n0\tFALSE\texistence\tinformed engineering department"], "original_id": "1-1_bicycle_manufacturing-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The storehouse immediately processes the part list of the order and checks the required quantity of each part.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 62, "total_costs": 0.005235, "answers": ["Sentence 0: The storehouse immediately processes the part list of the order and checks the required quantity of each part.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tprocesses the part list of the order\t\n0\tFALSE\texistence\tchecks the required quantity of each part"], "original_id": "1-1_bicycle_manufacturing-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the part is available in-house, it is reserved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 59, "total_costs": 0.00515, "answers": ["Sentence 0: If the part is available in-house, it is reserved.\n\nActions:\n1. is available (part)\n2. is reserved (part)\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tis available (part)\tis reserved (part)"], "original_id": "1-1_bicycle_manufacturing-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is not available, it is back-ordered.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 39, "total_costs": 0.00485, "answers": ["1. Actions:\n- is available\n- is back-ordered\n\n#-#-#RESULT#-#-#\n\n0\tTRUE\tnoncooccurrence\tis available\tis back-ordered"], "original_id": "1-1_bicycle_manufacturing-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This procedure is repeated for each item on the part list.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 29, "total_costs": 0.004699999999999999, "answers": ["1. Identified actions:\n- repeated procedure\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\trepeated procedure"], "original_id": "1-1_bicycle_manufacturing-1-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the meantime, the engineering department prepares everything for the assembling of the ordered bicycle.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 48, "total_costs": 0.0050100000000000006, "answers": ["Sentence 0: In the meantime, the engineering department prepares everything for the assembling of the ordered bicycle.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tprepares everything for the assembling of the ordered bicycle."], "original_id": "1-1_bicycle_manufacturing-1-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 873, "output_tokens": 94, "total_costs": 0.005775, "answers": ["Sentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tstorehouse has successfully reserved or back-ordered every item of the part list\tengineering department assembles the bicycle\n0\tFALSE\tprecedence\tpreparation activity has finished\tengineering department assembles the bicycle"], "original_id": "1-1_bicycle_manufacturing-1-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 55, "total_costs": 0.005115000000000001, "answers": ["1. Identified actions:\n- ships the bicycle\n- finishes the process instance\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tships the bicycle\tfinishes the process instance\n0\tFALSE\tend\tfinishes the process instance"], "original_id": "1-1_bicycle_manufacturing-1-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A customer brings in a defective computer and the CRS checks the defect and hands out a repair cost calculation back.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 102, "total_costs": 0.005845, "answers": ["1. Actions:\n- brings in a defective computer\n- checks the defect\n- hands out a repair cost calculation\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tbrings in a defective computer\t\n0\tFALSE\texistence\tchecks the defect\t\n0\tFALSE\texistence\thands out a repair cost calculation\t\n0\tFALSE\tprecedence\tbrings in a defective computer\tchecks the defect\n0\tFALSE\tprecedence\tchecks the defect\thands out a repair cost calculation"], "original_id": "1-2_computer_repair-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer decides that the costs are acceptable, the process continues, otherwise she takes her computer home unrepaired.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 67, "total_costs": 0.005325, "answers": ["1. Actions:\n- decides costs are acceptable\n- process continues\n- takes computer home unrepaired\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tdecides costs are acceptable\tprocess continues\n0\tTRUE\tnoncooccurrence\tdecides costs are acceptable\ttakes computer home unrepaired"], "original_id": "1-2_computer_repair-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The ongoing repair consists of two activities, which are executed, in an arbitrary order.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 39, "total_costs": 0.004875000000000001, "answers": ["Sentence 0: The ongoing repair consists of two activities, which are executed, in an arbitrary order.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\trepair"], "original_id": "1-2_computer_repair-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The first activity is to check and repair the hardware, whereas the second activity checks and configures the software.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 50, "total_costs": 0.005065, "answers": ["1. Actions:\n- check and repair the hardware\n- check and configure the software\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tcheck and repair the hardware\t\n0\tFALSE\texistence\tcheck and configure the software"], "original_id": "1-2_computer_repair-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 37, "total_costs": 0.004825, "answers": ["Sentence 0: After each of these activities, the proper system functionality is tested.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\ttest system functionality."], "original_id": "1-2_computer_repair-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an error is detected another arbitrary repair activity is executed, otherwise the repair is finished.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 54, "total_costs": 0.005105, "answers": ["1. Actions:\n- detect error\n- execute repair activity\n- finish repair\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tdetect error\texecute repair activity\n0\tFALSE\tprecedence\tdetect error\tfinish repair"], "original_id": "1-2_computer_repair-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The MPON reports the meter operation to the GO.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 40, "total_costs": 0.00486, "answers": ["Sentence 0: The MPON reports the meter operation to the GO.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\treports the meter operation to the GO."], "original_id": "10-2_process_b3-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO examines the application of the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 38, "total_costs": 0.004825, "answers": ["Sentence 0: The GO examines the application of the MPON.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\texamines the application of the MPON"], "original_id": "10-2_process_b3-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO rejects the application of the MPON or the GO confirmes the application of the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 60, "total_costs": 0.00521, "answers": ["1. Actions:\n- rejects the application of the MPON\n- confirmes the application of the MPON\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tnoncooccurrence\trejects the application of the MPON\tconfirmes the application of the MPON"], "original_id": "10-2_process_b3-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO informs the MPOO about the registration confirmation of the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 49, "total_costs": 0.005015, "answers": ["Sentence 0: The GO informs the MPOO about the registration confirmation of the MPON.\n\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tinforms the MPOO about the registration confirmation of the MPON."], "original_id": "10-2_process_b3-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO informs the MSPO about the registration confirmation of the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 48, "total_costs": 0.005, "answers": ["Sentence 0: The GO informs the MSPO about the registration confirmation of the MPON.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tinforms the MSPO about the registration confirmation of the MPON"], "original_id": "10-2_process_b3-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The MPON and the MPOO perform the equipment acquisition and/or equipment changes.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 53, "total_costs": 0.0050799999999999994, "answers": ["Sentence 0: The MPON and the MPOO perform the equipment acquisition and/or equipment changes.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tperform the equipment acquisition\t\n0\tFALSE\texistence\tperform the equipment changes\t"], "original_id": "10-2_process_b3-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The MPON informs the GO about the failure of the entire process or the MPON informs the GO about the successful completion of the entire process.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 870, "output_tokens": 79, "total_costs": 0.005535, "answers": ["Sentence 0: The MPON informs the GO about the failure of the entire process or the MPON informs the GO about the successful completion of the entire process.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tinforms the GO about the failure of the entire process\t\n0\tFALSE\texistence\tinforms the GO about the successful completion of the entire process\t"], "original_id": "10-2_process_b3-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO informs the MPON about the failure of the overall transaction by deadline if after a maximum time limit no message of the MPON is present at the GO.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 874, "output_tokens": 54, "total_costs": 0.00518, "answers": ["1. Actions:\n- informs the MPON\n- no message of the MPON is present at the GO\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tno message of the MPON is present at the GO\tinforms the MPON"], "original_id": "10-2_process_b3-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the MPON informs the GO about the failure of the entire process, the GO confirms the failure of the assignment to the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 869, "output_tokens": 65, "total_costs": 0.00532, "answers": ["1. Actions:\n- informs the GO about the failure of the entire process\n- confirms the failure of the assignment to the MPON\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tinforms the GO about the failure of the entire process\tconfirms the failure of the assignment to the MPON"], "original_id": "10-2_process_b3-1-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the MPON informs the GO about the successful completion of the overall process, the GO assigns the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 39, "total_costs": 0.004905, "answers": ["1. Actions:\n- informs the GO\n- assigns the MPON\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tinforms the GO\tassigns the MPON"], "original_id": "10-2_process_b3-1-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO confirms the assignment to the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 38, "total_costs": 0.004825, "answers": ["Sentence 0: The GO confirms the assignment to the MPON.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tconfirms the assignment to the MPON"], "original_id": "10-2_process_b3-1-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO informs the MPOO about the failure of the assignment of the MPON or the GO informs the MPOO about the assignment of the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 872, "output_tokens": 81, "total_costs": 0.005575, "answers": ["Sentence 0: The GO informs the MPOO about the failure of the assignment of the MPON or the GO informs the MPOO about the assignment of the MPON.\n#-#-#RESULT#-#-#\n0\tFALSE\tnoncooccurrence\tinforms the MPOO about the failure of the assignment of the MPON\tinforms the MPOO about the assignment of the MPON"], "original_id": "10-2_process_b3-1-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO informs the MSPO about the failure of the assignment of the MPON or the GO informs the MSPO about the assignment of the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 872, "output_tokens": 81, "total_costs": 0.005575, "answers": ["Sentence 0: The GO informs the MSPO about the failure of the assignment of the MPON or the GO informs the MSPO about the assignment of the MPON.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tnoncooccurrence\tinforms the MSPO about the failure of the assignment of the MPON\tinforms the MSPO about the assignment of the MPON"], "original_id": "10-2_process_b3-1-12"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO informs the SP about the assignment of the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 48, "total_costs": 0.0049900000000000005, "answers": ["1. Actions:\n- informs the SP\n- assignment of the MPON\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tinforms the SP\n0\tFALSE\texistence\tassignment of the MPON"], "original_id": "10-2_process_b3-1-13"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After management indicates that new clients are needed, the marketing team will perform a market analysis and prepare a portfolio presentation.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 89, "total_costs": 0.005655, "answers": ["1. Identified actions:\n- indicates new clients\n- perform market analysis\n- prepare portfolio presentation\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tindicates new clients\tperform market analysis\n0\tFALSE\tprecedence\tperform market analysis\tprepare portfolio presentation\n0\tFALSE\tresponse\tindicates new clients\tperform market analysis\n0\tFALSE\tresponse\tperform market analysis\tprepare portfolio presentation"], "original_id": "1081511532_rev3-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When they have sent out offers to potential clients the marketing team informs management about the responses.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 46, "total_costs": 0.004985, "answers": ["Sentence 0: When they have sent out offers to potential clients the marketing team informs management about the responses.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tsent out offers\tinforms management"], "original_id": "1081511532_rev3-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Management then starts negotiations by sending out a detailed offer to the client.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 51, "total_costs": 0.00504, "answers": ["Sentence 0: Management then starts negotiations by sending out a detailed offer to the client.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\tstarts negotiations\n0\tFALSE\texistence\tsending out a detailed offer to the client"], "original_id": "1081511532_rev3-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the client accepts the offer, management will prepare a contract that will be signed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 58, "total_costs": 0.0051600000000000005, "answers": ["Sentence 0: If the client accepts the offer, management will prepare a contract that will be signed.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\taccepts the offer\tprepare a contract\n0\tFALSE\tresponse\tprepare a contract\tsigned"], "original_id": "1081511532_rev3-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Otherwise, management analyzes the reason why their offer failed in order to improve in the future.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 47, "total_costs": 0.005, "answers": ["Sentence 0: Otherwise, management analyzes the reason why their offer failed in order to improve in the future.\n\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tanalyzes the reason why their offer failed"], "original_id": "1081511532_rev3-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: An order to cash process starts when a customer order is received.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 36, "total_costs": 0.00481, "answers": ["Sentence 0: An order to cash process starts when a customer order is received.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\treceive customer order"], "original_id": "1120589054_rev4-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After the order has been processed, it is send to the warehouse.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 41, "total_costs": 0.00489, "answers": ["Sentence 0: After the order has been processed, it is send to the warehouse.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tprocess order\tsend order to warehouse"], "original_id": "1120589054_rev4-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The warehouse employees determine the parts required to produce the requested items.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 44, "total_costs": 0.00493, "answers": ["Sentence 0: The warehouse employees determine the parts required to produce the requested items.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tdetermine the parts required to produce the requested items"], "original_id": "1120589054_rev4-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If any parts are not available in the warehouse, these are ordered.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 66, "total_costs": 0.005265000000000001, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- parts are not available\n- parts are ordered\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tparts are not available\tparts are ordered"], "original_id": "1120589054_rev4-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once all necessary parts are available, production will start.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 34, "total_costs": 0.00477, "answers": ["Sentence 0: Once all necessary parts are available, production will start.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\tproduction will start"], "original_id": "1120589054_rev4-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After production, quality checks will be performed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 35, "total_costs": 0.004775000000000001, "answers": ["Sentence 0: After production, quality checks will be performed.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tproduction\tquality checks"], "original_id": "1120589054_rev4-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the production process has finished, products will be packaged and labeled, before returning to the warehouse.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 84, "total_costs": 0.005565, "answers": ["Sentence 0: If the production process has finished, products will be packaged and labeled, before returning to the warehouse.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tfinished production process\tproducts will be packaged\n0\tFALSE\tprecedence\tproducts will be packaged\tproducts will be labeled\n0\tFALSE\tprecedence\tproducts will be labeled\treturning to the warehouse"], "original_id": "1120589054_rev4-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Finally, sales will be informed about the completed production and the product can be sold to the customer.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 72, "total_costs": 0.005384999999999999, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- informed about the completed production\n- sold to the customer\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tsuccession\tinformed about the completed production\tsold to the customer"], "original_id": "1120589054_rev4-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when the SO: Angebot/Auftrag receives a subsidiary order.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 41, "total_costs": 0.0049, "answers": ["Sentence 0: The process starts when the SO: Angebot/Auftrag receives a subsidiary order.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\treceives a subsidiary order"], "original_id": "1364308140_rev4-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The SO: Angebot/Auftrag prepares goods for shipment and then ships the goods, concurrently with preparing the goods and shipping them, the SO: Angebot/Auftrag prepares invoicing.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 878, "output_tokens": 71, "total_costs": 0.005455, "answers": ["1. Actions:\n- prepares goods\n- ships the goods\n- prepares invoicing\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tsuccession\tprepares goods\tships the goods\n0\tFALSE\tsuccession\tprepares goods\tprepares invoicing\n0\tFALSE\tsuccession\tships the goods\tprepares invoicing"], "original_id": "1364308140_rev4-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In case the customer is subsidiary and the subsidiary relationship is not yet modeled, SO: Address- management adds parent company as invoicing address, then the SO: Angebot/Auftrag create the invoice.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 881, "output_tokens": 59, "total_costs": 0.0052899999999999996, "answers": ["1. Address-management adds parent company as invoicing address\n2. Angebot/Auftrag create the invoice\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tAddress-management adds parent company as invoicing address\tAngebot/Auftrag create the invoice"], "original_id": "1364308140_rev4-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Otherwise if the customer is independent or the subsidiary relationship is already modeled in ERP, the SO: Angebot/Auftrag directly creates the invoice.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 869, "output_tokens": 56, "total_costs": 0.005185, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- creates the invoice\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tcreates the invoice"], "original_id": "1364308140_rev4-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Finally, the SO: Angebot/Auftrag sends the invoice.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 36, "total_costs": 0.00481, "answers": ["Sentence 0: Finally, the SO: Angebot/Auftrag sends the invoice.\n#-#-#RESULT#-#-#\n0\tFALSE\tend\tsends the invoice"], "original_id": "1364308140_rev4-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: At the beginning the customer perceives that her subscribed service has degraded.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 42, "total_costs": 0.0049050000000000005, "answers": ["Sentence 0: At the beginning the customer perceives that her subscribed service has degraded.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\tperceives that her subscribed service has degraded"], "original_id": "2-1_sla_violation-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A list with all the problem parameters is then sent to the Customer Service department of TELECO.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 49, "total_costs": 0.0050349999999999995, "answers": ["Sentence 0: A list with all the problem parameters is then sent to the Customer Service department of TELECO.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tsent to the Customer Service department of TELECO"], "original_id": "2-1_sla_violation-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: At the customer service an employee enters (based on the received data) a problem report into system T..\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 37, "total_costs": 0.004865, "answers": ["1. Actions:\n- enters a problem report into system T\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tenters a problem report into system T"], "original_id": "2-1_sla_violation-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Then the problem report is compared to the customer SLA to identify what the extent and the details of the service degradation are.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 865, "output_tokens": 65, "total_costs": 0.0053, "answers": ["Sentence 0: Then the problem report is compared to the customer SLA to identify what the extent and the details of the service degradation are.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tcompare problem report to customer SLA\n0\tFALSE\texistence\tidentify extent and details of service degradation"], "original_id": "2-1_sla_violation-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Based on this, the necessary counter measures are determined including their respective priorities.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 71, "total_costs": 0.005345, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- determine counter measures\n- include respective priorities\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tdetermine counter measures\n0\tFALSE\texistence\tinclude respective priorities"], "original_id": "2-1_sla_violation-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: An electronic service then determines the significance of the customer based on information that has been collected during the history of the contractual relationship.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 866, "output_tokens": 53, "total_costs": 0.005124999999999999, "answers": ["Sentence 0: An electronic service then determines the significance of the customer based on information that has been collected during the history of the contractual relationship.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tdetermines the significance of the customer"], "original_id": "2-1_sla_violation-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In case the customer is premium, the process will link to an extra problem fix process (this process will not be detailed here).\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 867, "output_tokens": 53, "total_costs": 0.00513, "answers": ["Sentence 0: In case the customer is premium, the process will link to an extra problem fix process (this process will not be detailed here).\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tlink to an extra problem fix process"], "original_id": "2-1_sla_violation-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In case the customer is of certain significance which would affect the counter measures previously decided upon, the process goes back to re-prioritize these measures otherwise the process continues.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 875, "output_tokens": 122, "total_costs": 0.0062050000000000004, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- affect the counter measures\n- goes back to re-prioritize these measures\n- continues\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\taffect the counter measures\tgoes back to re-prioritize these measures\n0\tFALSE\tprecedence\taffect the counter measures\tcontinues\n0\tFALSE\tnoncooccurrence\tgoes back to re-prioritize these measures\tcontinues"], "original_id": "2-1_sla_violation-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Taking together the information (i.e. contract commitment data + prioritized actions) a detailed problem report is created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 60, "total_costs": 0.005215, "answers": ["Sentence 0: Taking together the information (i.e. contract commitment data + prioritized actions) a detailed problem report is created.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tTaking together the information\t\n0\tFALSE\texistence\tcreated a detailed problem report\t"], "original_id": "2-1_sla_violation-1-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The detailed problem report is then sent to Service Management.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 36, "total_costs": 0.0048, "answers": ["Sentence 0: The detailed problem report is then sent to Service Management.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tsent to Service Management"], "original_id": "2-1_sla_violation-1-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Service Management deals on a first level with violations of quality in services that are provided to customers.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 57, "total_costs": 0.005155, "answers": ["Sentence 0: Service Management deals on a first level with violations of quality in services that are provided to customers.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tdeals on a first level with violations of quality in services that are provided to customers."], "original_id": "2-1_sla_violation-1-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After receiving the detailed problem report, Service management investigates whether the problem is analyzable at the level of their department or whether the problem may be located at Resource Provisioning.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 876, "output_tokens": 136, "total_costs": 0.00642, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- receiving the detailed problem report\n- investigates whether the problem is analyzable at the level of their department\n- investigates whether the problem may be located at Resource Provisioning\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\treceiving the detailed problem report\tinvestigates whether the problem is analyzable at the level of their department\n0\tFALSE\tprecedence\treceiving the detailed problem report\tinvestigates whether the problem may be located at Resource Provisioning"], "original_id": "2-1_sla_violation-1-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In case Service Management assesses the problem to be not analyzable by themselves, the detailed problem report is sent out to Resource Provisioning.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 869, "output_tokens": 73, "total_costs": 0.0054399999999999995, "answers": ["Sentence 0: In case Service Management assesses the problem to be not analyzable by themselves, the detailed problem report is sent out to Resource Provisioning.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tassesses the problem to be not analyzable by themselves\tsent out the detailed problem report to Resource Provisioning"], "original_id": "2-1_sla_violation-1-12"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If Service Management is sure they can analyze it, they perform the analysis and based on the outcome they create a trouble report that indicates the type of problem.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 872, "output_tokens": 67, "total_costs": 0.005365, "answers": ["Sentence 0: If Service Management is sure they can analyze it, they perform the analysis and based on the outcome they create a trouble report that indicates the type of problem.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tanalyze it\t\n0\tFALSE\tresponse\tperform the analysis\tcreate a trouble report"], "original_id": "2-1_sla_violation-1-13"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After Resource Provisioning receives the detailed problem report, it is checked whether there are any possible problems.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 58, "total_costs": 0.005175, "answers": ["Sentence 0: After Resource Provisioning receives the detailed problem report, it is checked whether there are any possible problems.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tResource Provisioning receives the detailed problem report\tit is checked whether there are any possible problems"], "original_id": "2-1_sla_violation-1-14"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If no problems are detected, a notification about the normal service execution is created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 44, "total_costs": 0.004945, "answers": ["1. Actions:\n- detect problems\n- create notification about the normal service execution\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tdetect problems\tcreate notification about the normal service execution"], "original_id": "2-1_sla_violation-1-15"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a problem is detected this will be analyzed by Resource Provisioning and a trouble report is created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 67, "total_costs": 0.00531, "answers": ["Sentence 0: If a problem is detected this will be analyzed by Resource Provisioning and a trouble report is created.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tproblem is detected\tanalyzed by Resource Provisioning\n0\tFALSE\tresponse\tanalyzed by Resource Provisioning\ttrouble report is created"], "original_id": "2-1_sla_violation-1-16"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Either trouble report or the normal execution notification will be included in a status report and sent back to Service Management.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 75, "total_costs": 0.00544, "answers": ["Sentence 0: Either trouble report or the normal execution notification will be included in a status report and sent back to Service Management.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tinclude trouble report in status report\t\n0\tFALSE\texistence\tinclude normal execution notification in status report\t\n0\tFALSE\texistence\tsend status report back to Service Management\t"], "original_id": "2-1_sla_violation-1-17"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Service Management then prepares the final status report based on the received information.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 73, "total_costs": 0.00537, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- prepares the final status report\n- based on the received information\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tprepares the final status report\tbased on the received information"], "original_id": "2-1_sla_violation-1-18"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Subsequently it has to be determined what counter measures should be taken depending on the information in the final status report.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 79, "total_costs": 0.0055000000000000005, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- determined what counter measures should be taken\n- information in the final status report\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tdetermined what counter measures should be taken\tinformation in the final status report"], "original_id": "2-1_sla_violation-1-19"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Three alternative process paths may be taken.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 849, "output_tokens": 32, "total_costs": 0.004725, "answers": ["Sentence 0: Three alternative process paths may be taken.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\ttake process paths"], "original_id": "2-1_sla_violation-1-20"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: For the case that no problem was detected at all, the actual service performance is sent back to the Customer Service.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 51, "total_costs": 0.005085, "answers": ["1. First, identify actions contained in the input sentence:\n- \"detected problem\"\n- \"sent performance\"\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tdetected problem\n0\tFALSE\texistence\tsent performance"], "original_id": "2-1_sla_violation-1-21"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: For the case that minor corrective actions are required, Service Management will undertake corrective actions by themselves.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 44, "total_costs": 0.00496, "answers": ["Sentence 0: For the case that minor corrective actions are required, Service Management will undertake corrective actions by themselves.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tundertake corrective actions"], "original_id": "2-1_sla_violation-1-22"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Subsequently, the problem resolution report is created and then sent out to Customer Service.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 49, "total_costs": 0.00502, "answers": ["Sentence 0: Subsequently, the problem resolution report is created and then sent out to Customer Service.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tthe problem resolution report is created\tsent out to Customer Service"], "original_id": "2-1_sla_violation-1-23"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After sending, this process path of Service Management ends.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 40, "total_costs": 0.00486, "answers": ["Sentence 0: After sending, this process path of Service Management ends.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tsending\t\n0\tFALSE\tend\tends"], "original_id": "2-1_sla_violation-1-24"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: For the case that automatic resource restoration from Resource Provisioning is required, Service Management must create a request for automatic resource restoration.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 866, "output_tokens": 52, "total_costs": 0.00511, "answers": ["Sentence 0: For the case that automatic resource restoration from Resource Provisioning is required, Service Management must create a request for automatic resource restoration.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tcreate a request for automatic resource restoration"], "original_id": "2-1_sla_violation-1-25"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This message is then sent to Resource Provisioning.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 36, "total_costs": 0.004795, "answers": ["Sentence 0: This message is then sent to Resource Provisioning.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tsent to Resource Provisioning"], "original_id": "2-1_sla_violation-1-26"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Resource Provisioning has been on-hold and waiting for a restoration request but this must happen within 2 days after the status report was sent out, otherwise Resource Provisioning terminates the process.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 880, "output_tokens": 104, "total_costs": 0.00596, "answers": ["Sentence 0: Resource Provisioning has been on-hold and waiting for a restoration request but this must happen within 2 days after the status report was sent out, otherwise Resource Provisioning terminates the process.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tResource Provisioning\t\n0\tFALSE\texistence\trestoration request\t\n0\tFALSE\tprecedence\tstatus report\trestoration request\n0\tFALSE\tresponse\trestoration request\tResource Provisioning\n0\tFALSE\tend\tResource Provisioning"], "original_id": "2-1_sla_violation-1-27"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After the restoration request is received, all possible errors are tracked.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 43, "total_costs": 0.004915, "answers": ["Sentence 0: After the restoration request is received, all possible errors are tracked.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\trestoration request is received\terrors are tracked"], "original_id": "2-1_sla_violation-1-28"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Based on the tracked errors, all necessary corrective actions are undertaken by Resource Provisioning.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 42, "total_costs": 0.004920000000000001, "answers": ["Sentence 0: Based on the tracked errors, all necessary corrective actions are undertaken by Resource Provisioning.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tundertake corrective actions"], "original_id": "2-1_sla_violation-1-29"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Then a trouble-shooting report is created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 38, "total_costs": 0.004825, "answers": ["Sentence 0: Then a trouble-shooting report is created.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tcreated a trouble-shooting report"], "original_id": "2-1_sla_violation-1-30"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This report is sent out to Service Management, then the process ends.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 51, "total_costs": 0.00504, "answers": ["1. Actions:\n- sent out report to Service Management\n- ends process\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tsent out report to Service Management\tends process\n0\tFALSE\tend\tends process"], "original_id": "2-1_sla_violation-1-31"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The trouble-shooting report is received by Service Management and this information goes then into the creation of the problem resolution report just as described for ii).\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 871, "output_tokens": 62, "total_costs": 0.005285000000000001, "answers": ["Sentence 0: The trouble-shooting report is received by Service Management and this information goes then into the creation of the problem resolution report just as described for ii).\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\treceive trouble-shooting report\tcreate problem resolution report"], "original_id": "2-1_sla_violation-1-32"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Customer Service either receives the actual service performance (if there was no problem) or the problem resolution report.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 51, "total_costs": 0.0050750000000000005, "answers": ["1. Actions:\n- receives the actual service performance\n- receives the problem resolution report\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tnoncooccurrence\treceives the actual service performance\treceives the problem resolution report"], "original_id": "2-1_sla_violation-1-33"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Then, two concurrent activities are triggered, i.e. i) a report is created for the customer which details the current service performance and the resolution of the problem, and ii) an SLA violation rebate is reported to Billing & Collections who will adjust the billing.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 893, "output_tokens": 60, "total_costs": 0.005365, "answers": ["1. create report\n2. report SLA violation to Billing & Collections\n3. adjust billing\n\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tcreate report\t\n0\tFALSE\texistence\treport SLA violation to Billing & Collections\t\n0\tFALSE\texistence\tadjust billing"], "original_id": "2-1_sla_violation-1-34"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The report for the customer is sent out to her.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 36, "total_costs": 0.0048, "answers": ["Sentence 0: The report for the customer is sent out to her.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tsent out the report"], "original_id": "2-1_sla_violation-1-35"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After all three activities are completed the process ends within Customer Service.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 27, "total_costs": 0.004675, "answers": ["1. Identify actions:\n- ends process\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tend\tends process"], "original_id": "2-1_sla_violation-1-36"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After the customer then receives the report about service performance and problem resolution from Customer Service, the process flow at the customer also ends.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 867, "output_tokens": 67, "total_costs": 0.00534, "answers": ["Sentence 0: After the customer then receives the report about service performance and problem resolution from Customer Service, the process flow at the customer also ends.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\treceives the report\tends the process flow\n0\tFALSE\tend\tends the process flow"], "original_id": "2-1_sla_violation-1-37"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The credit company collects the credit information from the customer, If the requested amount is greater than 1M$ an approval must be requested.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 869, "output_tokens": 90, "total_costs": 0.0056949999999999995, "answers": ["1. Actions:\n- collects the credit information\n- requested amount is greater than 1M$\n- approval must be requested\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tcollects the credit information\t\n0\tFALSE\tprecedence\trequested amount is greater than 1M$\tapproval must be requested\n0\tFALSE\tresponse\trequested amount is greater than 1M$\tapproval must be requested"], "original_id": "20818304_rev1-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$ the company assess the risk of the credit.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 50, "total_costs": 0.005065, "answers": ["Sentence 0: If the requested amount is lower or equal to 1M$ the company assess the risk of the credit.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tassess the risk of the credit"], "original_id": "20818304_rev1-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After the assessment, if the risk is high, an approval must be requested, but if the risk is low the credit is accepted.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 868, "output_tokens": 76, "total_costs": 0.0054800000000000005, "answers": ["Sentence 0: After the assessment, if the risk is high, an approval must be requested, but if the risk is low the credit is accepted.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tassessment\trequested approval\n0\tFALSE\tprecedence\tassessment\taccepted credit\n0\tFALSE\tresponse\trequested approval\taccepted credit"], "original_id": "20818304_rev1-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After the approval request, the credit could be accepted or rejected, in both cases, an email is sent to the customer.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 866, "output_tokens": 87, "total_costs": 0.005634999999999999, "answers": ["1. Identified actions:\n- approval request\n- credit accepted\n- credit rejected\n- email sent to the customer\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tapproval request\tcredit accepted\n0\tFALSE\tprecedence\tapproval request\tcredit rejected\n0\tFALSE\tresponse\tcredit accepted\temail sent to the customer\n0\tFALSE\tresponse\tcredit rejected\temail sent to the customer"], "original_id": "20818304_rev1-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The party sends a warrant possession request asking a warrant to be released.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 54, "total_costs": 0.005085, "answers": ["Sentence 0: The party sends a warrant possession request asking a warrant to be released.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tsends a warrant possession request\t\n0\tFALSE\texistence\tasking a warrant to be released\t"], "original_id": "3-1_2009-1_mc_finalice_sct_warranty_posession-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The Client Service Back Office as part of the Small Claims Registry Operations receives the request and retrieves the SCT file.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 77, "total_costs": 0.00547, "answers": ["Sentence 0: The Client Service Back Office as part of the Small Claims Registry Operations receives the request and retrieves the SCT file.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\treceives the request\t\n0\tFALSE\texistence\tretrieves the SCT file\t\n0\tFALSE\tsuccession\treceives the request\tretrieves the SCT file"], "original_id": "3-1_2009-1_mc_finalice_sct_warranty_posession-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Then, the SCT Warrant Possession is forwarded to Queensland Police.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 40, "total_costs": 0.004875, "answers": ["Sentence 0: Then, the SCT Warrant Possession is forwarded to Queensland Police.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tforwarded to Queensland Police"], "original_id": "3-1_2009-1_mc_finalice_sct_warranty_posession-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The SCT physical file is stored by the Back Office awaiting a report to be sent by the Police.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 49, "total_costs": 0.005039999999999999, "answers": ["1. Actions:\n- stored by the Back Office\n- report to be sent by the Police\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tstored by the Back Office\treport to be sent by the Police"], "original_id": "3-1_2009-1_mc_finalice_sct_warranty_posession-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When the report is received, the respective SCT file is retrieved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 39, "total_costs": 0.004855, "answers": ["Sentence 0: When the report is received, the respective SCT file is retrieved.\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\treceive report\tretrieve SCT file"], "original_id": "3-1_2009-1_mc_finalice_sct_warranty_posession-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Then, Back Office attaches the new SCT document, and stores the expanded SCT physical file.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 52, "total_costs": 0.0050750000000000005, "answers": ["Sentence 0: Then, Back Office attaches the new SCT document, and stores the expanded SCT physical file.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tattaches the new SCT document\tstores the expanded SCT physical file"], "original_id": "3-1_2009-1_mc_finalice_sct_warranty_posession-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After that, some other MC internal staff receives the physical SCT file (out of scope).\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 61, "total_costs": 0.00521, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- receives the physical SCT file\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\treceives the physical SCT file"], "original_id": "3-1_2009-1_mc_finalice_sct_warranty_posession-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Each morning, the files which have yet to be processed need to be checked, to make sure they are in order for the court hearing that day.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 871, "output_tokens": 52, "total_costs": 0.005135000000000001, "answers": ["Sentence 0: Each morning, the files which have yet to be processed need to be checked, to make sure they are in order for the court hearing that day.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tcheck files"], "original_id": "3-2_2009-2_conduct_directions_hearing-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If some files are missing, a search is initiated, otherwise the files can be physically tracked to the intended location.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 49, "total_costs": 0.0050550000000000005, "answers": ["1. Actions:\n- search is initiated\n- files can be physically tracked to the intended location\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tsearch is initiated\tfiles can be physically tracked to the intended location"], "original_id": "3-2_2009-2_conduct_directions_hearing-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once all the files are ready, these are handed to the Associate, and meantime the Judges Lawlist is distributed to the relevant people.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 868, "output_tokens": 90, "total_costs": 0.00569, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- files are ready\n- handed to the Associate\n- Judges Lawlist is distributed\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tfiles are ready\thanded to the Associate\n0\tFALSE\tprecedence\tfiles are ready\tJudges Lawlist is distributed"], "original_id": "3-2_2009-2_conduct_directions_hearing-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the directions hearings are conducted.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 849, "output_tokens": 33, "total_costs": 0.004739999999999999, "answers": ["Sentence 0: Afterwards, the directions hearings are conducted.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tconducted directions hearings"], "original_id": "3-2_2009-2_conduct_directions_hearing-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is received, it is first checked whether the claimant is insured by the organization.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 49, "total_costs": 0.0050349999999999995, "answers": ["When a claim is received, it is first checked whether the claimant is insured by the organization.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tclaim is received\tchecked whether the claimant is insured by the organization"], "original_id": "3-6_2010-1_claims_notification-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If not, the claimant is informed that the claim must be rejected.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 37, "total_costs": 0.00483, "answers": ["1. Actions:\n- informed that the claim must be rejected\n\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tinformed that the claim must be rejected"], "original_id": "3-6_2010-1_claims_notification-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Otherwise, the severity of the claim is evaluated.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 38, "total_costs": 0.004825, "answers": ["Sentence 0: Otherwise, the severity of the claim is evaluated.\n\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tevaluated the severity of the claim"], "original_id": "3-6_2010-1_claims_notification-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Based on the outcome (simple or complex claims), relevant forms are sent to the claimant.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 40, "total_costs": 0.004895, "answers": ["Sentence 0: Based on the outcome (simple or complex claims), relevant forms are sent to the claimant.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tsend forms"], "original_id": "3-6_2010-1_claims_notification-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the forms are returned, they are checked for completeness.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 39, "total_costs": 0.00485, "answers": ["Sentence 0: Once the forms are returned, they are checked for completeness.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\treturned forms\tchecked forms"], "original_id": "3-6_2010-1_claims_notification-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the forms provide all relevant details, the claim is registered in the Claims Management system, which ends the Claims Notification process.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 866, "output_tokens": 82, "total_costs": 0.00556, "answers": ["Sentence 0: If the forms provide all relevant details, the claim is registered in the Claims Management system, which ends the Claims Notification process.\n\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tprovide all relevant details\t\n0\tFALSE\tresponse\tprovide all relevant details\tregister the claim in the Claims Management system\n0\tFALSE\tend\tregister the claim in the Claims Management system\t"], "original_id": "3-6_2010-1_claims_notification-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Otherwise, the claimant is informed to update the forms.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 42, "total_costs": 0.00489, "answers": ["Sentence 0: Otherwise, the claimant is informed to update the forms.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tinformed\n0\tFALSE\texistence\tupdate the forms"], "original_id": "3-6_2010-1_claims_notification-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Upon reception of the updated forms, they are checked again.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 41, "total_costs": 0.00488, "answers": ["Sentence 0: Upon reception of the updated forms, they are checked again.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\treception of the updated forms\tchecked again"], "original_id": "3-6_2010-1_claims_notification-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The intake workflow starts with a notice by telephone at the secretarial office of the mental health care institute.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 44, "total_costs": 0.0049700000000000005, "answers": ["Sentence 0: The intake workflow starts with a notice by telephone at the secretarial office of the mental health care institute.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\tnotice by telephone"], "original_id": "4-1_intaker_workflow-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This notice is done by the family doctor of somebody who is in need of mental treatment.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 40, "total_costs": 0.004895, "answers": ["Sentence 0: This notice is done by the family doctor of somebody who is in need of mental treatment.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tnotice"], "original_id": "4-1_intaker_workflow-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The secretarial worker inquires after the name and residence of the patient.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 51, "total_costs": 0.005045, "answers": ["Sentence 0: The secretarial worker inquires after the name and residence of the patient.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tinquires after the name\n0\tFALSE\texistence\tinquires after the residence"], "original_id": "4-1_intaker_workflow-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: On the basis of this information, the doctor is put through to the nursing officer responsible for the part of the region that the patient lives in.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 870, "output_tokens": 55, "total_costs": 0.005175, "answers": ["Sentence 0: On the basis of this information, the doctor is put through to the nursing officer responsible for the part of the region that the patient lives in.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tput through to the nursing officer"], "original_id": "4-1_intaker_workflow-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The nursing officer makes a full inquiry into the mental, health, and social state of the patient in question.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 59, "total_costs": 0.0052, "answers": ["Sentence 0: The nursing officer makes a full inquiry into the mental, health, and social state of the patient in question.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tmakes a full inquiry into the mental, health, and social state of the patient"], "original_id": "4-1_intaker_workflow-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This information is recorded on a registration form.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 36, "total_costs": 0.00479, "answers": ["Sentence 0: This information is recorded on a registration form.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\trecorded on a registration form."], "original_id": "4-1_intaker_workflow-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: At the end of the conversation, this form is handed in at the secretarial office of the institute.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 53, "total_costs": 0.005105, "answers": ["Sentence 0: At the end of the conversation, this form is handed in at the secretarial office of the institute.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tend\thanded in at the secretarial office of the institute."], "original_id": "4-1_intaker_workflow-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Here, the information on the form is stored in the information system and subsequently printed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 46, "total_costs": 0.00498, "answers": ["Sentence 0: Here, the information on the form is stored in the information system and subsequently printed.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tstored in the information system\tprinted"], "original_id": "4-1_intaker_workflow-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: For new patients, a patient file is created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 33, "total_costs": 0.00475, "answers": ["Sentence 0: For new patients, a patient file is created.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tcreate patient file"], "original_id": "4-1_intaker_workflow-1-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The registration form as well as the print from the information system are stored in the patient file.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 54, "total_costs": 0.00511, "answers": ["Sentence 0: The registration form as well as the print from the information system are stored in the patient file.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tstore registration form\n0\tFALSE\texistence\tstore print from the information system"], "original_id": "4-1_intaker_workflow-1-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Patient files are kept at the secretarial office and may not leave the building.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 72, "total_costs": 0.005365, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- kept patient files\n- leave the building\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tkept patient files\n0\tTRUE\tabsence\tleave the building"], "original_id": "4-1_intaker_workflow-1-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: At the secretarial office, two registration cards are produced for respectively the future first and second intaker of the patient.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 865, "output_tokens": 48, "total_costs": 0.005045, "answers": ["Sentence 0: At the secretarial office, two registration cards are produced for respectively the future first and second intaker of the patient.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tproduced registration cards"], "original_id": "4-1_intaker_workflow-1-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The registration card contains a set of basic patient data.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 39, "total_costs": 0.004845, "answers": ["Sentence 0: The registration card contains a set of basic patient data.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tcontains a set of basic patient data"], "original_id": "4-1_intaker_workflow-1-12"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The new patient is added on the list of new notices.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 40, "total_costs": 0.0048649999999999995, "answers": ["Sentence 0: The new patient is added on the list of new notices.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tadded on the list of new notices"], "original_id": "4-1_intaker_workflow-1-13"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Halfway the week, at Wednesday, a staff meeting of the entire medical team takes place.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 49, "total_costs": 0.0050349999999999995, "answers": ["Sentence 0: Halfway the week, at Wednesday, a staff meeting of the entire medical team takes place.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tstaff meeting of the entire medical team takes place"], "original_id": "4-1_intaker_workflow-1-14"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The medical team consists of social-medical workers, physicians, and a psychiatrist.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 68, "total_costs": 0.005305, "answers": ["Sentence 0: The medical team consists of social-medical workers, physicians, and a psychiatrist.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tconsists of social-medical workers\t\n0\tFALSE\texistence\tconsists of physicians\t\n0\tFALSE\texistence\tconsists of a psychiatrist\t"], "original_id": "4-1_intaker_workflow-1-15"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: At this meeting, the team-leader assigns all new patients on the list of new notices to members of the team.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 865, "output_tokens": 60, "total_costs": 0.005225, "answers": ["Sentence 0: At this meeting, the team-leader assigns all new patients on the list of new notices to members of the team.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tassigns all new patients on the list of new notices to members of the team"], "original_id": "4-1_intaker_workflow-1-16"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Each patient will be assigned to a social-medical worker, who will act as the first intaker of the patient.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 865, "output_tokens": 60, "total_costs": 0.005225, "answers": ["Each patient will be assigned to a social-medical worker, who will act as the first intaker of the patient.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tassign patient to social-medical worker\n0\tFALSE\texistence\tact as first intaker of patient"], "original_id": "4-1_intaker_workflow-1-17"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: One of the physicians will act as the second intaker.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 35, "total_costs": 0.00479, "answers": ["One of the physicians will act as the second intaker.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tact as the second intaker."], "original_id": "4-1_intaker_workflow-1-18"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In assigning intakers, the teamleader takes into account their expertise, the region they are responsible for, earlier contacts they might have had with the patient, and their case load.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 877, "output_tokens": 120, "total_costs": 0.0061849999999999995, "answers": ["Sentence 0: In assigning intakers, the teamleader takes into account their expertise, the region they are responsible for, earlier contacts they might have had with the patient, and their case load.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tassigning intakers\n0\tFALSE\texistence\ttakes into account their expertise\n0\tFALSE\texistence\ttakes into account the region they are responsible for\n0\tFALSE\texistence\ttakes into account earlier contacts they might have had with the patient\n0\tFALSE\texistence\ttakes into account their case load"], "original_id": "4-1_intaker_workflow-1-19"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The assignments are recorded on an assignment list which is handed to the secretarial office.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 47, "total_costs": 0.004995, "answers": ["Sentence 0: The assignments are recorded on an assignment list which is handed to the secretarial office.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\trecord assignments\thand assignment list to secretarial office"], "original_id": "4-1_intaker_workflow-1-20"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: For each new assignment, it is also determined whether the medical file of the patient is required.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 47, "total_costs": 0.005005, "answers": ["Sentence 0: For each new assignment, it is also determined whether the medical file of the patient is required.\n\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tdetermine medical file of the patient"], "original_id": "4-1_intaker_workflow-1-21"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This information is added to the assignment list.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 35, "total_costs": 0.004775000000000001, "answers": ["Sentence 0: This information is added to the assignment list.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tadded to the assignment list"], "original_id": "4-1_intaker_workflow-1-22"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The secretarial office stores the assignment of each patient of the assignment list in the information system.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 55, "total_costs": 0.005125, "answers": ["Sentence 0: The secretarial office stores the assignment of each patient of the assignment list in the information system.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tstores the assignment of each patient of the assignment list in the information system."], "original_id": "4-1_intaker_workflow-1-23"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: It passes the produced registration cards to the first and second intaker of each newly assigned patient.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 52, "total_costs": 0.00508, "answers": ["Sentence 0: It passes the produced registration cards to the first and second intaker of each newly assigned patient.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tpasses the produced registration cards to the first and second intaker"], "original_id": "4-1_intaker_workflow-1-24"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: An intaker keeps this registration with him at times when visiting the patient and in his close proximity when he is at the office.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 867, "output_tokens": 81, "total_costs": 0.00555, "answers": ["Sentence 0: An intaker keeps this registration with him at times when visiting the patient and in his close proximity when he is at the office.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tkeeps this registration with him\t\n0\tFALSE\texistence\tvisiting the patient\t\n0\tFALSE\texistence\tin his close proximity when he is at the office\t"], "original_id": "4-1_intaker_workflow-1-25"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: For each patient for which the medical file is required, the secretarial office prepares and sends a letter to the family doctor of the patient, requesting for a copy of the medical file.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 878, "output_tokens": 87, "total_costs": 0.0056949999999999995, "answers": ["Sentence 0: For each patient for which the medical file is required, the secretarial office prepares and sends a letter to the family doctor of the patient, requesting for a copy of the medical file.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tprepares a letter\t\n0\tFALSE\texistence\tsends a letter\t\n0\tFALSE\texistence\trequesting for a copy of the medical file\t"], "original_id": "4-1_intaker_workflow-1-26"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as this copy is received, the secretarial office will inform the second intaker and add the copy to the patient file.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 868, "output_tokens": 71, "total_costs": 0.005405, "answers": ["Sentence 0: As soon as this copy is received, the secretarial office will inform the second intaker and add the copy to the patient file.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\treceive copy\tinform second intaker\n0\tFALSE\tprecedence\treceive copy\tadd copy to patient file"], "original_id": "4-1_intaker_workflow-1-27"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The first intaker plans a meeting with the patient as soon as this is possible.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 44, "total_costs": 0.00495, "answers": ["Sentence 0: The first intaker plans a meeting with the patient as soon as this is possible.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tplans a meeting with the patient"], "original_id": "4-1_intaker_workflow-1-28"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: During the first meeting, the patient is examined using a standard checklist which is filled out.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 68, "total_costs": 0.005315, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- examine patient\n- fill out checklist\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\texamine patient\n0\tFALSE\texistence\tfill out checklist"], "original_id": "4-1_intaker_workflow-1-29"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Additional observations are registered in a personal notebook.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 36, "total_costs": 0.00479, "answers": ["Sentence 0: Additional observations are registered in a personal notebook.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tregister observations in a personal notebook."], "original_id": "4-1_intaker_workflow-1-30"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a visit, the first intaker puts a copy of these notes in the file of a patient.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 56, "total_costs": 0.00515, "answers": ["Sentence 0: After a visit, the first intaker puts a copy of these notes in the file of a patient.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tvisit\tputs a copy of these notes in the file of a patient"], "original_id": "4-1_intaker_workflow-1-31"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The standard checklist is also added to the patient\u00e2\u20ac\u2122s file.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 41, "total_costs": 0.00489, "answers": ["Sentence 0: The standard checklist is also added to the patient\u00e2\u20ac\u2122s file.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tadded to the patient\u2019s file"], "original_id": "4-1_intaker_workflow-1-32"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The second intaker plans the first meeting only after the medical information of the physician if required has been received.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 45, "total_costs": 0.0049900000000000005, "answers": ["1. Identified actions:\n- plans the first meeting\n- received the medical information\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\treceived the medical information\tplans the first meeting"], "original_id": "4-1_intaker_workflow-1-33"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Physicians use dictaphones to record their observations made during meetings with patients.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 42, "total_costs": 0.00491, "answers": ["1. Actions:\n- use dictaphones\n- record observations\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tuse dictaphones\n0\tFALSE\texistence\trecord observations"], "original_id": "4-1_intaker_workflow-1-34"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The secretarial office types out these tapes, after which the information is added to the patient file.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 47, "total_costs": 0.00501, "answers": ["1. Identified actions:\n- types out these tapes\n- added to the patient file\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\ttypes out these tapes\tadded to the patient file"], "original_id": "4-1_intaker_workflow-1-35"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as the meetings of the first and second intaker with the patient have taken place, the secretarial office puts the patient on the list of patients that reach this status.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 877, "output_tokens": 85, "total_costs": 0.00566, "answers": ["Sentence 0: As soon as the meetings of the first and second intaker with the patient have taken place, the secretarial office puts the patient on the list of patients that reach this status.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tmeetings of the first and second intaker with the patient\tsecretarial office puts the patient on the list of patients that reach this status"], "original_id": "4-1_intaker_workflow-1-36"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: For the staff meeting on Wednesday, they provide the team-leader with a list of these patients.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 67, "total_costs": 0.00531, "answers": ["Sentence 0: For the staff meeting on Wednesday, they provide the team-leader with a list of these patients.\nACTIONS: provide the team-leader with a list of these patients\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tprovide the team-leader with a list of these patients"], "original_id": "4-1_intaker_workflow-1-37"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: For each of these patients, the first and second intaker together with the team-leader and the attending psychiatrist formulate a treatment plan.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 868, "output_tokens": 59, "total_costs": 0.0052250000000000005, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- formulate a treatment plan\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tformulate a treatment plan."], "original_id": "4-1_intaker_workflow-1-38"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This treatment plan formally ends the intake procedure.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 33, "total_costs": 0.004745, "answers": ["Sentence 0: This treatment plan formally ends the intake procedure.\n#-#-#RESULT#-#-#\n0\tFALSE\tend\tends the intake procedure"], "original_id": "4-1_intaker_workflow-1-39"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The loan approval process starts by receiving a customer request for a loan amount.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 44, "total_costs": 0.00494, "answers": ["Sentence 0: The loan approval process starts by receiving a customer request for a loan amount.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\treceiving a customer request for a loan amount"], "original_id": "5-1_active_vos_tutorial-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The risk assessment Web service is invoked to assess the request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 40, "total_costs": 0.0048649999999999995, "answers": ["Sentence 0: The risk assessment Web service is invoked to assess the request.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tinvoked the risk assessment Web service"], "original_id": "5-1_active_vos_tutorial-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the loan is small and the customer is low risk, the loan is approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 61, "total_costs": 0.005205, "answers": ["Sentence 0: If the loan is small and the customer is low risk, the loan is approved.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tloan is small\t\n0\tFALSE\texistence\tcustomer is low risk\t\n0\tFALSE\tresponse\tloan is approved\t"], "original_id": "5-1_active_vos_tutorial-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer is high risk, the loan is denied.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 35, "total_costs": 0.00479, "answers": ["Sentence 0: If the customer is high risk, the loan is denied.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tdeny loan"], "original_id": "5-1_active_vos_tutorial-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer needs further review or the loan amount is for $10,000 or more, the request is sent to the approver Web service.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 871, "output_tokens": 82, "total_costs": 0.0055850000000000006, "answers": ["Sentence 0: If the customer needs further review or the loan amount is for $10,000 or more, the request is sent to the approver Web service.\n\nActions:\n1. needs further review\n2. is sent to the approver Web service\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tneeds further review\tis sent to the approver Web service"], "original_id": "5-1_active_vos_tutorial-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The customer receives feedback from the assessor or approver.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 56, "total_costs": 0.0051, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- receives feedback\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\treceives feedback."], "original_id": "5-1_active_vos_tutorial-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As a basic principle, ACME AG receives invoices on paper or fax.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 29, "total_costs": 0.004715, "answers": ["1. Actions:\n- receives invoices\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\treceives invoices."], "original_id": "6-1_acme-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: These are received by the Secretariat in the central inbox and forwarded after a short visual inspection to an accounting employee.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 63, "total_costs": 0.00526, "answers": ["Sentence 0: These are received by the Secretariat in the central inbox and forwarded after a short visual inspection to an accounting employee.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\treceived by the Secretariat in the central inbox\tforwarded after a short visual inspection to an accounting employee"], "original_id": "6-1_acme-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In \"ACME Financial Accounting\", a software specially developed for the ACME AG, she identifies the charging suppliers and creates a new instance (invoice).\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 871, "output_tokens": 71, "total_costs": 0.00542, "answers": ["Sentence 0: In \"ACME Financial Accounting\", a software specially developed for the ACME AG, she identifies the charging suppliers and creates a new instance (invoice).\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tidentifies the charging suppliers\t\n0\tFALSE\texistence\tcreates a new instance (invoice)\t"], "original_id": "6-1_acme-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: She then checks the invoice items and notes the corresponding cost center at the ACME AG and the related cost center managers for each position on a separate form (\"docket\").\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 875, "output_tokens": 100, "total_costs": 0.005875, "answers": ["Sentence 0: She then checks the invoice items and notes the corresponding cost center at the ACME AG and the related cost center managers for each position on a separate form (\"docket\").\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tchecks the invoice items\t\n0\tFALSE\texistence\tnotes the corresponding cost center at the ACME AG\t\n0\tFALSE\texistence\tnotes the related cost center managers for each position on a separate form (\"docket\")"], "original_id": "6-1_acme-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The docket and the copy of the invoice go to the internal mail together and are sent to the first cost center manager to the list.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 868, "output_tokens": 53, "total_costs": 0.005135, "answers": ["1. Identify actions:\n- go to the internal mail\n- are sent to the first cost center manager\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tsuccession\tgo to the internal mail\tare sent to the first cost center manager"], "original_id": "6-1_acme-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: He reviews the content for accuracy after receiving the copy of the invoice.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 49, "total_costs": 0.0050100000000000006, "answers": ["Sentence 0: He reviews the content for accuracy after receiving the copy of the invoice.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\treceiving the copy of the invoice\treviews the content for accuracy"], "original_id": "6-1_acme-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Should everything be in order, he notes his code one on the docket (\"accurate position - AP\") and returns the copy of the invoice to the internal mail.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 874, "output_tokens": 88, "total_costs": 0.00569, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- notes his code one on the docket\n- returns the copy of the invoice to the internal mail\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tnotes his code one on the docket\treturns the copy of the invoice to the internal mail"], "original_id": "6-1_acme-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: From it, the copy of the invoice is passed on to the next cost center manager, based on the docket, or if all items are marked correct, sent back to accounting.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 877, "output_tokens": 57, "total_costs": 0.00524, "answers": ["1. Actions:\n- passed on (copy of the invoice)\n- sent back (copy of the invoice)\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tpassed on (copy of the invoice)\tsent back (copy of the invoice)"], "original_id": "6-1_acme-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Therefore, the copy of invoice and the docket gradually move through the hands of all cost center managers until all positions are marked as completely accurate.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 869, "output_tokens": 79, "total_costs": 0.00553, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- move through the hands of all cost center managers\n- marked as completely accurate\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tsuccession\tmove through the hands of all cost center managers\tmarked as completely accurate"], "original_id": "6-1_acme-1-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: However, if inconsistencies exist, e.g. because the ordered product is not of the expected quantity or quality, the cost center manager rejects the AP with a note and explanatory statement on the docket, and the copy of the invoice is sent back to accounting directly.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 894, "output_tokens": 75, "total_costs": 0.005595, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\n- rejects the AP\n- sends back the copy of the invoice to accounting\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\trejects the AP\tsends back the copy of the invoice to accounting"], "original_id": "6-1_acme-1-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Based on the statements of the cost center managers, she will proceede with the clarification with the vendor, but, if necessary, she consults the cost center managers by telephone or e-mail again.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 882, "output_tokens": 108, "total_costs": 0.00603, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- proceede with the clarification with the vendor\n- consults the cost center managers by telephone or e-mail\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tproceede with the clarification with the vendor\t\n0\tFALSE\tprecedence\tproceede with the clarification with the vendor\tconsults the cost center managers by telephone or e-mail"], "original_id": "6-1_acme-1-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When all inconsistencies are resolved, the copy of the invoice is sent to the cost center managers again, and the process continues.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 867, "output_tokens": 72, "total_costs": 0.005415, "answers": ["1. Actions:\n- resolve inconsistencies\n- send copy of the invoice to the cost center managers\n- continue process\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tresolve inconsistencies\tsend copy of the invoice to the cost center managers\n0\tFALSE\tprecedence\tsend copy of the invoice to the cost center managers\tcontinue process"], "original_id": "6-1_acme-1-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After all invoice items are AP, the accounting employee forwards the copy of the invoice to the commercial manager.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 46, "total_costs": 0.005, "answers": ["1. Identified actions:\n- forwards the copy of the invoice to the commercial manager\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tforwards the copy of the invoice to the commercial manager."], "original_id": "6-1_acme-1-12"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: He makes the commercial audit and issues the approval for payment.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 49, "total_costs": 0.004999999999999999, "answers": ["Sentence 0: He makes the commercial audit and issues the approval for payment.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tmakes the commercial audit\t\n0\tFALSE\texistence\tissues the approval for payment"], "original_id": "6-1_acme-1-13"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the bill amount exceeds EUR 20,000, the Board wants to check it again (4-eyes-principle).\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 867, "output_tokens": 55, "total_costs": 0.0051600000000000005, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- check it again\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tcheck it again"], "original_id": "6-1_acme-1-14"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The copy of the invoice including the docket moves back to the accounting employee in the appropriate signature file.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 53, "total_costs": 0.0050999999999999995, "answers": ["Sentence 0: The copy of the invoice including the docket moves back to the accounting employee in the appropriate signature file.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tmoves back to the accounting employee in the appropriate signature file."], "original_id": "6-1_acme-1-15"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Should there be a complaint during the commercial audit, it will be resolved by the accounting employee with the supplier.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 53, "total_costs": 0.00511, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- resolve complaint\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tresolve complaint"], "original_id": "6-1_acme-1-16"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After the commercial audit is successfully completed, the accounting employee gives payment instructions and closes the instance in \"ACME financial accounting\".\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 866, "output_tokens": 84, "total_costs": 0.0055899999999999995, "answers": ["Sentence 0: After the commercial audit is successfully completed, the accounting employee gives payment instructions and closes the instance in \"ACME financial accounting\".\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcommercial audit is successfully completed\taccounting employee gives payment instructions\n0\tFALSE\tprecedence\taccounting employee gives payment instructions\taccounting employee closes the instance in \"ACME financial accounting\""], "original_id": "6-1_acme-1-17"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: First, the Manager checks the open leads.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 33, "total_costs": 0.004745, "answers": ["Sentence 0: First, the Manager checks the open leads.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\tchecks the open leads"], "original_id": "7-1_calling_leads-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, he selects the top five ones.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 35, "total_costs": 0.004775000000000001, "answers": ["Sentence 0: Afterwards, he selects the top five ones.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tselects the top five ones"], "original_id": "7-1_calling_leads-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: He then tells his Sales Assistant to call the contact person of the leads.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 49, "total_costs": 0.005015, "answers": ["He then tells his Sales Assistant to call the contact person of the leads.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\ttells his Sales Assistant\n0\tFALSE\texistence\tcall the contact person of the leads"], "original_id": "7-1_calling_leads-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The Sales Assistant calls each customer.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 848, "output_tokens": 28, "total_costs": 0.00466, "answers": ["The Sales Assistant calls each customer.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tcalls each customer."], "original_id": "7-1_calling_leads-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If someone is interested, he sends a note to the Manager.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 43, "total_costs": 0.004915, "answers": ["Sentence 0: If someone is interested, he sends a note to the Manager.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tsends a note to the Manager\tis interested"], "original_id": "7-1_calling_leads-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The Manager then processes the lead.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 848, "output_tokens": 31, "total_costs": 0.004705, "answers": ["Sentence 0: The Manager then processes the lead.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tprocesses the lead"], "original_id": "7-1_calling_leads-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Otherwise, he calls the next customer.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 849, "output_tokens": 33, "total_costs": 0.004739999999999999, "answers": ["Sentence 0: Otherwise, he calls the next customer.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tcalls the next customer"], "original_id": "7-1_calling_leads-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 849, "output_tokens": 32, "total_costs": 0.004725, "answers": ["Sentence 0: The process starts by reviewing the order.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\treviewing the order"], "original_id": "784358570_rev2-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The staff should check if all the requested items are available.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 35, "total_costs": 0.00479, "answers": ["Sentence 0: The staff should check if all the requested items are available.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tcheck requested items"], "original_id": "784358570_rev2-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 51, "total_costs": 0.0050750000000000005, "answers": ["Sentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tinform customer about a potential delay\torder the missing products"], "original_id": "784358570_rev2-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the exceptional case of a discontinued item, the customer should be informed about the not longer available items.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 50, "total_costs": 0.00506, "answers": ["Sentence 0: In the exceptional case of a discontinued item, the customer should be informed about the not longer available items.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tinformed about the not longer available items."], "original_id": "784358570_rev2-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After waiting an average of x days for the delivery, the staff should check again if all products are on store.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 65, "total_costs": 0.005295, "answers": ["1. Actions:\n- waiting an average of x days for the delivery\n- check again if all products are on store\n\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\twaiting an average of x days for the delivery\t\n0\tFALSE\texistence\tcheck again if all products are on store"], "original_id": "784358570_rev2-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If everything is OK, then the staff recollects all products and prepare a package.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 46, "total_costs": 0.004985, "answers": ["Sentence 0: If everything is OK, then the staff recollects all products and prepare a package.\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\trecollects all products\tprepare a package"], "original_id": "784358570_rev2-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The courier is then informed about the pre-processed package.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 40, "total_costs": 0.0048649999999999995, "answers": ["Sentence 0: The courier is then informed about the pre-processed package.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tinformed about the pre-processed package"], "original_id": "784358570_rev2-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The courier company informs the client about a potential delay until there are enough human resources to process the delivery.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 48, "total_costs": 0.005030000000000001, "answers": ["Sentence 0: The courier company informs the client about a potential delay until there are enough human resources to process the delivery.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tinforms the client\tprocess the delivery"], "original_id": "784358570_rev2-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Then, the package is picked up by the designed driver.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 37, "total_costs": 0.00482, "answers": ["Sentence 0: Then, the package is picked up by the designed driver.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tpicked up the package"], "original_id": "784358570_rev2-1-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A centralized service decides the best route to deliver all driver's packages.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 44, "total_costs": 0.00493, "answers": ["Sentence 0: A centralized service decides the best route to deliver all driver's packages.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tdecides the best route to deliver all driver's packages"], "original_id": "784358570_rev2-1-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the driver delivers the package, she should update the system so all stakeholders are notified.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 58, "total_costs": 0.005165, "answers": ["Sentence 0: Once the driver delivers the package, she should update the system so all stakeholders are notified.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tdelivers the package\tupdate the system\n0\tFALSE\tresponse\tupdate the system\tnotify all stakeholders"], "original_id": "784358570_rev2-1-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process is triggered by the demand of a functional department to fill a post.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 37, "total_costs": 0.00484, "answers": ["Sentence 0: The process is triggered by the demand of a functional department to fill a post.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\ttrigger process"], "original_id": "8-1_hr_process_simple-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The post is advertised, applicants apply, the applications are checked and the post is filled.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 99, "total_costs": 0.00578, "answers": ["Sentence 0: The post is advertised, applicants apply, the applications are checked and the post is filled.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tadvertised\t\n0\tFALSE\texistence\tapply\t\n0\tFALSE\texistence\tchecked\t\n0\tFALSE\texistence\tfilled\t\n0\tFALSE\tprecedence\tadvertised\tapply\n0\tFALSE\tprecedence\tapply\tchecked\n0\tFALSE\tprecedence\tchecked\tfilled"], "original_id": "8-1_hr_process_simple-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process finishes when the post was filled, precisely through the conclusion of a contract of employment.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 69, "total_costs": 0.005335, "answers": ["1. First, identify actions contained in the input sentence:\n- finishes (process)\n- filled (post)\n- conclusion (contract of employment)\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tend\tfinishes\t\n0\tFALSE\tprecedence\tfilled\tfinishes\n0\tFALSE\tprecedence\tconclusion\tfinishes"], "original_id": "8-1_hr_process_simple-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The Customer Service Representative sends a Mortgage offer to the customer and waits for a reply.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 54, "total_costs": 0.0051, "answers": ["Sentence 0: The Customer Service Representative sends a Mortgage offer to the customer and waits for a reply.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tsends a Mortgage offer\t\n0\tFALSE\texistence\twaits for a reply\t"], "original_id": "9-2_exercise_2-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer calls or writes back declining the mortgage, the case details are updated and the work is then archived prior to cancellation.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 867, "output_tokens": 121, "total_costs": 0.00615, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- customer calls\n- customer writes back declining the mortgage\n- case details are updated\n- work is archived\n- cancellation\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tcustomer calls\tcase details are updated\n0\tFALSE\tprecedence\tcustomer writes back declining the mortgage\tcase details are updated\n0\tFALSE\tresponse\tcase details are updated\twork is archived\n0\tFALSE\tprecedence\twork is archived\tcancellation"], "original_id": "9-2_exercise_2-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer sends back the completed offer documents and attaches all prerequisite documents then the case is moved to administration for completion.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 865, "output_tokens": 75, "total_costs": 0.00545, "answers": ["Sentence 0: If the customer sends back the completed offer documents and attaches all prerequisite documents then the case is moved to administration for completion.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tsends back the completed offer documents\tattaches all prerequisite documents\n0\tFALSE\tresponse\tattaches all prerequisite documents\tis moved to administration for completion"], "original_id": "9-2_exercise_2-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If all pre-requisite documents are not provided a message is generated to the customer requesting outstanding documents.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 58, "total_costs": 0.005175, "answers": ["Sentence 0: If all pre-requisite documents are not provided a message is generated to the customer requesting outstanding documents.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tprovide all pre-requisite documents\tgenerate a message to the customer requesting outstanding documents"], "original_id": "9-2_exercise_2-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If no answer is received after 2 weeks, the case details are updated prior to archive and cancellation.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 100, "total_costs": 0.005810000000000001, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- receive answer\n- update case details\n- archive case details\n- cancel case details\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\treceive answer\tupdate case details\n0\tFALSE\tprecedence\tupdate case details\tarchive case details\n0\tFALSE\tprecedence\tupdate case details\tcancel case details"], "original_id": "9-2_exercise_2-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it can be approved or rejected.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 52, "total_costs": 0.0050550000000000005, "answers": ["Sentence 0: A claim must be created, before it can be approved or rejected.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n0\tFALSE\tprecedence\tcreate claim\treject claim"], "original_id": "datacollection_1-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be approved before it can be paid out.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 40, "total_costs": 0.0048649999999999995, "answers": ["Sentence 0: A claim should be approved before it can be paid out.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tapprove claim\tpay out claim"], "original_id": "datacollection_1-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 42, "total_costs": 0.0049050000000000005, "answers": ["Sentence 0: Once a claim has been approved, it should eventually be paid out.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tapprove claim\tpay out claim"], "original_id": "datacollection_1-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 47, "total_costs": 0.00498, "answers": ["1. First, identify actions contained in the input sentence:\n- reject claim\n- pay out claim\n\n#-#-#RESULT#-#-#\n\n0\tTRUE\tnoncooccurrence\treject claim\tpay out claim"], "original_id": "datacollection_1-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 42, "total_costs": 0.00489, "answers": ["Sentence 0: Payout should end the process and therefore exclude everything.\n#-#-#RESULT#-#-#\n0\tFALSE\tend\tPayout\t\n0\tTRUE\tabsence\texclude everything\t"], "original_id": "datacollection_1-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A case can be closed manually at any time, unless we still need to pay out the claim.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 54, "total_costs": 0.005115, "answers": ["1. First, identify actions contained in the input sentence:\n- close case\n- pay out claim\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tclose case\t\n0\tTRUE\tnoncooccurrence\tclose case\tpay out claim"], "original_id": "datacollection_1-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case can be managed at the union after it has been created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 49, "total_costs": 0.0050100000000000006, "answers": ["1. First, identify actions contained in the input sentence:\n- managed (case)\n- created (case)\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tcreated (case)\tmanaged (case)"], "original_id": "datacollection_1-2-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 865, "output_tokens": 83, "total_costs": 0.00557, "answers": ["Sentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tcreate case\t\n0\tFALSE\texistence\tarrange meeting between union case worker and other case worker\t\n0\tFALSE\tprecedence\tcreate case\tarrange meeting between union case worker and other case worker"], "original_id": "datacollection_1-2-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 35, "total_costs": 0.00478, "answers": ["Sentence 0: After a meeting is arranged it must be held.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tarranged meeting\theld meeting"], "original_id": "datacollection_1-2-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 868, "output_tokens": 125, "total_costs": 0.006215, "answers": ["1. Actions:\n- enter metadata on the case\n- inform about when he is available for participating in a meeting\n- submit the case\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tenter metadata on the case\tinform about when he is available for participating in a meeting\n0\tFALSE\tprecedence\tinform about when he is available for participating in a meeting\tsubmit the case\n0\tFALSE\texistence\tenter metadata on the case\t\n0\tFALSE\texistence\tinform about when he is available for participating in a meeting\t\n0\tFALSE\texistence\tsubmit the case"], "original_id": "datacollection_1-2-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted it may get a local id at the union, but it should also subsequently be assigned a case id in LO.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 869, "output_tokens": 86, "total_costs": 0.005634999999999999, "answers": ["Sentence 0: When a case is submitted it may get a local id at the union, but it should also subsequently be assigned a case id in LO.\n\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tsubmitted a case\t\n0\tFALSE\tprecedence\tget a local id at the union\tsubmitted a case\n0\tFALSE\tresponse\tsubmitted a case\tassigned a case id in LO"], "original_id": "datacollection_1-2-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 37, "total_costs": 0.00482, "answers": ["Sentence 0: When a case is submitted, LO should eventually propose dates.\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tsubmitted case\tpropose dates"], "original_id": "datacollection_1-2-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after LO has assigned its case id it is possible to manage the case and for LO to propose dates.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 57, "total_costs": 0.00517, "answers": ["1. Identified actions:\n- assign case id\n- manage the case\n- propose dates\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tassign case id\tmanage the case\n0\tFALSE\tprecedence\tassign case id\tpropose dates"], "original_id": "datacollection_1-2-12"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a date has been agreed upon a meeting should eventually be held.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 44, "total_costs": 0.004935, "answers": ["Sentence 0: Once a date has been agreed upon a meeting should eventually be held.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tagree upon a date\thold a meeting"], "original_id": "datacollection_1-2-13"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 33, "total_costs": 0.004745, "answers": ["Sentence 0: Every process instance starts by examining a patient.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\texamining a patient"], "original_id": "datacollection_1-6-14"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an x-ray is taken, then the x-ray risk must be checked before it\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 47, "total_costs": 0.005, "answers": ["Sentence 0: If an x-ray is taken, then the x-ray risk must be checked before it\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcheck x-ray risk\ttake x-ray"], "original_id": "datacollection_1-6-15"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Performing a reposition, applying a cast and performing surgery require that x-rays are performed before.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 75, "total_costs": 0.00542, "answers": ["Performing a reposition\napplying a cast\nperforming surgery\nx-rays are performed\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tx-rays are performed\tPerforming a reposition\n0\tFALSE\tprecedence\tx-rays are performed\tapplying a cast\n0\tFALSE\tprecedence\tx-rays are performed\tperforming surgery"], "original_id": "datacollection_1-6-16"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 41, "total_costs": 0.004895, "answers": ["Sentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tperform surgery\tprescribe rehabilitation"], "original_id": "datacollection_1-6-17"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 869, "output_tokens": 73, "total_costs": 0.0054399999999999995, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- apply cast\n- remove cast\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tsuccession\tapply cast\tremove cast\n0\tFALSE\tprecedence\tapply cast\tremove cast"], "original_id": "datacollection_1-6-18"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process begins with the booking of the ticket\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 34, "total_costs": 0.004765, "answers": ["Sentence 0: The process begins with the booking of the ticket\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\tbooking of the ticket"], "original_id": "datacollection_1-3-19"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Personal information of passengers can be provided after the booking of the ticket\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 63, "total_costs": 0.00522, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- provide personal information\n- book ticket\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tbook ticket\tprovide personal information"], "original_id": "datacollection_1-3-20"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 43, "total_costs": 0.004915, "answers": ["Sentence 0: The payment of the ticket triggers the completion of the booking phase.\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tpayment of the ticket\tcompletion of the booking phase"], "original_id": "datacollection_1-3-21"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket is eventually followed by the actual transfer of money\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 41, "total_costs": 0.004895, "answers": ["1. Actions:\n- payment of the ticket\n- transfer of money\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tpayment of the ticket\ttransfer of money"], "original_id": "datacollection_1-3-22"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 866, "output_tokens": 46, "total_costs": 0.005019999999999999, "answers": ["1. Actions:\n- Check-in of the flight\n- modify the provided data\n\n#-#-#RESULT#-#-#\n\n0\tTRUE\tnoncooccurrence\tmodify the provided data\tCheck-in of the flight"], "original_id": "datacollection_1-3-23"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After check-in of the flight, only the cancellation is admitted\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 55, "total_costs": 0.005095000000000001, "answers": ["Sentence 0: After check-in of the flight, only the cancellation is admitted\n\n1. Actions:\n- check-in of the flight\n- cancellation\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tcheck-in of the flight\tcancellation"], "original_id": "datacollection_1-3-24"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 35, "total_costs": 0.004795000000000001, "answers": ["Sentence 0: The process starts when an invoice is received by the administration department.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\treceive invoice"], "original_id": "datacollection_1-1-25"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If they decide that the invoice appears legit then they enter all relevant data into the system\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 54, "total_costs": 0.005105, "answers": ["Sentence 0: If they decide that the invoice appears legit then they enter all relevant data into the system\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tdecide that the invoice appears legit\tenter all relevant data into the system"], "original_id": "datacollection_1-1-26"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When all necessary approvals have been received the invoice can be paid.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 40, "total_costs": 0.00487, "answers": ["Sentence 0: When all necessary approvals have been received the invoice can be paid.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\treceived approvals\tpaid invoice"], "original_id": "datacollection_1-1-27"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 63, "total_costs": 0.005209999999999999, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- confirm payment\n- close invoice case\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tconfirm payment\tclose invoice case"], "original_id": "datacollection_1-1-28"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The receipt of an invoice is required before the administration department can enter data or scan the invoice.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 51, "total_costs": 0.005065, "answers": ["1. Actions:\n- receive invoice\n- enter data\n- scan invoice\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\treceive invoice\tenter data\n0\tFALSE\tprecedence\treceive invoice\tscan invoice"], "original_id": "datacollection_1-1-29"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Enter data is required before any approval can be given.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 37, "total_costs": 0.004815, "answers": ["Sentence 0: Enter data is required before any approval can be given.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tEnter data\tapproval"], "original_id": "datacollection_1-1-30"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Finally, we have to pay the invoice before we can confirm payment.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 39, "total_costs": 0.00486, "answers": ["1. Identified actions:\n- pay the invoice\n- confirm payment\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tpay the invoice\tconfirm payment"], "original_id": "datacollection_1-1-31"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a request is sent, then a proposal is expected to be prepared afterwards\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 40, "total_costs": 0.004885, "answers": ["Sentence 0: If a request is sent, then a proposal is expected to be prepared afterwards\n\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tsend request\tprepare proposal"], "original_id": "datacollection_1-4-32"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 869, "output_tokens": 72, "total_costs": 0.005424999999999999, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- give confirmation\n- propose\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tsuccession\tpropose\tgive confirmation\n0\tFALSE\tsuccession\tgive confirmation\tpropose"], "original_id": "datacollection_1-4-33"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance has to start by registering client data\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 34, "total_costs": 0.00477, "answers": ["Sentence 0: Every process instance has to start by registering client data\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\tregistering client data"], "original_id": "datacollection_1-5-34"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every provided room service must be billed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 849, "output_tokens": 33, "total_costs": 0.004739999999999999, "answers": ["Sentence 0: Every provided room service must be billed.\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tprovided room service\tbilled"], "original_id": "datacollection_1-5-35"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every provided laundry service must be billed\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 849, "output_tokens": 45, "total_costs": 0.00492, "answers": ["Sentence 0: Every provided laundry service must be billed\n\nActions:\n1. provided laundry service\n2. billed\n\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tprovided laundry service\tbilled"], "original_id": "datacollection_1-5-36"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When the client leaves, the bill must be charged\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 35, "total_costs": 0.004785, "answers": ["Sentence 0: When the client leaves, the bill must be charged\n\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tclient leaves\tbill charged"], "original_id": "datacollection_1-5-37"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be created, before it can be approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 38, "total_costs": 0.004835, "answers": ["Sentence 0: A claim should be created, before it can be approved.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection_2-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 38, "total_costs": 0.00483, "answers": ["Sentence 0: A claim must be created, before it is approved.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreated claim\tapproved claim"], "original_id": "datacollection_2-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 40, "total_costs": 0.00486, "answers": ["Sentence 0: When a claim is created, it may be approved.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tclaim is created\tclaim is approved"], "original_id": "datacollection_2-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 40, "total_costs": 0.00486, "answers": ["Sentence 0: If a claim is created, it can be approved.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tclaim is created\tclaim is approved"], "original_id": "datacollection_2-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: They have to create the claim, before they can approve it.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 40, "total_costs": 0.00487, "answers": ["Sentence 0: They have to create the claim, before they can approve it.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreate the claim\tapprove it"], "original_id": "datacollection_2-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after a claim is created, it is possible to approve the claim.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 41, "total_costs": 0.004895, "answers": ["Sentence 0: Only after a claim is created, it is possible to approve the claim.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection_2-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is approved, then it must have been created first.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 43, "total_costs": 0.00492, "answers": ["Sentence 0: If a claim is approved, then it must have been created first.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tclaim is created\tclaim is approved"], "original_id": "datacollection_2-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: To approve a claim, it should be created first.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 37, "total_costs": 0.004815, "answers": ["Sentence 0: To approve a claim, it should be created first.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection_2-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim can be approved, after it has been created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 37, "total_costs": 0.00482, "answers": ["Sentence 0: A claim can be approved, after it has been created.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreated\tapproved"], "original_id": "datacollection_2-1-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Approving the claim can happen at anytime, unless it still needs to be created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 48, "total_costs": 0.0050100000000000006, "answers": ["1. Actions:\n- Approving the claim\n- Created\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tApproving the claim\n0\tTRUE\tprecedence\tCreated\tApproving the claim"], "original_id": "datacollection_2-1-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 41, "total_costs": 0.0048850000000000005, "answers": ["Sentence 0: Creation of the claim is required, before it can be approved.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tCreation of the claim\tapproved"], "original_id": "datacollection_2-1-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The creation of the claim is a condition for the approval of the claim.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 51, "total_costs": 0.005045, "answers": ["1. First, identify actions contained in the input sentence:\n- creation of the claim\n- approval of the claim\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tcreation of the claim\tapproval of the claim"], "original_id": "datacollection_2-1-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after the creation of a claim, the approval of the claim is possible.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 45, "total_costs": 0.00496, "answers": ["1. Identified actions:\n- creation of a claim\n- approval of the claim\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tcreation of a claim\tapproval of the claim"], "original_id": "datacollection_2-1-12"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When approval of the claim occurs, creation of the claim must have preceded.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 70, "total_costs": 0.00533, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- approval of the claim\n- creation of the claim\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tapproval of the claim\tcreation of the claim"], "original_id": "datacollection_2-1-13"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If approval of the claim occurs, then creation of the claim must have been carried out first.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 50, "total_costs": 0.00505, "answers": ["Sentence 0: If approval of the claim occurs, then creation of the claim must have been carried out first.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreation of the claim\tapproval of the claim"], "original_id": "datacollection_2-1-14"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim requires that the creation of the claim occurs before it.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 43, "total_costs": 0.0049299999999999995, "answers": ["1. Actions:\n- approval of the claim\n- creation of the claim\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tcreation of the claim\tapproval of the claim"], "original_id": "datacollection_2-1-15"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim should be preceded by the creation of the claim.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 45, "total_costs": 0.004955, "answers": ["1. Identified actions:\n- creation of the claim\n- approval of the claim\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tcreation of the claim\tapproval of the claim"], "original_id": "datacollection_2-1-16"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The Police Report related to the car accident is searched within the Police Report database and put in a file together with the Claim Documentation.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 867, "output_tokens": 63, "total_costs": 0.00528, "answers": ["Sentence 0: The Police Report related to the car accident is searched within the Police Report database and put in a file together with the Claim Documentation.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tsearched within the Police Report database\tput in a file together with the Claim Documentation"], "original_id": "datacollection_3-claimscreation.txt-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A customer brings in a defective computer and the manager analyzes the defect and gives back an invoice.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 67, "total_costs": 0.005305, "answers": ["1. Actions:\n- brings in a defective computer\n- analyzes the defect\n- gives back an invoice\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tsuccession\tbrings in a defective computer\tanalyzes the defect\n0\tFALSE\tsuccession\tanalyzes the defect\tgives back an invoice"], "original_id": "datacollection_3-Model1-2.txt-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 35, "total_costs": 0.004795000000000001, "answers": ["Sentence 0: After each of these activities, the proper system functionality is tested.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\ttest functionality"], "original_id": "datacollection_3-Model1-2.txt-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an error is detected, another arbitrary repair activity is executed, otherwise the repair is finished.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 81, "total_costs": 0.005515, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- detect error\n- execute repair activity\n- finish repair\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tdetect error\texecute repair activity\n0\tTRUE\tprecedence\tdetect error\tfinish repair"], "original_id": "datacollection_3-Model1-2.txt-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a claim is registered, it is examined by a claims officer.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 40, "total_costs": 0.004875, "answers": ["Sentence 0: After a claim is registered, it is examined by a claims officer.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tregister claim\texamine claim"], "original_id": "datacollection_3-Model3-3.txt-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This recommendation is then checked by a senior claims officer who may mark the claim as OK or Not OK.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 62, "total_costs": 0.005240000000000001, "answers": ["1. Actions:\n- check recommendation\n- mark claim as OK\n- mark claim as Not OK\n\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tcheck recommendation\t\n0\tFALSE\texistence\tmark claim as OK\t\n0\tFALSE\texistence\tmark claim as Not OK"], "original_id": "datacollection_3-Model3-3.txt-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is marked as Not OK, it is sent back to the claims officer and the recommendation is repeated.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 71, "total_costs": 0.005385, "answers": ["Sentence 0: If the claim is marked as Not OK, it is sent back to the claims officer and the recommendation is repeated.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tmarked as Not OK\tsent back to the claims officer\n0\tFALSE\tresponse\tmarked as Not OK\trecommendation is repeated"], "original_id": "datacollection_3-Model3-3.txt-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is OK, the claim handling process proceeds.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 41, "total_costs": 0.00488, "answers": ["Sentence 0: If the claim is OK, the claim handling process proceeds.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tclaim is OK\tclaim handling process proceeds"], "original_id": "datacollection_3-Model3-3.txt-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 67, "total_costs": 0.005325, "answers": ["Sentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\tbuying new hardware\n0\tFALSE\tprecedence\treceiving a request for new hardware\tbuying new hardware"], "original_id": "datacollection_3-472026493_rev3.txt-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The next step is for the IT department to analyse the request and either approve or deny it.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 60, "total_costs": 0.0052, "answers": ["1. First, identify actions contained in the input sentence:\n- analyse the request\n- approve it\n- deny it\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tanalyse the request\n0\tFALSE\tnoncooccurrence\tapprove it\tdeny it"], "original_id": "datacollection_3-472026493_rev3.txt-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 52, "total_costs": 0.005085, "answers": ["1. Actions:\n- denied\n- informed via email about the denial\n- ended\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tdenied\tinformed via email about the denial\n0\tFALSE\tend\tended"], "original_id": "datacollection_3-472026493_rev3.txt-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: However, if the request is approved it is edited and completed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 51, "total_costs": 0.005035, "answers": ["Sentence 0: However, if the request is approved it is edited and completed.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\trequest is approved\trequest is edited\n0\tFALSE\tresponse\trequest is approved\trequest is completed"], "original_id": "datacollection_3-472026493_rev3.txt-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 76, "total_costs": 0.005430000000000001, "answers": ["Sentence 0: Once this offer is received, a form is filled in and sent to the management.\n\nActions:\n1. receive offer\n2. fill in form\n3. send form to management\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\treceive offer\tfill in form\n0\tFALSE\tresponse\tfill in form\tsend form to management"], "original_id": "datacollection_3-472026493_rev3.txt-12"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The management then analyses the request and decides if it is approved or not.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 48, "total_costs": 0.005, "answers": ["1. Actions:\n- analyses the request\n- decides if it is approved or not\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tanalyses the request\tdecides if it is approved or not"], "original_id": "datacollection_3-472026493_rev3.txt-13"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When this is accepted and the financial resources are found, the hardware is received by the IT department.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 51, "total_costs": 0.00507, "answers": ["When this is accepted and the financial resources are found, the hardware is received by the IT department.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\taccepted\treceived\n0\tFALSE\tprecedence\tfound\treceived"], "original_id": "datacollection_3-472026493_rev3.txt-14"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 54, "total_costs": 0.0051, "answers": ["1. Identified actions:\n- take care of the invoice\n- processes is ended\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tend\tprocesses is ended\n0\tFALSE\tprecedence\ttake care of the invoice\tprocesses is ended"], "original_id": "datacollection_3-472026493_rev3.txt-15"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the scenario where the management does not approve the request, it can send the request back to the IT department for rework, then the IT department has to go back to editing and completing a request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 882, "output_tokens": 76, "total_costs": 0.005549999999999999, "answers": ["1. Actions:\n- approve the request\n- send the request back to the IT department for rework\n- go back to editing and completing a request\n\n#-#-#RESULT#-#-#\n\n0\tTRUE\tabsence\tapprove the request\n0\tFALSE\tresponse\tsend the request back to the IT department for rework\tgo back to editing and completing a request"], "original_id": "datacollection_3-472026493_rev3.txt-16"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 865, "output_tokens": 53, "total_costs": 0.0051199999999999996, "answers": ["1. Identified actions:\n- approve the request\n- deny the request\n- end the process\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tdeny the request\tend the process\n0\tFALSE\tend\tend the process"], "original_id": "datacollection_3-472026493_rev3.txt-17"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The loan approval process starts by receiving a customer request for a loan amount.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 45, "total_costs": 0.004955, "answers": ["Sentence 0: The loan approval process starts by receiving a customer request for a loan amount.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\treceiving a customer request for a loan amount."], "original_id": "datacollection_3-Model5-1.txt-18"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer needs further review or the loan amount is for \\$10,000 or more, the request is sent to the approver Web service.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 871, "output_tokens": 114, "total_costs": 0.006065, "answers": ["Sentence 0: If the customer needs further review or the loan amount is for $10,000 or more, the request is sent to the approver Web service.\n\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tneeds further review\t\n0\tFALSE\texistence\tloan amount is for $10,000 or more\t\n0\tFALSE\tresponse\tneeds further review\trequest is sent to the approver Web service\n0\tFALSE\tresponse\tloan amount is for $10,000 or more\trequest is sent to the approver Web service"], "original_id": "datacollection_3-Model5-1.txt-19"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of an Office Supply Request starts when any employee of the organization submits an office supply request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 45, "total_costs": 0.00498, "answers": ["Sentence 0: The process of an Office Supply Request starts when any employee of the organization submits an office supply request.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\tsubmits an office supply request"], "original_id": "datacollection_3-Model5-3.txt-20"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the office supplies.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 34, "total_costs": 0.004825, "answers": ["1. Actions:\n- register requirement\n- receive request\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tregister requirement\treceive request"], "original_id": "datacollection_3-Model5-3.txt-21"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 33, "total_costs": 0.004755, "answers": ["Sentence 0: If the request is rejected, the process will end.\n#-#-#RESULT#-#-#\n0\tFALSE\tend\trequest is rejected"], "original_id": "datacollection_3-Model5-3.txt-22"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is asked to make a change, then it is returned to the petitioner who can review the comments for the change request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 868, "output_tokens": 72, "total_costs": 0.0054199999999999995, "answers": ["Sentence 0: If the request is asked to make a change, then it is returned to the petitioner who can review the comments for the change request.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tmake a change\treturned to the petitioner\n0\tFALSE\tprecedence\treturned to the petitioner\treview the comments"], "original_id": "datacollection_3-Model5-3.txt-23"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, it will go to the purchase department that will be in charge of making quotations (using a subprocess) and select a vendor.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 872, "output_tokens": 105, "total_costs": 0.005935, "answers": ["Sentence 0: If the request is approved, it will go to the purchase department that will be in charge of making quotations (using a subprocess) and select a vendor.\n\nActions:\n1. approve request\n2. go to purchase department\n3. make quotations\n4. select vendor\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tapprove request\tgo to purchase department\n0\tFALSE\tresponse\tgo to purchase department\tmake quotations\n0\tFALSE\tresponse\tgo to purchase department\tselect vendor"], "original_id": "datacollection_3-Model5-3.txt-24"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a vendor is selected and confirmed, the system will generate and send a purchase order and wait for the product to be delivered and the invoice received.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 871, "output_tokens": 112, "total_costs": 0.006035, "answers": ["Sentence 0: After a vendor is selected and confirmed, the system will generate and send a purchase order and wait for the product to be delivered and the invoice received.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tselect vendor\tgenerate purchase order\n0\tFALSE\tprecedence\tconfirm vendor\tgenerate purchase order\n0\tFALSE\tresponse\tgenerate purchase order\tsend purchase order\n0\tFALSE\tresponse\tsend purchase order\twait for product to be delivered\n0\tFALSE\tresponse\twait for product to be delivered\twait for invoice received"], "original_id": "datacollection_3-Model5-3.txt-25"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 71, "total_costs": 0.0053750000000000004, "answers": ["Sentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tapproval\t\n0\tFALSE\texistence\trejection\t\n0\tFALSE\texistence\tchange required\t\n0\tFALSE\texistence\tsend the user a notification\t"], "original_id": "datacollection_3-Model5-3.txt-26"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 38, "total_costs": 0.004845, "answers": ["Sentence 0: The process starts when any employee of the organization submits a vacation request.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\tsubmits a vacation request"], "original_id": "datacollection_3-Model5-2.txt-27"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the vacation.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 34, "total_costs": 0.0048200000000000005, "answers": ["1. Actions:\n- register requirement\n- receive request\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tregister requirement\treceive request"], "original_id": "datacollection_3-Model5-2.txt-28"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the application is returned to the applicant/employee who can review the rejection reasons.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 83, "total_costs": 0.005560000000000001, "answers": ["1. Actions:\n- request is rejected\n- application is returned to the applicant/employee\n- applicant/employee can review the rejection reasons\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\trequest is rejected\tapplication is returned to the applicant/employee\n0\tFALSE\tprecedence\tapplication is returned to the applicant/employee\tapplicant/employee can review the rejection reasons"], "original_id": "datacollection_3-Model5-2.txt-29"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 865, "output_tokens": 68, "total_costs": 0.005345, "answers": ["Sentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\trequest is approved\tnotification is generated\n0\tFALSE\tresponse\tnotification is generated\tHuman Resources Representative completes the respective management procedures"], "original_id": "datacollection_3-Model5-2.txt-30"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 849, "output_tokens": 32, "total_costs": 0.004725, "answers": ["Sentence 0: The process starts by reviewing the order.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\treviewing the order"], "original_id": "datacollection_3-784358570_rev2.txt-31"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 51, "total_costs": 0.0050750000000000005, "answers": ["Sentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tinform customer about a potential delay\torder the missing products"], "original_id": "datacollection_3-784358570_rev2.txt-32"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After waiting an average of x days for the delivery, the staff should check again if all products are on store.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 81, "total_costs": 0.005535, "answers": ["1. First, identify actions contained in the input sentence (a description how you can identify actions is given in ACTIONS (Def.) above).\n\nActions:\n- waiting (for the delivery)\n- check (if all products are on store)\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\twaiting (for the delivery)\tcheck (if all products are on store)"], "original_id": "datacollection_3-784358570_rev2.txt-33"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The courier company informs the client about a potential delay until there are enough human resources to process the delivery.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 49, "total_costs": 0.005045000000000001, "answers": ["Sentence 0: The courier company informs the client about a potential delay until there are enough human resources to process the delivery.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tinforms the client\tprocess the delivery"], "original_id": "datacollection_3-784358570_rev2.txt-34"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the driver delivers the package, she should update the system so all stakeholders are notified.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 58, "total_costs": 0.005165, "answers": ["Sentence 0: Once the driver delivers the package, she should update the system so all stakeholders are notified.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tdelivers the package\tupdate the system\n0\tFALSE\tresponse\tdelivers the package\tupdate the system"], "original_id": "datacollection_3-784358570_rev2.txt-35"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 55, "total_costs": 0.005105, "answers": ["Sentence 0: Whenever the sales department receives an order, a new process instance is created.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\treceives an order\n0\tFALSE\tresponse\treceives an order\tcreated a new process instance"], "original_id": "datacollection_3-BicycleManufacturing.txt-36"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 873, "output_tokens": 94, "total_costs": 0.005775, "answers": ["Sentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tstorehouse has successfully reserved or back-ordered every item of the part list\tengineering department assembles the bicycle\n0\tFALSE\tprecedence\tpreparation activity has finished\tengineering department assembles the bicycle"], "original_id": "datacollection_3-BicycleManufacturing.txt-37"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 55, "total_costs": 0.005115000000000001, "answers": ["1. Identified actions:\n- ships the bicycle\n- finishes the process instance\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tships the bicycle\tfinishes the process instance\n0\tFALSE\tend\tfinishes the process instance"], "original_id": "datacollection_3-BicycleManufacturing.txt-38"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 50, "total_costs": 0.005065, "answers": ["Sentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tassess the risk of the credit"], "original_id": "datacollection_3-20818304_rev1.txt-39"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After the approval request, the credit could be accepted or rejected\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 54, "total_costs": 0.00508, "answers": ["1. Identified actions:\n- approval request\n- credit accepted\n- credit rejected\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tapproval request\tcredit accepted\n0\tFALSE\tprecedence\tapproval request\tcredit rejected"], "original_id": "datacollection_3-20818304_rev1.txt-40"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 39, "total_costs": 0.004875000000000001, "answers": ["Sentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\trequest approval"], "original_id": "datacollection_3-20818304_rev1.txt-41"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 62, "total_costs": 0.0052450000000000005, "answers": ["Sentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\trequested amount is lower or equal to 1M$\tassess the risk of the credit"], "original_id": "datacollection_3-20818304_rev1.txt-42"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 38, "total_costs": 0.00485, "answers": ["Sentence 0: As soon as an employee files an expense report, the process is started.\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\tfiles an expense report"], "original_id": "datacollection_3-348018817_rev1.txt-43"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 57, "total_costs": 0.00516, "answers": ["1. Actions:\n- receive expense report\n- perform check\n- make sure employee has account\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\treceive expense report\tperform check\n0\tFALSE\tresponse\tperform check\tmake sure employee has account"], "original_id": "datacollection_3-348018817_rev1.txt-44"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 866, "output_tokens": 57, "total_costs": 0.0051849999999999995, "answers": ["Sentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n\n#-#-#RESULT#-#-#\n0\tTRUE\tabsence\tcheck\n0\tFALSE\tresponse\tprocess is stopped\tsubmit email"], "original_id": "datacollection_3-348018817_rev1.txt-45"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: First, the supervisor approves within 7 days, this will result in the deposit of the reimbursement directly to the employee's bank account.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 868, "output_tokens": 79, "total_costs": 0.005525, "answers": ["First, the supervisor approves within 7 days, this will result in the deposit of the reimbursement directly to the employee's bank account.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tsupervisor approves\tdeposit of the reimbursement directly to the employee's bank account\n0\tFALSE\tresponse\tsupervisor approves\tdeposit of the reimbursement directly to the employee's bank account"], "original_id": "datacollection_3-348018817_rev1.txt-46"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Second, the supervisor rejects within 7 days, as a result the employee receives a notification through email that the request has been rejected.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 868, "output_tokens": 73, "total_costs": 0.005435, "answers": ["Sentence 0: Second, the supervisor rejects within 7 days, as a result the employee receives a notification through email that the request has been rejected.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tthe supervisor rejects\tthe employee receives a notification through email\n0\tFALSE\tresponse\tthe supervisor rejects\tthe employee receives a notification through email"], "original_id": "datacollection_3-348018817_rev1.txt-47"}]}, {"meta": {"num_shots": 0, "model": "gpt-4o-2024-05-13", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Third, if it takes the supervisor more than 7 days to respond, an email is sent to the employee informing him/her that the approval is in progress and the part of the processes after a supervisor is asked for approval is repeated.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 888, "output_tokens": 137, "total_costs": 0.006495000000000001, "answers": ["1. Identify actions:\n- takes the supervisor more than 7 days to respond\n- an email is sent to the employee\n- informing him/her that the approval is in progress\n- the part of the processes after a supervisor is asked for approval is repeated\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\ttakes the supervisor more than 7 days to respond\tan email is sent to the employee\n0\tFALSE\tresponse\tan email is sent to the employee\tinforming him/her that the approval is in progress\n0\tFALSE\tresponse\tinforming him/her that the approval is in progress\tthe part of the processes after a supervisor is asked for approval is repeated"], "original_id": "datacollection_3-348018817_rev1.txt-48"}]}]