[{"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A small company manufactures customized bicycles.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 846, "output_tokens": 29, "total_costs": 0.00933, "answers": ["A small company manufactures customized bicycles.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tmanufactures customized bicycles\t"], "original_id": "1-1_bicycle_manufacturing-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 25, "total_costs": 0.009290000000000001, "answers": ["receives an order #-#-#RESULT#-#-#\n0\tFALSE\tinit\treceives an order\t"], "original_id": "1-1_bicycle_manufacturing-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A member of the sales department can then reject or accept the order for a customized bike.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 55, "total_costs": 0.01022, "answers": ["reject the order for a customized bike\naccept the order for a customized bike\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\treject the order for a customized bike\t\n0\tFALSE\texistence\taccept the order for a customized bike\t"], "original_id": "1-1_bicycle_manufacturing-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the former case, the process instance is finished.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 31, "total_costs": 0.009430000000000001, "answers": ["In the former case, the process instance is finished.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tend\tfinish process instance\t"], "original_id": "1-1_bicycle_manufacturing-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the latter case, the storehouse and the engineering department are informed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 48, "total_costs": 0.009980000000000001, "answers": ["In the latter case, the storehouse and the engineering department are informed.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tinform the storehouse\t\n0\tFALSE\texistence\tinform the engineering department\t"], "original_id": "1-1_bicycle_manufacturing-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The storehouse immediately processes the part list of the order and checks the required quantity of each part.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 50, "total_costs": 0.01009, "answers": ["processes the part list of the order\nchecks the required quantity of each part\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tprocesses the part list of the order\tchecks the required quantity of each part"], "original_id": "1-1_bicycle_manufacturing-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the part is available in-house, it is reserved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 33, "total_costs": 0.0095, "answers": ["If the part is available in-house, it is reserved.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tavailable in-house\treserved"], "original_id": "1-1_bicycle_manufacturing-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is not available, it is back-ordered.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 36, "total_costs": 0.00959, "answers": ["If it is not available, it is back-ordered.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tbe not available\tbe back-ordered"], "original_id": "1-1_bicycle_manufacturing-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This procedure is repeated for each item on the part list.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 31, "total_costs": 0.00944, "answers": ["This procedure is repeated for each item on the part list.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\trepeat procedure"], "original_id": "1-1_bicycle_manufacturing-1-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the meantime, the engineering department prepares everything for the assembling of the ordered bicycle.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 39, "total_costs": 0.009729999999999999, "answers": ["prepares everything for the assembling of the ordered bicycle\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tprepares everything for the assembling of the ordered bicycle\t"], "original_id": "1-1_bicycle_manufacturing-1-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 871, "output_tokens": 66, "total_costs": 0.010690000000000002, "answers": ["reserve or back-order every item of the part list\nfinish the preparation activity\nassemble the bicycle\n\n#-#-#RESULT#-#-#\n0\tFALSE\tsuccession\treserve or back-order every item of the part list\tassemble the bicycle\n0\tFALSE\tsuccession\tfinish the preparation activity\tassemble the bicycle"], "original_id": "1-1_bicycle_manufacturing-1-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 55, "total_costs": 0.01021, "answers": ["ships the bicycle to the customer\nfinishes the process instance\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tships the bicycle to the customer\tfinishes the process instance\n0\tFALSE\tend\tfinishes the process instance\t"], "original_id": "1-1_bicycle_manufacturing-1-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A customer brings in a defective computer and the CRS checks the defect and hands out a repair cost calculation back.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 71, "total_costs": 0.01074, "answers": ["A customer brings in a defective computer\nthe CRS checks the defect\nhands out a repair cost calculation back\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tA customer brings in a defective computer\tthe CRS checks the defect\n0\tFALSE\tprecedence\tthe CRS checks the defect\thands out a repair cost calculation back"], "original_id": "1-2_computer_repair-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer decides that the costs are acceptable, the process continues, otherwise she takes her computer home unrepaired.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 66, "total_costs": 0.010600000000000002, "answers": ["decides that the costs are acceptable\ncontinues\ntakes her computer home unrepaired\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tdecides that the costs are acceptable\tcontinues\n0\tFALSE\tresponse\tdecides that the costs are acceptable\ttakes her computer home unrepaired"], "original_id": "1-2_computer_repair-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The ongoing repair consists of two activities, which are executed, in an arbitrary order.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 21, "total_costs": 0.00919, "answers": ["repair consists #-#-#RESULT#-#-#0\tFALSE\texistence\trepair consists"], "original_id": "1-2_computer_repair-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The first activity is to check and repair the hardware, whereas the second activity checks and configures the software.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 60, "total_costs": 0.010409999999999999, "answers": ["check and repair the hardware\ncheck and configure the software\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\tcheck and repair the hardware\t\n0\tFALSE\tprecedence\tcheck and repair the hardware\tcheck and configure the software\n0\tFALSE\tend\tcheck and configure the software\t"], "original_id": "1-2_computer_repair-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 34, "total_costs": 0.00954, "answers": ["After each of these activities, the proper system functionality is tested.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\ttest system functionality\tperform activities"], "original_id": "1-2_computer_repair-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an error is detected another arbitrary repair activity is executed, otherwise the repair is finished.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 73, "total_costs": 0.010759999999999999, "answers": ["detect error\nexecute repair activity\nfinish repair\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tdetect error\texecute repair activity\n0\tFALSE\tresponse\tdetect error\texecute repair activity\n0\tFALSE\tprecedence\texecute repair activity\tfinish repair\n0\tTRUE\tprecedence\tdetect error\tfinish repair"], "original_id": "1-2_computer_repair-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The MPON reports the meter operation to the GO.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 33, "total_costs": 0.00949, "answers": ["The MPON reports the meter operation to the GO.\n\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\treports the meter operation\t"], "original_id": "10-2_process_b3-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO examines the application of the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 849, "output_tokens": 31, "total_costs": 0.00942, "answers": ["The GO examines the application of the MPON.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\texamines the application\t"], "original_id": "10-2_process_b3-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO rejects the application of the MPON or the GO confirmes the application of the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 57, "total_costs": 0.01031, "answers": ["The GO rejects the application of the MPON\nThe GO confirmes the application of the MPON\n#-#-#RESULT#-#-#\n0\tFALSE\tnoncooccurrence\trejects the application of the MPON\tconfirms the application of the MPON"], "original_id": "10-2_process_b3-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO informs the MPOO about the registration confirmation of the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 38, "total_costs": 0.00969, "answers": ["The GO informs the MPOO about the registration confirmation of the MPON.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tinforms the MPOO"], "original_id": "10-2_process_b3-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO informs the MSPO about the registration confirmation of the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 36, "total_costs": 0.00962, "answers": ["The GO informs the MSPO about the registration confirmation of the MPON.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tinforms the MSPO"], "original_id": "10-2_process_b3-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The MPON and the MPOO perform the equipment acquisition and/or equipment changes.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 85, "total_costs": 0.01111, "answers": ["MPON perform equipment acquisition\nMPOO perform equipment acquisition\nMPON perform equipment changes\nMPOO perform equipment changes\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tMPON perform equipment acquisition\t\n0\tFALSE\texistence\tMPOO perform equipment acquisition\t\n0\tFALSE\texistence\tMPON perform equipment changes\t\n0\tFALSE\texistence\tMPOO perform equipment changes\t"], "original_id": "10-2_process_b3-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The MPON informs the GO about the failure of the entire process or the MPON informs the GO about the successful completion of the entire process.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 868, "output_tokens": 77, "total_costs": 0.01099, "answers": ["The MPON informs the GO about the failure of the entire process\nThe MPON informs the GO about the successful completion of the entire process\n#-#-#RESULT#-#-#\n0\tFALSE\tend\tThe MPON informs the GO about the failure of the entire process\t\n0\tFALSE\tend\tThe MPON informs the GO about the successful completion of the entire process\t"], "original_id": "10-2_process_b3-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO informs the MPON about the failure of the overall transaction by deadline if after a maximum time limit no message of the MPON is present at the GO.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 872, "output_tokens": 48, "total_costs": 0.01016, "answers": ["The GO informs the MPON about the failure #-#-#RESULT#-#-# \n0\tFALSE\tprecedence\tThe GO informs the MPON about the failure\tNo message of the MPON is present at the GO"], "original_id": "10-2_process_b3-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the MPON informs the GO about the failure of the entire process, the GO confirms the failure of the assignment to the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 867, "output_tokens": 63, "total_costs": 0.01056, "answers": ["MPON informs GO about the failure of the entire process\nGO confirms the failure of the assignment to the MPON\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tMPON informs GO about the failure of the entire process\tGO confirms the failure of the assignment to the MPON"], "original_id": "10-2_process_b3-1-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the MPON informs the GO about the successful completion of the overall process, the GO assigns the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 35, "total_costs": 0.009670000000000002, "answers": ["MPON informs GO\nGO assigns MPON\n\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tMPON informs GO\tGO assigns MPON"], "original_id": "10-2_process_b3-1-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO confirms the assignment to the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 849, "output_tokens": 31, "total_costs": 0.00942, "answers": ["The GO confirms the assignment to the MPON.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tconfirms the assignment\t"], "original_id": "10-2_process_b3-1-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO informs the MPOO about the failure of the assignment of the MPON or the GO informs the MPOO about the assignment of the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 872, "output_tokens": 81, "total_costs": 0.01115, "answers": ["The GO informs the MPOO about the failure of the assignment of the MPON\nThe GO informs the MPOO about the assignment of the MPON\n\n#-#-#RESULT#-#-#\n0\tFALSE\tnoncooccurrence\tinforms the MPOO about the failure of the assignment of the MPON\tinforms the MPOO about the assignment of the MPON"], "original_id": "10-2_process_b3-1-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO informs the MSPO about the failure of the assignment of the MPON or the GO informs the MSPO about the assignment of the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 870, "output_tokens": 77, "total_costs": 0.011009999999999999, "answers": ["The GO informs the MSPO about the failure of the assignment of the MPON\nThe GO informs the MSPO about the assignment of the MPON\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tnoncooccurrence\tinforms the MSPO about the failure of the assignment of the MPON\tinforms the MSPO about the assignment of the MPON"], "original_id": "10-2_process_b3-1-12"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The GO informs the SP about the assignment of the MPON.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 33, "total_costs": 0.00951, "answers": ["The GO informs the SP about the assignment of the MPON.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tinforms the SP"], "original_id": "10-2_process_b3-1-13"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After management indicates that new clients are needed, the marketing team will perform a market analysis and prepare a portfolio presentation.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 50, "total_costs": 0.01012, "answers": ["After management indicates that new clients are needed, the marketing team will perform a market analysis and prepare a portfolio presentation.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tperform a market analysis\tprepare a portfolio presentation"], "original_id": "1081511532_rev3-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When they have sent out offers to potential clients the marketing team informs management about the responses.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 62, "total_costs": 0.01043, "answers": ["sent out offers to potential clients\ninforms management about the responses\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tsent out offers to potential clients\tinforms management about the responses\n0\tFALSE\tresponse\tsent out offers to potential clients\tinforms management about the responses"], "original_id": "1081511532_rev3-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Management then starts negotiations by sending out a detailed offer to the client.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 33, "total_costs": 0.009519999999999999, "answers": ["Management then starts negotiations by sending out a detailed offer to the client.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\tstarts negotiations\t"], "original_id": "1081511532_rev3-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the client accepts the offer, management will prepare a contract that will be signed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 51, "total_costs": 0.01009, "answers": ["accepts the offer\nprepare a contract\nwill be signed\n\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\taccepts the offer\tprepare a contract\n0\tFALSE\tsuccession\tprepare a contract\twill be signed"], "original_id": "1081511532_rev3-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Otherwise, management analyzes the reason why their offer failed in order to improve in the future.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 26, "total_costs": 0.009349999999999999, "answers": ["management analyzes the reason #-#-#RESULT#-#-# \n0\tFALSE\texistence\tmanagement analyzes the reason"], "original_id": "1081511532_rev3-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: An order to cash process starts when a customer order is received.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 25, "total_costs": 0.00927, "answers": ["An order to cash process starts #-#-#RESULT#-#-#\n0\tFALSE\tinit\treceive customer order"], "original_id": "1120589054_rev4-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After the order has been processed, it is send to the warehouse.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 38, "total_costs": 0.00967, "answers": ["After the order has been processed, it is send to the warehouse.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tprocess the order\tsend to the warehouse"], "original_id": "1120589054_rev4-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The warehouse employees determine the parts required to produce the requested items.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 33, "total_costs": 0.00951, "answers": ["The warehouse employees determine the parts required to produce the requested items.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tdetermine the parts"], "original_id": "1120589054_rev4-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If any parts are not available in the warehouse, these are ordered.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 38, "total_costs": 0.00967, "answers": ["If any parts are not available in the warehouse, these are ordered.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tnot available in the warehouse\tordered"], "original_id": "1120589054_rev4-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once all necessary parts are available, production will start.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 30, "total_costs": 0.0094, "answers": ["Once all necessary parts are available, production will start.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\tproduction start\t"], "original_id": "1120589054_rev4-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After production, quality checks will be performed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 848, "output_tokens": 33, "total_costs": 0.00947, "answers": ["After production, quality checks will be performed.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tperform production\tperform quality checks"], "original_id": "1120589054_rev4-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the production process has finished, products will be packaged and labeled, before returning to the warehouse.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 76, "total_costs": 0.010870000000000001, "answers": ["production process has finished\nproducts be packaged\nproducts be labeled\nreturning to the warehouse\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tproduction process has finished\tproducts be packaged\n0\tFALSE\tprecedence\tproducts be packaged\tproducts be labeled\n0\tFALSE\tprecedence\tproducts be labeled\treturning to the warehouse"], "original_id": "1120589054_rev4-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Finally, sales will be informed about the completed production and the product can be sold to the customer.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 41, "total_costs": 0.00982, "answers": ["Finally, sales will be informed about the completed production and the product can be sold to the customer.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tinform sales\tsell product"], "original_id": "1120589054_rev4-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when the SO: Angebot/Auftrag receives a subsidiary order.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 37, "total_costs": 0.00966, "answers": ["The process starts when the SO: Angebot/Auftrag receives a subsidiary order.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\treceives a subsidiary order"], "original_id": "1364308140_rev4-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The SO: Angebot/Auftrag prepares goods for shipment and then ships the goods, concurrently with preparing the goods and shipping them, the SO: Angebot/Auftrag prepares invoicing.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 876, "output_tokens": 125, "total_costs": 0.01251, "answers": ["The SO: Angebot/Auftrag prepares goods for shipment\nThe SO: Angebot/Auftrag ships the goods\nThe SO: Angebot/Auftrag prepares invoicing\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tThe SO: Angebot/Auftrag prepares goods for shipment\tThe SO: Angebot/Auftrag ships the goods\n0\tFALSE\tsuccession\tThe SO: Angebot/Auftrag prepares goods for shipment\tThe SO: Angebot/Auftrag prepares invoicing\n0\tFALSE\tsuccession\tThe SO: Angebot/Auftrag ships the goods\tThe SO: Angebot/Auftrag prepares invoicing"], "original_id": "1364308140_rev4-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In case the customer is subsidiary and the subsidiary relationship is not yet modeled, SO: Address- management adds parent company as invoicing address, then the SO: Angebot/Auftrag create the invoice.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 879, "output_tokens": 68, "total_costs": 0.010830000000000001, "answers": ["In case the customer is subsidiary and the subsidiary relationship is not yet modeled, SO: Address- management adds parent company as invoicing address, then the SO: Angebot/Auftrag create the invoice.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tadds parent company as invoicing address\tcreate the invoice"], "original_id": "1364308140_rev4-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Otherwise if the customer is independent or the subsidiary relationship is already modeled in ERP, the SO: Angebot/Auftrag directly creates the invoice.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 867, "output_tokens": 53, "total_costs": 0.01026, "answers": ["Otherwise if the customer is independent or the subsidiary relationship is already modeled in ERP, the SO: Angebot/Auftrag directly creates the invoice.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tmodels in ERP\tcreates the invoice"], "original_id": "1364308140_rev4-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Finally, the SO: Angebot/Auftrag sends the invoice.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 33, "total_costs": 0.00951, "answers": ["Finally, the SO: Angebot/Auftrag sends the invoice.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\tsends the invoice\t"], "original_id": "1364308140_rev4-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: At the beginning the customer perceives that her subscribed service has degraded.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 35, "total_costs": 0.00958, "answers": ["At the beginning the customer perceives that her subscribed service has degraded.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\tperceives\tdegraded"], "original_id": "2-1_sla_violation-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A list with all the problem parameters is then sent to the Customer Service department of TELECO.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 43, "total_costs": 0.00987, "answers": ["A list with all the problem parameters is then sent to the Customer Service department of TELECO.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tsend a list to the Customer Service department"], "original_id": "2-1_sla_violation-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: At the customer service an employee enters (based on the received data) a problem report into system T..\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 46, "total_costs": 0.00998, "answers": ["At the customer service an employee enters (based on the received data) a problem report into system T.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tenters a problem report into system T\t"], "original_id": "2-1_sla_violation-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Then the problem report is compared to the customer SLA to identify what the extent and the details of the service degradation are.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 58, "total_costs": 0.01038, "answers": ["Then the problem report is compared to the customer SLA to identify what the extent and the details of the service degradation are.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tcompare problem report to customer SLA\tidentify extent and details of service degradation"], "original_id": "2-1_sla_violation-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Based on this, the necessary counter measures are determined including their respective priorities.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 44, "total_costs": 0.00986, "answers": ["Based on this, the necessary counter measures are determined including their respective priorities.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tdetermine counter measures\t\n0\tFALSE\texistence\tinclude priorities\t"], "original_id": "2-1_sla_violation-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: An electronic service then determines the significance of the customer based on information that has been collected during the history of the contractual relationship.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 34, "total_costs": 0.00966, "answers": ["determines the significance of the customer\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tdetermines the significance of the customer\t"], "original_id": "2-1_sla_violation-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In case the customer is premium, the process will link to an extra problem fix process (this process will not be detailed here).\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 865, "output_tokens": 32, "total_costs": 0.00961, "answers": ["link to an extra problem fix process\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tlink to an extra problem fix process\t"], "original_id": "2-1_sla_violation-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In case the customer is of certain significance which would affect the counter measures previously decided upon, the process goes back to re-prioritize these measures otherwise the process continues.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 873, "output_tokens": 92, "total_costs": 0.01149, "answers": ["In case the customer is of certain significance which would affect the counter measures previously decided upon, the process goes back to re-prioritize these measures otherwise the process continues.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\taffect the counter measures\tre-prioritize these measures\n0\tFALSE\tsuccession\taffect the counter measures\tre-prioritize these measures\n0\tFALSE\tprecedence\taffect the counter measures\tcontinue the process"], "original_id": "2-1_sla_violation-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Taking together the information (i.e. contract commitment data + prioritized actions) a detailed problem report is created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 38, "total_costs": 0.009760000000000001, "answers": ["Taking together the information (i.e. contract commitment data + prioritized actions) #-#-#RESULT#-#-# \n0\tFALSE\texistence\tTaking together the information"], "original_id": "2-1_sla_violation-1-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The detailed problem report is then sent to Service Management.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 32, "total_costs": 0.009460000000000001, "answers": ["The detailed problem report is then sent to Service Management.\n\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tsend report to Service Management"], "original_id": "2-1_sla_violation-1-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Service Management deals on a first level with violations of quality in services that are provided to customers.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 42, "total_costs": 0.009840000000000002, "answers": ["Service Management deals on a first level with violations of quality in services that are provided to customers.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tdeals with violations of quality\t"], "original_id": "2-1_sla_violation-1-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After receiving the detailed problem report, Service management investigates whether the problem is analyzable at the level of their department or whether the problem may be located at Resource Provisioning.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 874, "output_tokens": 75, "total_costs": 0.01099, "answers": ["After receiving the detailed problem report, Service management investigates whether the problem is analyzable at the level of their department or whether the problem may be located at Resource Provisioning.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\treceive the detailed problem report\tinvestigate the problem\n0\tFALSE\texistence\tinvestigate the problem\t"], "original_id": "2-1_sla_violation-1-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In case Service Management assesses the problem to be not analyzable by themselves, the detailed problem report is sent out to Resource Provisioning.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 868, "output_tokens": 58, "total_costs": 0.01042, "answers": ["In case Service Management assesses the problem to be not analyzable by themselves, the detailed problem report is sent out to Resource Provisioning.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tassesses the problem\tsent out the detailed problem report"], "original_id": "2-1_sla_violation-1-12"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If Service Management is sure they can analyze it, they perform the analysis and based on the outcome they create a trouble report that indicates the type of problem.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 870, "output_tokens": 49, "total_costs": 0.010169999999999998, "answers": ["analyze it\nperform the analysis\ncreate a trouble report\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tanalyze it\tperform the analysis\n0\tFALSE\tresponse\tperform the analysis\tcreate a trouble report"], "original_id": "2-1_sla_violation-1-13"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After Resource Provisioning receives the detailed problem report, it is checked whether there are any possible problems.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 41, "total_costs": 0.00982, "answers": ["After Resource Provisioning receives the detailed problem report #-#-#RESULT#-#-#\n0\tFALSE\tprecedence\treceives the detailed problem report\tchecked whether there are any possible problems"], "original_id": "2-1_sla_violation-1-14"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If no problems are detected, a notification about the normal service execution is created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 35, "total_costs": 0.009600000000000001, "answers": ["detect problems\ncreate notification\n\n#-#-#RESULT#-#-#\n0\tFALSE\tabsence\tdetect problems\t\n0\tFALSE\texistence\tcreate notification\t"], "original_id": "2-1_sla_violation-1-15"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a problem is detected this will be analyzed by Resource Provisioning and a trouble report is created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 59, "total_costs": 0.010360000000000001, "answers": ["detect a problem\nanalyze by Resource Provisioning\ncreate a trouble report\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tdetect a problem\tanalyze by Resource Provisioning\n0\tFALSE\tprecedence\tanalyze by Resource Provisioning\tcreate a trouble report"], "original_id": "2-1_sla_violation-1-16"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Either trouble report or the normal execution notification will be included in a status report and sent back to Service Management.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 55, "total_costs": 0.01026, "answers": ["Either trouble report or the normal execution notification will be included in a status report and sent back to Service Management.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tinclude in a status report\t\n0\tFALSE\texistence\tsend back to Service Management\t"], "original_id": "2-1_sla_violation-1-17"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Service Management then prepares the final status report based on the received information.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 36, "total_costs": 0.009609999999999999, "answers": ["Service Management prepares the final status report based on the received information.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tService Management prepares the final status report"], "original_id": "2-1_sla_violation-1-18"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Subsequently it has to be determined what counter measures should be taken depending on the information in the final status report.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 24, "total_costs": 0.009340000000000001, "answers": ["determine counter measures#-#-#RESULT#-#-#0\tFALSE\texistence\tdetermine counter measures"], "original_id": "2-1_sla_violation-1-19"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Three alternative process paths may be taken.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 847, "output_tokens": 19, "total_costs": 0.00904, "answers": ["Three alternative process paths may be taken.\n\n#-#-#RESULT#-#-#"], "original_id": "2-1_sla_violation-1-20"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: For the case that no problem was detected at all, the actual service performance is sent back to the Customer Service.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 54, "total_costs": 0.01024, "answers": ["For the case that no problem was detected at all, the actual service performance is sent back to the Customer Service.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tdetect problem\t\n0\tFALSE\tresponse\tdetect problem\tsend back service performance"], "original_id": "2-1_sla_violation-1-21"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: For the case that minor corrective actions are required, Service Management will undertake corrective actions by themselves.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 42, "total_costs": 0.009840000000000002, "answers": ["minor corrective actions are required\nService Management will undertake corrective actions\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tminor corrective actions are required\tService Management will undertake corrective actions"], "original_id": "2-1_sla_violation-1-22"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Subsequently, the problem resolution report is created and then sent out to Customer Service.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 39, "total_costs": 0.009729999999999999, "answers": ["create problem resolution report\nsend out report to Customer Service\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreate problem resolution report\tsend out report to Customer Service"], "original_id": "2-1_sla_violation-1-23"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After sending, this process path of Service Management ends.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 19, "total_costs": 0.00907, "answers": ["sending\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tend\tsending"], "original_id": "2-1_sla_violation-1-24"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: For the case that automatic resource restoration from Resource Provisioning is required, Service Management must create a request for automatic resource restoration.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 55, "total_costs": 0.01029, "answers": ["For the case that automatic resource restoration from Resource Provisioning is required, Service Management must create a request for automatic resource restoration.\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tcreate a request for automatic resource restoration\tautomatic resource restoration from Resource Provisioning"], "original_id": "2-1_sla_violation-1-25"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This message is then sent to Resource Provisioning.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 849, "output_tokens": 21, "total_costs": 0.00912, "answers": ["This message is then sent to Resource Provisioning.\n\n#-#-#RESULT#-#-#"], "original_id": "2-1_sla_violation-1-26"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Resource Provisioning has been on-hold and waiting for a restoration request but this must happen within 2 days after the status report was sent out, otherwise Resource Provisioning terminates the process.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 877, "output_tokens": 108, "total_costs": 0.01201, "answers": ["Resource Provisioning has been on-hold and waiting for a restoration request but this must happen within 2 days after the status report was sent out, otherwise Resource Provisioning terminates the process.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tsend out status report\twait for a restoration request\n0\tFALSE\tprecedence\tsend out status report\twait for a restoration request\n0\tFALSE\tresponse\twait for a restoration request\tterminate the process\n0\tFALSE\tprecedence\twait for a restoration request\tterminate the process"], "original_id": "2-1_sla_violation-1-27"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After the restoration request is received, all possible errors are tracked.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 39, "total_costs": 0.00969, "answers": ["After the restoration request is received, all possible errors are tracked.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\treceive restoration request\ttrack all possible errors"], "original_id": "2-1_sla_violation-1-28"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Based on the tracked errors, all necessary corrective actions are undertaken by Resource Provisioning.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 39, "total_costs": 0.009729999999999999, "answers": ["Based on the tracked errors, all necessary corrective actions are undertaken by Resource Provisioning.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tundertake corrective actions"], "original_id": "2-1_sla_violation-1-29"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Then a trouble-shooting report is created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 848, "output_tokens": 30, "total_costs": 0.00938, "answers": ["Then a trouble-shooting report is created.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\tcreate a trouble-shooting report"], "original_id": "2-1_sla_violation-1-30"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This report is sent out to Service Management, then the process ends.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 31, "total_costs": 0.00946, "answers": ["This report is sent out to Service Management\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tend\tsend out report to Service Management\t"], "original_id": "2-1_sla_violation-1-31"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The trouble-shooting report is received by Service Management and this information goes then into the creation of the problem resolution report just as described for ii).\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 868, "output_tokens": 46, "total_costs": 0.01006, "answers": ["receive trouble-shooting report\ngo information into creation of problem resolution report\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\treceive trouble-shooting report\tgo information into creation of problem resolution report"], "original_id": "2-1_sla_violation-1-32"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Customer Service either receives the actual service performance (if there was no problem) or the problem resolution report.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 49, "total_costs": 0.010069999999999999, "answers": ["Customer Service receives the actual service performance\nCustomer Service receives the problem resolution report\n\n#-#-#RESULT#-#-#\n0\tFALSE\tnoncooccurrence\treceives the actual service performance\treceives the problem resolution report"], "original_id": "2-1_sla_violation-1-33"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Then, two concurrent activities are triggered, i.e. i) a report is created for the customer which details the current service performance and the resolution of the problem, and ii) an SLA violation rebate is reported to Billing & Collections who will adjust the billing.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 892, "output_tokens": 76, "total_costs": 0.011200000000000002, "answers": ["Then, two concurrent activities are triggered, i.e. i) a report is created for the customer which details the current service performance and the resolution of the problem, and ii) an SLA violation rebate is reported to Billing & Collections who will adjust the billing.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tsuccession\tcreate report\treport SLA violation rebate"], "original_id": "2-1_sla_violation-1-34"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The report for the customer is sent out to her.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 32, "total_costs": 0.009460000000000001, "answers": ["The report for the customer is sent out to her.\n\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tsent out report\t"], "original_id": "2-1_sla_violation-1-35"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After all three activities are completed the process ends within Customer Service.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 26, "total_costs": 0.0093, "answers": ["After all three activities are completed #-#-#RESULT#-#-# \n0\tFALSE\tend\tcompleted the process"], "original_id": "2-1_sla_violation-1-36"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After the customer then receives the report about service performance and problem resolution from Customer Service, the process flow at the customer also ends.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 865, "output_tokens": 53, "total_costs": 0.010239999999999999, "answers": ["After the customer then receives the report about service performance and problem resolution from Customer Service, the process flow at the customer also ends.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\treceives the report\tends the process flow"], "original_id": "2-1_sla_violation-1-37"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The credit company collects the credit information from the customer, If the requested amount is greater than 1M$ an approval must be requested.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 867, "output_tokens": 45, "total_costs": 0.010020000000000001, "answers": ["collects the credit information from the customer\napproval must be requested\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcollects the credit information from the customer\tapproval must be requested"], "original_id": "20818304_rev1-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$ the company assess the risk of the credit.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 33, "total_costs": 0.0096, "answers": ["assess the risk of the credit\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tassess the risk of the credit\t"], "original_id": "20818304_rev1-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After the assessment, if the risk is high, an approval must be requested, but if the risk is low the credit is accepted.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 866, "output_tokens": 74, "total_costs": 0.010879999999999999, "answers": ["After the assessment, if the risk is high, an approval must be requested, but if the risk is low the credit is accepted.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tassessment\trequest approval\n0\tFALSE\tprecedence\tassessment\taccept credit\n0\tFALSE\tnoncooccurrence\trequest approval\taccept credit"], "original_id": "20818304_rev1-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After the approval request, the credit could be accepted or rejected, in both cases, an email is sent to the customer.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 81, "total_costs": 0.01107, "answers": ["After the approval request, the credit could be accepted or rejected, in both cases, an email is sent to the customer.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tapprove request\taccept credit\n0\tFALSE\tprecedence\tapprove request\treject credit\n0\tFALSE\tresponse\taccept credit\tsend email\n0\tFALSE\tresponse\treject credit\tsend email"], "original_id": "20818304_rev1-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The party sends a warrant possession request asking a warrant to be released.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 46, "total_costs": 0.009909999999999999, "answers": ["The party sends a warrant possession request\nasking a warrant to be released\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tThe party sends a warrant possession request\tasking a warrant to be released"], "original_id": "3-1_2009-1_mc_finalice_sct_warranty_posession-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The Client Service Back Office as part of the Small Claims Registry Operations receives the request and retrieves the SCT file.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 50, "total_costs": 0.01011, "answers": ["The Client Service Back Office as part of the Small Claims Registry Operations receives the request and retrieves the SCT file.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\treceives the request\tretrieves the SCT file"], "original_id": "3-1_2009-1_mc_finalice_sct_warranty_posession-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Then, the SCT Warrant Possession is forwarded to Queensland Police.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 37, "total_costs": 0.00964, "answers": ["forward SCT Warrant Possession to Queensland Police\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tforward SCT Warrant Possession to Queensland Police\t"], "original_id": "3-1_2009-1_mc_finalice_sct_warranty_posession-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The SCT physical file is stored by the Back Office awaiting a report to be sent by the Police.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 57, "total_costs": 0.0103, "answers": ["The SCT physical file is stored by the Back Office awaiting a report to be sent by the Police.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tstore the SCT physical file\n0\tFALSE\tresponse\tstore the SCT physical file\tsend a report by the Police"], "original_id": "3-1_2009-1_mc_finalice_sct_warranty_posession-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When the report is received, the respective SCT file is retrieved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 37, "total_costs": 0.00963, "answers": ["When the report is received, the respective SCT file is retrieved.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\treceive report\tretrieve SCT file"], "original_id": "3-1_2009-1_mc_finalice_sct_warranty_posession-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Then, Back Office attaches the new SCT document, and stores the expanded SCT physical file.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 47, "total_costs": 0.00998, "answers": ["Back Office attaches the new SCT document\nstores the expanded SCT physical file\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tBack Office attaches the new SCT document\tstores the expanded SCT physical file"], "original_id": "3-1_2009-1_mc_finalice_sct_warranty_posession-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After that, some other MC internal staff receives the physical SCT file (out of scope).\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 41, "total_costs": 0.0098, "answers": ["After that, some other MC internal staff receives the physical SCT file (out of scope).\n\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\treceives the physical SCT file"], "original_id": "3-1_2009-1_mc_finalice_sct_warranty_posession-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Each morning, the files which have yet to be processed need to be checked, to make sure they are in order for the court hearing that day.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 869, "output_tokens": 49, "total_costs": 0.010159999999999999, "answers": ["Each morning, the files which have yet to be processed need to be checked, to make sure they are in order for the court hearing that day.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tcheck files\t"], "original_id": "3-2_2009-2_conduct_directions_hearing-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If some files are missing, a search is initiated, otherwise the files can be physically tracked to the intended location.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 71, "total_costs": 0.010750000000000001, "answers": ["some files are missing\na search is initiated\nthe files can be physically tracked to the intended location\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tsome files are missing\ta search is initiated\n0\tFALSE\tnoncooccurrence\tsome files are missing\tthe files can be physically tracked to the intended location"], "original_id": "3-2_2009-2_conduct_directions_hearing-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once all the files are ready, these are handed to the Associate, and meantime the Judges Lawlist is distributed to the relevant people.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 866, "output_tokens": 59, "total_costs": 0.010429999999999998, "answers": ["Once all the files are ready, these are handed to the Associate, and meantime the Judges Lawlist is distributed to the relevant people.\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\thand files to the Associate\tdistribute Judges Lawlist to the relevant people"], "original_id": "3-2_2009-2_conduct_directions_hearing-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the directions hearings are conducted.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 847, "output_tokens": 27, "total_costs": 0.00928, "answers": ["Afterwards, the directions hearings are conducted.#-#-#RESULT#-#-#0\tFALSE\tinit\tconduct directions hearings"], "original_id": "3-2_2009-2_conduct_directions_hearing-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is received, it is first checked whether the claimant is insured by the organization.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 31, "total_costs": 0.00952, "answers": ["receive a claim#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\treceive a claim\tcheck whether the claimant is insured"], "original_id": "3-6_2010-1_claims_notification-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If not, the claimant is informed that the claim must be rejected.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 39, "total_costs": 0.00971, "answers": ["If not, the claimant is informed that the claim must be rejected.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinform\tclaimant\tclaim must be rejected"], "original_id": "3-6_2010-1_claims_notification-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Otherwise, the severity of the claim is evaluated.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 849, "output_tokens": 29, "total_costs": 0.009359999999999999, "answers": ["evaluate severity of the claim\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tevaluate severity of the claim\t"], "original_id": "3-6_2010-1_claims_notification-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Based on the outcome (simple or complex claims), relevant forms are sent to the claimant.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 38, "total_costs": 0.009720000000000001, "answers": ["Based on the outcome (simple or complex claims), relevant forms are sent to the claimant.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tsend relevant forms"], "original_id": "3-6_2010-1_claims_notification-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the forms are returned, they are checked for completeness.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 33, "total_costs": 0.0095, "answers": ["Once the forms are returned, they are checked for completeness.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\treturn forms\tcheck forms for completeness"], "original_id": "3-6_2010-1_claims_notification-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the forms provide all relevant details, the claim is registered in the Claims Management system, which ends the Claims Notification process.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 65, "total_costs": 0.01059, "answers": ["forms provide all relevant details\nclaim is registered in the Claims Management system\nends the Claims Notification process\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tforms provide all relevant details\tclaim is registered in the Claims Management system\n0\tFALSE\tend\tends the Claims Notification process\t"], "original_id": "3-6_2010-1_claims_notification-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Otherwise, the claimant is informed to update the forms.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 35, "total_costs": 0.00956, "answers": ["inform the claimant to update the forms\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tinform the claimant to update the forms\t"], "original_id": "3-6_2010-1_claims_notification-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Upon reception of the updated forms, they are checked again.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 36, "total_costs": 0.00959, "answers": ["Upon reception of the updated forms, they are checked again.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\treceive updated forms\tcheck updated forms"], "original_id": "3-6_2010-1_claims_notification-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The intake workflow starts with a notice by telephone at the secretarial office of the mental health care institute.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 46, "total_costs": 0.00998, "answers": ["notice by telephone at the secretarial office of the mental health care institute\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\tnotice by telephone at the secretarial office of the mental health care institute\t"], "original_id": "4-1_intaker_workflow-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This notice is done by the family doctor of somebody who is in need of mental treatment.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 40, "total_costs": 0.00977, "answers": ["This notice is done by the family doctor of somebody who is in need of mental treatment.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tdone by the family doctor\t"], "original_id": "4-1_intaker_workflow-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The secretarial worker inquires after the name and residence of the patient.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 42, "total_costs": 0.009800000000000001, "answers": ["The secretarial worker inquires after the name and residence of the patient.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tinquires after the name and residence of the patient\t"], "original_id": "4-1_intaker_workflow-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: On the basis of this information, the doctor is put through to the nursing officer responsible for the part of the region that the patient lives in.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 868, "output_tokens": 51, "total_costs": 0.01021, "answers": ["On the basis of this information, the doctor is put through to the nursing officer responsible for the part of the region that the patient lives in.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tput through to the nursing officer"], "original_id": "4-1_intaker_workflow-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The nursing officer makes a full inquiry into the mental, health, and social state of the patient in question.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 43, "total_costs": 0.009899999999999999, "answers": ["The nursing officer makes a full inquiry into the mental, health, and social state of the patient in question.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tmakes a full inquiry"], "original_id": "4-1_intaker_workflow-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This information is recorded on a registration form.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 848, "output_tokens": 32, "total_costs": 0.00944, "answers": ["This information is recorded on a registration form.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\trecord information on a registration form\t"], "original_id": "4-1_intaker_workflow-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: At the end of the conversation, this form is handed in at the secretarial office of the institute.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 50, "total_costs": 0.0101, "answers": ["At the end of the conversation, this form is handed in at the secretarial office of the institute.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\thand in form\t\n0\tFALSE\tend\thand in form\t"], "original_id": "4-1_intaker_workflow-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Here, the information on the form is stored in the information system and subsequently printed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 41, "total_costs": 0.00979, "answers": ["store information on the form in the information system\nprint information\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tstore information on the form in the information system\tprint information"], "original_id": "4-1_intaker_workflow-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: For new patients, a patient file is created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 849, "output_tokens": 28, "total_costs": 0.00933, "answers": ["For new patients, a patient file is created.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\tcreate patient file"], "original_id": "4-1_intaker_workflow-1-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The registration form as well as the print from the information system are stored in the patient file.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 59, "total_costs": 0.010350000000000002, "answers": ["The registration form as well as the print from the information system are stored in the patient file.#-#-#RESULT#-#-#0\tFALSE\texistence\tstore the registration form in the patient file\n0\tFALSE\texistence\tstore the print from the information system in the patient file"], "original_id": "4-1_intaker_workflow-1-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Patient files are kept at the secretarial office and may not leave the building.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 56, "total_costs": 0.01023, "answers": ["Patient files are kept at the secretarial office and may not leave the building.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tkeep patient files at the secretarial office\t\n0\tTRUE\tabsence\tleave the building with patient files\t"], "original_id": "4-1_intaker_workflow-1-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: At the secretarial office, two registration cards are produced for respectively the future first and second intaker of the patient.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 45, "total_costs": 0.009980000000000001, "answers": ["At the secretarial office, two registration cards are produced for respectively the future first and second intaker of the patient.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tproduce registration cards\t"], "original_id": "4-1_intaker_workflow-1-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The registration card contains a set of basic patient data.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 36, "total_costs": 0.00958, "answers": ["The registration card contains a set of basic patient data.\n\n#-#-#RESULT#-#-#\n0\tFALSE\texistence\tcontains a set of basic patient data\t"], "original_id": "4-1_intaker_workflow-1-12"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The new patient is added on the list of new notices.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 39, "total_costs": 0.009680000000000001, "answers": ["The new patient is added on the list of new notices.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tadd the new patient on the list of new notices\t"], "original_id": "4-1_intaker_workflow-1-13"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Halfway the week, at Wednesday, a staff meeting of the entire medical team takes place.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 39, "total_costs": 0.009750000000000002, "answers": ["Halfway the week, at Wednesday, a staff meeting of the entire medical team takes place.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tstaff meeting\t"], "original_id": "4-1_intaker_workflow-1-14"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The medical team consists of social-medical workers, physicians, and a psychiatrist.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 27, "total_costs": 0.00936, "answers": ["The medical team consists of social-medical workers, physicians, and a psychiatrist.\n\n#-#-#RESULT#-#-#\n\n"], "original_id": "4-1_intaker_workflow-1-15"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: At this meeting, the team-leader assigns all new patients on the list of new notices to members of the team.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 51, "total_costs": 0.01016, "answers": ["assigns all new patients on the list of new notices to members of the team\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tassigns all new patients on the list of new notices to members of the team\t"], "original_id": "4-1_intaker_workflow-1-16"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Each patient will be assigned to a social-medical worker, who will act as the first intaker of the patient.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 69, "total_costs": 0.010700000000000001, "answers": ["Each patient will be assigned to a social-medical worker, who will act as the first intaker of the patient.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\tassign patient to social-medical worker\t\n0\tFALSE\tresponse\tassign patient to social-medical worker\tact as the first intaker of the patient"], "original_id": "4-1_intaker_workflow-1-17"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: One of the physicians will act as the second intaker.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 34, "total_costs": 0.00953, "answers": ["One of the physicians will act as the second intaker.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tact as the second intaker"], "original_id": "4-1_intaker_workflow-1-18"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In assigning intakers, the teamleader takes into account their expertise, the region they are responsible for, earlier contacts they might have had with the patient, and their case load.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 875, "output_tokens": 47, "total_costs": 0.01016, "answers": ["In assigning intakers, the teamleader takes into account their expertise, the region they are responsible for, earlier contacts they might have had with the patient, and their case load.\n\n#-#-#RESULT#-#-#\n\n"], "original_id": "4-1_intaker_workflow-1-19"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The assignments are recorded on an assignment list which is handed to the secretarial office.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 44, "total_costs": 0.00988, "answers": ["The assignments are recorded on an assignment list which is handed to the secretarial office.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\trecord assignments\thand assignment list to secretarial office"], "original_id": "4-1_intaker_workflow-1-20"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: For each new assignment, it is also determined whether the medical file of the patient is required.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 43, "total_costs": 0.00987, "answers": ["For each new assignment, it is also determined whether the medical file of the patient is required.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tdetermine the requirement of the medical file"], "original_id": "4-1_intaker_workflow-1-21"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This information is added to the assignment list.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 848, "output_tokens": 31, "total_costs": 0.00941, "answers": ["This information is added to the assignment list.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tadd information to the assignment list"], "original_id": "4-1_intaker_workflow-1-22"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The secretarial office stores the assignment of each patient of the assignment list in the information system.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 47, "total_costs": 0.00999, "answers": ["stores the assignment of each patient of the assignment list in the information system\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tstores the assignment of each patient of the assignment list in the information system\t"], "original_id": "4-1_intaker_workflow-1-23"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: It passes the produced registration cards to the first and second intaker of each newly assigned patient.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 53, "total_costs": 0.01017, "answers": ["passes the produced registration cards to the first and second intaker of each newly assigned patient\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tpasses the produced registration cards to the first and second intaker of each newly assigned patient\t"], "original_id": "4-1_intaker_workflow-1-24"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: An intaker keeps this registration with him at times when visiting the patient and in his close proximity when he is at the office.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 865, "output_tokens": 46, "total_costs": 0.010029999999999999, "answers": ["An intaker keeps this registration with him at times when visiting the patient and in his close proximity when he is at the office.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tkeeps registration"], "original_id": "4-1_intaker_workflow-1-25"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: For each patient for which the medical file is required, the secretarial office prepares and sends a letter to the family doctor of the patient, requesting for a copy of the medical file.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 876, "output_tokens": 69, "total_costs": 0.010830000000000001, "answers": ["For each patient for which the medical file is required, the secretarial office prepares and sends a letter to the family doctor of the patient, requesting for a copy of the medical file.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tprepares\tsends\n0\tFALSE\tresponse\tprepares\trequesting"], "original_id": "4-1_intaker_workflow-1-26"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as this copy is received, the secretarial office will inform the second intaker and add the copy to the patient file.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 866, "output_tokens": 64, "total_costs": 0.010579999999999999, "answers": ["As soon as this copy is received, the secretarial office will inform the second intaker and add the copy to the patient file.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tsuccession\treceive copy\tinform second intaker\n0\tFALSE\tresponse\treceive copy\tadd copy to patient file"], "original_id": "4-1_intaker_workflow-1-27"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The first intaker plans a meeting with the patient as soon as this is possible.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 37, "total_costs": 0.00967, "answers": ["The first intaker plans a meeting with the patient as soon as this is possible.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\tplans a meeting\t"], "original_id": "4-1_intaker_workflow-1-28"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: During the first meeting, the patient is examined using a standard checklist which is filled out.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 45, "total_costs": 0.00992, "answers": ["During the first meeting, the patient is examined using a standard checklist which is filled out.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\texamine\t\n0\tFALSE\texistence\tfill out\t"], "original_id": "4-1_intaker_workflow-1-29"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Additional observations are registered in a personal notebook.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 848, "output_tokens": 31, "total_costs": 0.00941, "answers": ["Additional observations are registered in a personal notebook.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tregister observations in a personal notebook"], "original_id": "4-1_intaker_workflow-1-30"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a visit, the first intaker puts a copy of these notes in the file of a patient.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 46, "total_costs": 0.00998, "answers": ["After a visit, the first intaker puts a copy of these notes in the file of a patient.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tvisit\tputs a copy in the file"], "original_id": "4-1_intaker_workflow-1-31"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The standard checklist is also added to the patient\u00e2\u20ac\u2122s file.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 40, "total_costs": 0.009729999999999999, "answers": ["The standard checklist is also added to the patient\u00e2\u20ac\u2122s file.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tadd the standard checklist to the patient's file\t"], "original_id": "4-1_intaker_workflow-1-32"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The second intaker plans the first meeting only after the medical information of the physician if required has been received.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 56, "total_costs": 0.01029, "answers": ["The second intaker plans the first meeting\nmedical information of the physician if required has been received\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tmedical information of the physician if required has been received\tthe second intaker plans the first meeting"], "original_id": "4-1_intaker_workflow-1-33"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Physicians use dictaphones to record their observations made during meetings with patients.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 44, "total_costs": 0.00986, "answers": ["Physicians use dictaphones to record their observations made during meetings with patients.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tuse dictaphones\n0\tFALSE\texistence\trecord observations"], "original_id": "4-1_intaker_workflow-1-34"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The secretarial office types out these tapes, after which the information is added to the patient file.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 42, "total_costs": 0.009850000000000001, "answers": ["types out these tapes\nadds the information to the patient file\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\ttypes out these tapes\tadds the information to the patient file"], "original_id": "4-1_intaker_workflow-1-35"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as the meetings of the first and second intaker with the patient have taken place, the secretarial office puts the patient on the list of patients that reach this status.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 875, "output_tokens": 73, "total_costs": 0.01094, "answers": ["meetings of the first and second intaker with the patient have taken place\nputs the patient on the list of patients that reach this status\n\n#-#-#RESULT#-#-#\n0\tFALSE\tsuccession\tmeetings of the first and second intaker with the patient have taken place\tputs the patient on the list of patients that reach this status"], "original_id": "4-1_intaker_workflow-1-36"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: For the staff meeting on Wednesday, they provide the team-leader with a list of these patients.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 41, "total_costs": 0.00982, "answers": ["provide the team-leader with a list of these patients\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tprovide the team-leader with a list of these patients\t"], "original_id": "4-1_intaker_workflow-1-37"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: For each of these patients, the first and second intaker together with the team-leader and the attending psychiatrist formulate a treatment plan.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 866, "output_tokens": 49, "total_costs": 0.01013, "answers": ["For each of these patients, the first and second intaker together with the team-leader and the attending psychiatrist formulate a treatment plan.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tformulate a treatment plan\t"], "original_id": "4-1_intaker_workflow-1-38"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This treatment plan formally ends the intake procedure.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 848, "output_tokens": 29, "total_costs": 0.009349999999999999, "answers": ["This treatment plan formally ends the intake procedure.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tend\tends the intake procedure"], "original_id": "4-1_intaker_workflow-1-39"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The loan approval process starts by receiving a customer request for a loan amount.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 35, "total_costs": 0.009590000000000001, "answers": ["receiving a customer request for a loan amount\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\treceiving a customer request for a loan amount\t"], "original_id": "5-1_active_vos_tutorial-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The risk assessment Web service is invoked to assess the request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 47, "total_costs": 0.00992, "answers": ["The risk assessment Web service is invoked to assess the request.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tinvoke the risk assessment Web service\t\n0\tFALSE\texistence\tassess the request\t"], "original_id": "5-1_active_vos_tutorial-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the loan is small and the customer is low risk, the loan is approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 54, "total_costs": 0.01018, "answers": ["If the loan is small and the customer is low risk, the loan is approved.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tloan is small\tloan is approved\n0\tFALSE\tresponse\tcustomer is low risk\tloan is approved"], "original_id": "5-1_active_vos_tutorial-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer is high risk, the loan is denied.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 31, "total_costs": 0.00944, "answers": ["If the customer is high risk, the loan is denied.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tdeny loan\t"], "original_id": "5-1_active_vos_tutorial-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer needs further review or the loan amount is for $10,000 or more, the request is sent to the approver Web service.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 869, "output_tokens": 82, "total_costs": 0.01115, "answers": ["If the customer needs further review or the loan amount is for $10,000 or more, the request is sent to the approver Web service.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tneeds further review\tsent to the approver Web service\n0\tFALSE\tprecedence\tis for $10,000 or more\tsent to the approver Web service"], "original_id": "5-1_active_vos_tutorial-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The customer receives feedback from the assessor or approver.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 23, "total_costs": 0.0092, "answers": ["receives feedback#-#-#RESULT#-#-#0\tFALSE\texistence\treceives feedback"], "original_id": "5-1_active_vos_tutorial-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As a basic principle, ACME AG receives invoices on paper or fax.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 33, "total_costs": 0.00953, "answers": ["receives invoices on paper or fax\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\treceives invoices on paper or fax\t"], "original_id": "6-1_acme-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: These are received by the Secretariat in the central inbox and forwarded after a short visual inspection to an accounting employee.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 61, "total_costs": 0.010450000000000001, "answers": ["received by the Secretariat in the central inbox\nforwarded after a short visual inspection to an accounting employee\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\treceived by the Secretariat in the central inbox\tforwarded after a short visual inspection to an accounting employee"], "original_id": "6-1_acme-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In \"ACME Financial Accounting\", a software specially developed for the ACME AG, she identifies the charging suppliers and creates a new instance (invoice).\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 869, "output_tokens": 44, "total_costs": 0.01001, "answers": ["identifies the charging suppliers\ncreates a new instance (invoice)\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tidentifies the charging suppliers\tcreates a new instance (invoice)"], "original_id": "6-1_acme-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: She then checks the invoice items and notes the corresponding cost center at the ACME AG and the related cost center managers for each position on a separate form (\"docket\").\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 873, "output_tokens": 82, "total_costs": 0.01119, "answers": ["She then checks the invoice items and notes the corresponding cost center at the ACME AG and the related cost center managers for each position on a separate form (\"docket\").\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tchecks the invoice items\tnotes the corresponding cost center\n0\tFALSE\tprecedence\tnotes the corresponding cost center\tnotes the related cost center managers"], "original_id": "6-1_acme-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The docket and the copy of the invoice go to the internal mail together and are sent to the first cost center manager to the list.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 867, "output_tokens": 102, "total_costs": 0.01173, "answers": ["docket go to the internal mail\ncopy of the invoice go to the internal mail\ndocket and the copy of the invoice are sent to the first cost center manager\n#-#-#RESULT#-#-#\n0\tFALSE\tsuccession\tdocket go to the internal mail\tcopy of the invoice go to the internal mail\n0\tFALSE\tsuccession\tdocket and the copy of the invoice are sent to the first cost center manager\tdocket and the copy of the invoice go to the internal mail"], "original_id": "6-1_acme-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: He reviews the content for accuracy after receiving the copy of the invoice.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 36, "total_costs": 0.009609999999999999, "answers": ["He reviews the content for accuracy#-#-#RESULT#-#-#0\tFALSE\tprecedence\treceive the copy of the invoice\treviews the content for accuracy"], "original_id": "6-1_acme-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Should everything be in order, he notes his code one on the docket (\"accurate position - AP\") and returns the copy of the invoice to the internal mail.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 873, "output_tokens": 50, "total_costs": 0.01023, "answers": ["notes his code one on the docket#-#-#RESULT#-#-#0\tFALSE\texistence\tnotes his code one on the docket\t\n0\tFALSE\texistence\treturns the copy of the invoice to the internal mail"], "original_id": "6-1_acme-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: From it, the copy of the invoice is passed on to the next cost center manager, based on the docket, or if all items are marked correct, sent back to accounting.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 876, "output_tokens": 85, "total_costs": 0.01131, "answers": ["From it, the copy of the invoice is passed on to the next cost center manager, based on the docket, or if all items are marked correct, sent back to accounting.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tpass copy of the invoice to the next cost center manager\tbased on the docket\n0\tFALSE\tresponse\tall items are marked correct\tsend back to accounting"], "original_id": "6-1_acme-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Therefore, the copy of invoice and the docket gradually move through the hands of all cost center managers until all positions are marked as completely accurate.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 868, "output_tokens": 66, "total_costs": 0.01066, "answers": ["copy of invoice and the docket gradually move through the hands of all cost center managers\npositions are marked as completely accurate\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tcopy of invoice and the docket gradually move through the hands of all cost center managers\tpositions are marked as completely accurate"], "original_id": "6-1_acme-1-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: However, if inconsistencies exist, e.g. because the ordered product is not of the expected quantity or quality, the cost center manager rejects the AP with a note and explanatory statement on the docket, and the copy of the invoice is sent back to accounting directly.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 892, "output_tokens": 114, "total_costs": 0.01234, "answers": ["However, if inconsistencies exist, e.g. because the ordered product is not of the expected quantity or quality, the cost center manager rejects the AP with a note and explanatory statement on the docket, and the copy of the invoice is sent back to accounting directly.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\texist inconsistencies\treject the AP with a note and explanatory statement on the docket\n0\tFALSE\tsuccession\treject the AP with a note and explanatory statement on the docket\tsend back the copy of the invoice to accounting"], "original_id": "6-1_acme-1-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Based on the statements of the cost center managers, she will proceede with the clarification with the vendor, but, if necessary, she consults the cost center managers by telephone or e-mail again.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 879, "output_tokens": 77, "total_costs": 0.0111, "answers": ["Based on the statements of the cost center managers, she will proceede with the clarification with the vendor, but, if necessary, she consults the cost center managers by telephone or e-mail again.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tproceede with the clarification with the vendor\tconsults the cost center managers by telephone or e-mail"], "original_id": "6-1_acme-1-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When all inconsistencies are resolved, the copy of the invoice is sent to the cost center managers again, and the process continues.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 62, "total_costs": 0.0105, "answers": ["resolve inconsistencies\nsend copy of the invoice to the cost center managers\ncontinue process\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tresolve inconsistencies\tsend copy of the invoice to the cost center managers\n0\tFALSE\tsuccession\tsend copy of the invoice to the cost center managers\tcontinue process"], "original_id": "6-1_acme-1-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After all invoice items are AP, the accounting employee forwards the copy of the invoice to the commercial manager.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 44, "total_costs": 0.00992, "answers": ["After all invoice items are AP, the accounting employee forwards the copy of the invoice to the commercial manager.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\tforwards the copy of the invoice\t"], "original_id": "6-1_acme-1-12"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: He makes the commercial audit and issues the approval for payment.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 49, "total_costs": 0.00998, "answers": ["He makes the commercial audit#-#-#RESULT#-#-#0\tFALSE\tprecedence\tmakes the commercial audit\tissues the approval for payment\n0\tFALSE\tresponse\tmakes the commercial audit\tissues the approval for payment"], "original_id": "6-1_acme-1-13"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the bill amount exceeds EUR 20,000, the Board wants to check it again (4-eyes-principle).\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 49, "total_costs": 0.010110000000000001, "answers": ["bill amount exceeds EUR 20,000\nBoard wants to check it again\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tbill amount exceeds EUR 20,000\tBoard wants to check it again"], "original_id": "6-1_acme-1-14"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The copy of the invoice including the docket moves back to the accounting employee in the appropriate signature file.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 57, "total_costs": 0.01031, "answers": ["The copy of the invoice including the docket moves back to the accounting employee in the appropriate signature file.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tmove back the copy of the invoice including the docket to the accounting employee in the appropriate signature file"], "original_id": "6-1_acme-1-15"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Should there be a complaint during the commercial audit, it will be resolved by the accounting employee with the supplier.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 36, "total_costs": 0.009689999999999999, "answers": ["complaint during the commercial audit#-#-#RESULT#-#-#0\tFALSE\tresponse\tcomplaint during the commercial audit\tresolved by the accounting employee with the supplier"], "original_id": "6-1_acme-1-16"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After the commercial audit is successfully completed, the accounting employee gives payment instructions and closes the instance in \"ACME financial accounting\".\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 73, "total_costs": 0.01083, "answers": ["After the commercial audit is successfully completed, the accounting employee gives payment instructions and closes the instance in \"ACME financial accounting\".\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcommercial audit is successfully completed\tgives payment instructions\n0\tFALSE\tsuccession\tgives payment instructions\tcloses the instance in \"ACME financial accounting\""], "original_id": "6-1_acme-1-17"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: First, the Manager checks the open leads.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 848, "output_tokens": 29, "total_costs": 0.009349999999999999, "answers": ["First, the Manager checks the open leads.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\tchecks the open leads"], "original_id": "7-1_calling_leads-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, he selects the top five ones.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 848, "output_tokens": 30, "total_costs": 0.00938, "answers": ["selects the top five ones\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tselects the top five ones\t"], "original_id": "7-1_calling_leads-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: He then tells his Sales Assistant to call the contact person of the leads.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 40, "total_costs": 0.00974, "answers": ["He then tells his Sales Assistant to call the contact person of the leads.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\ttells to call\tcall the contact person"], "original_id": "7-1_calling_leads-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The Sales Assistant calls each customer.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 846, "output_tokens": 27, "total_costs": 0.00927, "answers": ["The Sales Assistant calls each customer.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tcalls each customer"], "original_id": "7-1_calling_leads-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If someone is interested, he sends a note to the Manager.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 37, "total_costs": 0.00963, "answers": ["If someone is interested, he sends a note to the Manager.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tsends a note to the Manager\t"], "original_id": "7-1_calling_leads-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The Manager then processes the lead.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 846, "output_tokens": 27, "total_costs": 0.00927, "answers": ["The Manager then processes the lead.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tprocesses the lead"], "original_id": "7-1_calling_leads-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Otherwise, he calls the next customer.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 847, "output_tokens": 29, "total_costs": 0.00934, "answers": ["Otherwise, he calls the next customer.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tcalls the next customer"], "original_id": "7-1_calling_leads-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 847, "output_tokens": 26, "total_costs": 0.00925, "answers": ["reviewing the order\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\treviewing the order\t"], "original_id": "784358570_rev2-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The staff should check if all the requested items are available.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 34, "total_costs": 0.00953, "answers": ["check if all the requested items are available\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tcheck if all the requested items are available\t"], "original_id": "784358570_rev2-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 38, "total_costs": 0.00974, "answers": ["inform customer about a potential delay\norder the missing products\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tinform customer about a potential delay\torder the missing products"], "original_id": "784358570_rev2-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the exceptional case of a discontinued item, the customer should be informed about the not longer available items.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 45, "total_costs": 0.00995, "answers": ["In the exceptional case of a discontinued item, the customer should be informed about the not longer available items.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tinform customer\tabout not longer available items"], "original_id": "784358570_rev2-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After waiting an average of x days for the delivery, the staff should check again if all products are on store.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 48, "total_costs": 0.010060000000000001, "answers": ["waiting an average of x days for the delivery#-#-#RESULT#-#-#0\tFALSE\tinit\twaiting an average of x days for the delivery\t\n0\tFALSE\texistence\tcheck again if all products are on store"], "original_id": "784358570_rev2-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If everything is OK, then the staff recollects all products and prepare a package.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 34, "total_costs": 0.00959, "answers": ["recollects all products\nprepare a package\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\trecollects all products\tprepare a package"], "original_id": "784358570_rev2-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The courier is then informed about the pre-processed package.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 37, "total_costs": 0.00962, "answers": ["The courier is then informed about the pre-processed package.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tinform about the pre-processed package\t"], "original_id": "784358570_rev2-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The courier company informs the client about a potential delay until there are enough human resources to process the delivery.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 36, "total_costs": 0.00968, "answers": ["The courier company informs the client about a potential delay #-#-#RESULT#-#-# \n0\tFALSE\texistence\tinforms the client about a potential delay\t"], "original_id": "784358570_rev2-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Then, the package is picked up by the designed driver.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 32, "total_costs": 0.009470000000000001, "answers": ["Then, the package is picked up by the designed driver.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\tpick up package\t"], "original_id": "784358570_rev2-1-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A centralized service decides the best route to deliver all driver's packages.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 36, "total_costs": 0.009609999999999999, "answers": ["A centralized service decides the best route to deliver all driver's packages.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\tA centralized service decides the best route"], "original_id": "784358570_rev2-1-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the driver delivers the package, she should update the system so all stakeholders are notified.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 53, "total_costs": 0.010159999999999999, "answers": ["Once the driver delivers the package, she should update the system so all stakeholders are notified.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tsuccession\tdelivers the package\tupdate the system\n0\tFALSE\tresponse\tupdate the system\tnotify all stakeholders"], "original_id": "784358570_rev2-1-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process is triggered by the demand of a functional department to fill a post.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 38, "total_costs": 0.00969, "answers": ["The process is triggered by the demand of a functional department to fill a post.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\ttrigger demand to fill a post\t"], "original_id": "8-1_hr_process_simple-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The post is advertised, applicants apply, the applications are checked and the post is filled.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 70, "total_costs": 0.010669999999999999, "answers": ["advertised the post\napply applicants\nchecked the applications\nfilled the post\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tadvertised the post\tapply applicants\n0\tFALSE\tprecedence\tapply applicants\tchecked the applications\n0\tFALSE\tprecedence\tchecked the applications\tfilled the post"], "original_id": "8-1_hr_process_simple-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process finishes when the post was filled, precisely through the conclusion of a contract of employment.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 51, "total_costs": 0.010110000000000001, "answers": ["The process finishes\npost was filled\nconclusion of a contract of employment\n\n#-#-#RESULT#-#-#\n0\tFALSE\tend\tThe process finishes\t\n0\tFALSE\tprecedence\tpost was filled\tconclusion of a contract of employment"], "original_id": "8-1_hr_process_simple-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The Customer Service Representative sends a Mortgage offer to the customer and waits for a reply.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 44, "total_costs": 0.00988, "answers": ["The Customer Service Representative sends a Mortgage offer to the customer and waits for a reply.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tsends a Mortgage offer\twaits for a reply"], "original_id": "9-2_exercise_2-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer calls or writes back declining the mortgage, the case details are updated and the work is then archived prior to cancellation.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 865, "output_tokens": 101, "total_costs": 0.01168, "answers": ["customer calls\ncustomer writes back declining the mortgage\ncase details are updated\nwork is archived\nwork is archived prior to cancellation\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcustomer calls\tcustomer writes back declining the mortgage\n0\tFALSE\tprecedence\tcustomer writes back declining the mortgage\tcase details are updated\n0\tFALSE\tprecedence\tcase details are updated\twork is archived\n0\tFALSE\tprecedence\twork is archived\twork is archived prior to cancellation"], "original_id": "9-2_exercise_2-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer sends back the completed offer documents and attaches all prerequisite documents then the case is moved to administration for completion.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 69, "total_costs": 0.010700000000000001, "answers": ["sends back the completed offer documents\nattaches all prerequisite documents\nis moved to administration for completion\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tsends back the completed offer documents\tattaches all prerequisite documents\n0\tFALSE\tsuccession\tattaches all prerequisite documents\tis moved to administration for completion"], "original_id": "9-2_exercise_2-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If all pre-requisite documents are not provided a message is generated to the customer requesting outstanding documents.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 57, "total_costs": 0.0103, "answers": ["pre-requisite documents are provided\nmessage is generated to the customer\nrequesting outstanding documents\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tabsence\tpre-requisite documents are provided\t\n0\tFALSE\tresponse\tmessage is generated to the customer\trequesting outstanding documents"], "original_id": "9-2_exercise_2-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If no answer is received after 2 weeks, the case details are updated prior to archive and cancellation.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 60, "total_costs": 0.0104, "answers": ["receive answer\nupdate case details\narchive case details\ncancel case\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tabsence\treceive answer\t\n0\tFALSE\tprecedence\tupdate case details\tarchive case details\n0\tFALSE\tprecedence\tupdate case details\tcancel case"], "original_id": "9-2_exercise_2-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it can be approved or rejected.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 48, "total_costs": 0.00997, "answers": ["A claim must be created, before it can be approved or rejected.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tcreate claim\tapprove claim\n0\tFALSE\tprecedence\tcreate claim\treject claim"], "original_id": "datacollection_1-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be approved before it can be paid out.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 36, "total_costs": 0.00959, "answers": ["A claim should be approved before it can be paid out.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tapprove claim\tpay out claim"], "original_id": "datacollection_1-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been approved, it should eventually be paid out.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 50, "total_costs": 0.010029999999999999, "answers": ["Once a claim has been approved, it should eventually be paid out.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tapprove claim\tpay out claim\n0\tFALSE\tresponse\tapprove claim\tpay out claim"], "original_id": "datacollection_1-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a claim has been rejected, it should not be paid out.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 44, "total_costs": 0.00985, "answers": ["Once a claim has been rejected, it should not be paid out.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\treject claim\t\n0\tTRUE\texistence\tpay out claim\t"], "original_id": "datacollection_1-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Payout should end the process and therefore exclude everything.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 39, "total_costs": 0.009670000000000002, "answers": ["Payout should end the process and therefore exclude everything.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tend\tPayout\t\n0\tFALSE\tabsence\texclude everything\t"], "original_id": "datacollection_1-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A case can be closed manually at any time, unless we still need to pay out the claim.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 58, "total_costs": 0.01033, "answers": ["A case can be closed manually at any time, unless we still need to pay out the claim.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tclose manually a case\t\n0\tTRUE\tnoncooccurrence\tclose manually a case\tpay out the claim"], "original_id": "datacollection_1-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case can be managed at the union after it has been created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 38, "total_costs": 0.00967, "answers": ["The case can be managed at the union after it has been created.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreate the case\tmanage the case"], "original_id": "datacollection_1-2-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 60, "total_costs": 0.01043, "answers": ["After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tcreate a case\tarrange a meeting\n0\tFALSE\tresponse\tcreate a case\tarrange a meeting"], "original_id": "datacollection_1-2-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a meeting is arranged it must be held.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 849, "output_tokens": 44, "total_costs": 0.00981, "answers": ["After a meeting is arranged #-#-#RESULT#-#-# 0\tFALSE\tprecedence\tarrange a meeting\thold a meeting\n0\tFALSE\tresponse\tarrange a meeting\thold a meeting"], "original_id": "datacollection_1-2-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 866, "output_tokens": 71, "total_costs": 0.01079, "answers": ["enter metadata on the case\ninform about availability for participating in a meeting\nsubmit the case\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tenter metadata on the case\tinform about availability for participating in a meeting\n0\tFALSE\tprecedence\tinform about availability for participating in a meeting\tsubmit the case"], "original_id": "datacollection_1-2-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted it may get a local id at the union, but it should also subsequently be assigned a case id in LO.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 867, "output_tokens": 55, "total_costs": 0.010320000000000001, "answers": ["get a local id at the union#-#-#RESULT#-#-#0\tFALSE\tprecedence\tsubmit a case\tget a local id at the union\n0\tFALSE\tsuccession\tget a local id at the union\tbe assigned a case id in LO"], "original_id": "datacollection_1-2-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a case is submitted, LO should eventually propose dates.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 30, "total_costs": 0.00941, "answers": ["submit case\npropose dates\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tsubmit case\tpropose dates"], "original_id": "datacollection_1-2-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after LO has assigned its case id it is possible to manage the case and for LO to propose dates.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 63, "total_costs": 0.010499999999999999, "answers": ["Only after LO has assigned its case id it is possible to manage the case and for LO to propose dates.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tassign its case id\tmanage the case\n0\tFALSE\tprecedence\tassign its case id\tpropose dates"], "original_id": "datacollection_1-2-12"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once a date has been agreed upon a meeting should eventually be held.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 43, "total_costs": 0.009819999999999999, "answers": ["Once a date has been agreed upon#-#-#RESULT#-#-#0\tFALSE\tprecedence\tagree upon date\thold meeting\n0\tFALSE\tresponse\tagree upon date\thold meeting"], "original_id": "datacollection_1-2-13"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance starts by examining a patient.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 848, "output_tokens": 28, "total_costs": 0.00932, "answers": ["Every process instance starts by examining a patient.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\texamine a patient"], "original_id": "datacollection_1-6-14"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an x-ray is taken, then the x-ray risk must be checked before it\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 47, "total_costs": 0.00998, "answers": ["take x-ray\ncheck x-ray risk\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tcheck x-ray risk\ttake x-ray\n0\tFALSE\tresponse\ttake x-ray\tcheck x-ray risk"], "original_id": "datacollection_1-6-15"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Performing a reposition, applying a cast and performing surgery require that x-rays are performed before.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 77, "total_costs": 0.01089, "answers": ["Performing a reposition\nApplying a cast\nPerforming surgery\nX-rays are performed\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tX-rays are performed\tPerforming a reposition\n0\tFALSE\tprecedence\tX-rays are performed\tApplying a cast\n0\tFALSE\tprecedence\tX-rays are performed\tPerforming surgery"], "original_id": "datacollection_1-6-16"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a surgery is performed, then prescription of rehabilitation occurs eventually after it.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 53, "total_costs": 0.01013, "answers": ["surgery is performed\nprescription of rehabilitation occurs\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tsurgery is performed\tprescription of rehabilitation occurs\n0\tFALSE\tprecedence\tsurgery is performed\tprescription of rehabilitation occurs"], "original_id": "datacollection_1-6-17"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 867, "output_tokens": 64, "total_costs": 0.01059, "answers": ["After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tnoncooccurrence\tapply cast\tremove cast\n0\tFALSE\tprecedence\tapply cast\tremove cast"], "original_id": "datacollection_1-6-18"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process begins with the booking of the ticket\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 849, "output_tokens": 25, "total_costs": 0.00924, "answers": ["booking of the ticket\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\tbooking of the ticket"], "original_id": "datacollection_1-3-19"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Personal information of passengers can be provided after the booking of the ticket\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 41, "total_costs": 0.00976, "answers": ["Personal information of passengers can be provided after the booking of the ticket\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tbook the ticket\tprovide personal information of passengers"], "original_id": "datacollection_1-3-20"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket triggers the completion of the booking phase.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 39, "total_costs": 0.00969, "answers": ["The payment of the ticket\nthe completion of the booking phase\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tpayment of the ticket\tcompletion of the booking phase"], "original_id": "datacollection_1-3-21"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The payment of the ticket is eventually followed by the actual transfer of money\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 35, "total_costs": 0.009590000000000001, "answers": ["payment of the ticket\ntransfer of money\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tpayment of the ticket\ttransfer of money"], "original_id": "datacollection_1-3-22"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 40, "total_costs": 0.00984, "answers": ["Check-in of the flight\nmodify the provided data\n\n#-#-#RESULT#-#-#\n0\tFALSE\tnoncooccurrence\tCheck-in of the flight\tmodify the provided data"], "original_id": "datacollection_1-3-23"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After check-in of the flight, only the cancellation is admitted\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 33, "total_costs": 0.00951, "answers": ["check-in of the flight\ncancellation\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcheck-in of the flight\tcancellation"], "original_id": "datacollection_1-3-24"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when an invoice is received by the administration department.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 32, "total_costs": 0.00948, "answers": ["The process starts when an invoice is received by the administration department.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\treceive invoice\t"], "original_id": "datacollection_1-1-25"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If they decide that the invoice appears legit then they enter all relevant data into the system\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 47, "total_costs": 0.00998, "answers": ["decide that the invoice appears legit\nenter all relevant data into the system\n\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tdecide that the invoice appears legit\tenter all relevant data into the system"], "original_id": "datacollection_1-1-26"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When all necessary approvals have been received the invoice can be paid.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 29, "total_costs": 0.009389999999999999, "answers": ["receive approvals\npay invoice\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\treceive approvals\tpay invoice"], "original_id": "datacollection_1-1-27"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once payment is confirmed, the invoice case should be closed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 46, "total_costs": 0.00989, "answers": ["Once payment is confirmed, the invoice case should be closed.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tconfirm payment\tclose invoice case\n0\tFALSE\tresponse\tconfirm payment\tclose invoice case"], "original_id": "datacollection_1-1-28"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The receipt of an invoice is required before the administration department can enter data or scan the invoice.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 53, "total_costs": 0.01017, "answers": ["receipt of an invoice\nenter data\nscan the invoice\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\treceipt of an invoice\tenter data\n0\tFALSE\tprecedence\treceipt of an invoice\tscan the invoice"], "original_id": "datacollection_1-1-29"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Enter data is required before any approval can be given.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 24, "total_costs": 0.00922, "answers": ["Enter data#-#-#RESULT#-#-#0\tFALSE\tprecedence\tEnter data\tapproval"], "original_id": "datacollection_1-1-30"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Finally, we have to pay the invoice before we can confirm payment.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 31, "total_costs": 0.00946, "answers": ["pay the invoice\nconfirm payment\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tpay the invoice\tconfirm payment"], "original_id": "datacollection_1-1-31"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a request is sent, then a proposal is expected to be prepared afterwards\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 48, "total_costs": 0.00999, "answers": ["If a request is sent, then a proposal is expected to be prepared afterwards\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tsend request\tprepare proposal\n0\tFALSE\tresponse\tsend request\tprepare proposal"], "original_id": "datacollection_1-4-32"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation \n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 867, "output_tokens": 58, "total_costs": 0.01041, "answers": ["A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation #-#-#RESULT#-#-#\n0\tFALSE\tsuccession\tgive confirmation\tproposal\n0\tFALSE\tsuccession\tproposal\tgive confirmation"], "original_id": "datacollection_1-4-33"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every process instance has to start by registering client data\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 25, "total_costs": 0.009250000000000001, "answers": ["registering client data\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\tregistering client data\t"], "original_id": "datacollection_1-5-34"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every provided room service must be billed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 847, "output_tokens": 31, "total_costs": 0.0094, "answers": ["Every provided room service must be billed.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tprovide room service\tbill room service"], "original_id": "datacollection_1-5-35"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Every provided laundry service must be billed\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 847, "output_tokens": 31, "total_costs": 0.0094, "answers": ["Every provided laundry service must be billed\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tprovide laundry service\tbill laundry service"], "original_id": "datacollection_1-5-36"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When the client leaves, the bill must be charged\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 31, "total_costs": 0.009430000000000001, "answers": ["When the client leaves, the bill must be charged\n\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tleaves\tcharged"], "original_id": "datacollection_1-5-37"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim should be created, before it can be approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 36, "total_costs": 0.00959, "answers": ["A claim should be created, before it can be approved.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tcreate a claim\tapprove a claim"], "original_id": "datacollection_2-1-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim must be created, before it is approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 35, "total_costs": 0.009550000000000001, "answers": ["A claim must be created, before it is approved.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreate a claim\tapprove the claim"], "original_id": "datacollection_2-1-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When a claim is created, it may be approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 28, "total_costs": 0.009340000000000001, "answers": ["create claim\napprove claim\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection_2-1-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is created, it can be approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 32, "total_costs": 0.009460000000000001, "answers": ["create a claim\napprove a claim\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreate a claim\tapprove a claim"], "original_id": "datacollection_2-1-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: They have to create the claim, before they can approve it.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 29, "total_costs": 0.009389999999999999, "answers": ["They have to create the claim#-#-#RESULT#-#-#0\tFALSE\tprecedence\tcreate the claim\tapprove it"], "original_id": "datacollection_2-1-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after a claim is created, it is possible to approve the claim.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 33, "total_costs": 0.00953, "answers": ["claim is created\napprove the claim\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tclaim is created\tapprove the claim"], "original_id": "datacollection_2-1-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If a claim is approved, then it must have been created first.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 36, "total_costs": 0.009609999999999999, "answers": ["If a claim is approved, then it must have been created first.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection_2-1-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: To approve a claim, it should be created first.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 35, "total_costs": 0.009550000000000001, "answers": ["To approve a claim, it should be created first.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreate a claim\tapprove a claim"], "original_id": "datacollection_2-1-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A claim can be approved, after it has been created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 33, "total_costs": 0.0095, "answers": ["A claim can be approved, after it has been created.#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreate claim\tapprove claim"], "original_id": "datacollection_2-1-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Approving the claim can happen at anytime, unless it still needs to be created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 46, "total_costs": 0.00994, "answers": ["Approving the claim\nCreating the claim\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tApproving the claim\t\n0\tTRUE\tprecedence\tCreating the claim\tApproving the claim"], "original_id": "datacollection_2-1-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Creation of the claim is required, before it can be approved.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 31, "total_costs": 0.00945, "answers": ["Creation of the claim#-#-#RESULT#-#-#0\tFALSE\tprecedence\tcreation of the claim\tapproval of the claim"], "original_id": "datacollection_2-1-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The creation of the claim is a condition for the approval of the claim.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 37, "total_costs": 0.00965, "answers": ["creation of the claim\napproval of the claim\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreation of the claim\tapproval of the claim"], "original_id": "datacollection_2-1-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Only after the creation of a claim, the approval of the claim is possible.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 37, "total_costs": 0.00966, "answers": ["creation of a claim\napproval of the claim\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreation of a claim\tapproval of the claim"], "original_id": "datacollection_2-1-12"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When approval of the claim occurs, creation of the claim must have preceded.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 37, "total_costs": 0.00965, "answers": ["approval of the claim\ncreation of the claim\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreation of the claim\tapproval of the claim"], "original_id": "datacollection_2-1-13"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If approval of the claim occurs, then creation of the claim must have been carried out first.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 37, "total_costs": 0.00969, "answers": ["approval of the claim\ncreation of the claim\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreation of the claim\tapproval of the claim"], "original_id": "datacollection_2-1-14"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim requires that the creation of the claim occurs before it.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 855, "output_tokens": 37, "total_costs": 0.00966, "answers": ["approval of the claim\ncreation of the claim\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcreation of the claim\tapproval of the claim"], "original_id": "datacollection_2-1-15"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The approval of the claim should be preceded by the creation of the claim.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 39, "total_costs": 0.00971, "answers": ["The approval of the claim should be preceded by the creation of the claim.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tcreate the claim\tapprove the claim"], "original_id": "datacollection_2-1-16"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The Police Report related to the car accident is searched within the Police Report database and put in a file together with the Claim Documentation.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 865, "output_tokens": 57, "total_costs": 0.01036, "answers": ["search Police Report within the Police Report database\nput Police Report in a file together with the Claim Documentation\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tsearch Police Report within the Police Report database\tput Police Report in a file together with the Claim Documentation"], "original_id": "datacollection_3-claimscreation.txt-0"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: A customer brings in a defective computer and the manager analyzes the defect and gives back an invoice.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 68, "total_costs": 0.010620000000000001, "answers": ["A customer brings in a defective computer\nthe manager analyzes the defect\nthe manager gives back an invoice\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tA customer brings in a defective computer\tthe manager analyzes the defect\n0\tFALSE\tprecedence\tthe manager analyzes the defect\tthe manager gives back an invoice"], "original_id": "datacollection_3-Model1-2.txt-1"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After each of these activities, the proper system functionality is tested.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 34, "total_costs": 0.00954, "answers": ["After each of these activities, the proper system functionality is tested.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\ttest system functionality\tperform activities"], "original_id": "datacollection_3-Model1-2.txt-2"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If an error is detected, another arbitrary repair activity is executed, otherwise the repair is finished.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 73, "total_costs": 0.01077, "answers": ["detect error\nexecute repair activity\nfinish repair\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tdetect error\texecute repair activity\n0\tFALSE\tresponse\tdetect error\texecute repair activity\n0\tFALSE\tprecedence\texecute repair activity\tfinish repair\n0\tTRUE\tprecedence\tdetect error\tfinish repair"], "original_id": "datacollection_3-Model1-2.txt-3"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a claim is registered, it is examined by a claims officer.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 42, "total_costs": 0.00979, "answers": ["After a claim is registered, it is examined by a claims officer.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tregister a claim\texamine the claim by a claims officer"], "original_id": "datacollection_3-Model3-3.txt-4"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: This recommendation is then checked by a senior claims officer who may mark the claim as OK or Not OK.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 32, "total_costs": 0.00956, "answers": ["This recommendation is checked by a senior claims officer#-#-#RESULT#-#-#\n0\tFALSE\texistence\tcheck recommendation by a senior claims officer"], "original_id": "datacollection_3-Model3-3.txt-5"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is marked as Not OK, it is sent back to the claims officer and the recommendation is repeated.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 50, "total_costs": 0.01012, "answers": ["If the claim is marked as Not OK#-#-#RESULT#-#-#0\tFALSE\tprecedence\tmark claim as Not OK\tsend back to claims officer\n0\tFALSE\tresponse\tmark claim as Not OK\trepeat recommendation"], "original_id": "datacollection_3-Model3-3.txt-6"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the claim is OK, the claim handling process proceeds.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 851, "output_tokens": 25, "total_costs": 0.009260000000000001, "answers": ["claim handling process proceeds\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\tclaim handling process proceeds"], "original_id": "datacollection_3-Model3-3.txt-7"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of buying new hardware is started as soon as a request for new hardware is received by the IT department.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 45, "total_costs": 0.009970000000000001, "answers": ["buying new hardware\nrequest for new hardware\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\trequest for new hardware\t\n0\tFALSE\tprecedence\trequest for new hardware\tbuying new hardware"], "original_id": "datacollection_3-472026493_rev3.txt-8"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The next step is for the IT department to analyse the request and either approve or deny it.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 858, "output_tokens": 51, "total_costs": 0.010110000000000001, "answers": ["analyse the request\napprove it\ndeny it\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tanalyse the request\tapprove it\n0\tFALSE\tprecedence\tanalyse the request\tdeny it"], "original_id": "datacollection_3-472026493_rev3.txt-9"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If it is denied, the employee is informed via email about the denial and the process is ended.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 56, "total_costs": 0.010270000000000001, "answers": ["If it is denied, the employee is informed via email about the denial and the process is ended.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tinform via email about the denial\tend the process\n0\tFALSE\tend\tend the process\t"], "original_id": "datacollection_3-472026493_rev3.txt-10"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: However, if the request is approved it is edited and completed.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 37, "total_costs": 0.00963, "answers": ["request is approved # edited # completed #-#-#RESULT#-#-#\n0\tFALSE\tprecedence\trequest is approved\tedited\n0\tFALSE\tresponse\tedited\tcompleted"], "original_id": "datacollection_3-472026493_rev3.txt-11"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once this offer is received, a form is filled in and sent to the management.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 54, "total_costs": 0.01018, "answers": ["Once this offer is received, a form is filled in and sent to the management.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\treceive offer\tfill in form\n0\tFALSE\tprecedence\tfill in form\tsend form to management"], "original_id": "datacollection_3-472026493_rev3.txt-12"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The management then analyses the request and decides if it is approved or not.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 46, "total_costs": 0.00992, "answers": ["The management then analyses the request and decides if it is approved or not.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tanalyses the request\tdecides if it is approved or not"], "original_id": "datacollection_3-472026493_rev3.txt-13"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: When this is accepted and the financial resources are found, the hardware is received by the IT department.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 36, "total_costs": 0.00967, "answers": ["accepted#-#-#RESULT#-#-#0\tFALSE\tprecedence\taccepted\tfind financial resources\n0\tFALSE\tprecedence\tfind financial resources\treceive hardware"], "original_id": "datacollection_3-472026493_rev3.txt-14"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After which the financial department will take care of the invoice and the processes is ended.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 39, "total_costs": 0.009729999999999999, "answers": ["After which the financial department will take care of the invoice and the processes is ended.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tend\ttake care of the invoice\t"], "original_id": "datacollection_3-472026493_rev3.txt-15"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In the scenario where the management does not approve the request, it can send the request back to the IT department for rework, then the IT department has to go back to editing and completing a request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 880, "output_tokens": 75, "total_costs": 0.01105, "answers": ["approve the request\nsend the request back\ngo back to editing\ncompleting a request\n#-#-#RESULT#-#-#\n0\tFALSE\tnoncooccurrence\tapprove the request\tsend the request back\n0\tFALSE\tresponse\tsend the request back\tgo back to editing\n0\tFALSE\tsuccession\tgo back to editing\tcompleting a request"], "original_id": "datacollection_3-472026493_rev3.txt-16"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the management does not approve the request, it can also decide to deny the request after which the process is ended.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 71, "total_costs": 0.01076, "answers": ["approve the request\ndeny the request\nend the process\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tapprove the request\tdeny the request\n0\tFALSE\tprecedence\tdeny the request\tend the process\n0\tTRUE\tabsence\tapprove the request\t\n0\tFALSE\tend\tend the process\t"], "original_id": "datacollection_3-472026493_rev3.txt-17"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The loan approval process starts by receiving a customer request for a loan amount.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 35, "total_costs": 0.009590000000000001, "answers": ["receiving a customer request for a loan amount\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\treceiving a customer request for a loan amount\t"], "original_id": "datacollection_3-Model5-1.txt-18"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the customer needs further review or the loan amount is for \\$10,000 or more, the request is sent to the approver Web service.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 869, "output_tokens": 41, "total_costs": 0.00992, "answers": ["needs further review\nsent to the approver Web service\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tneeds further review\tsent to the approver Web service"], "original_id": "datacollection_3-Model5-1.txt-19"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process of an Office Supply Request starts when any employee of the organization submits an office supply request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 41, "total_costs": 0.00982, "answers": ["The process of an Office Supply Request starts when any employee of the organization submits an office supply request.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\tsubmits an office supply request"], "original_id": "datacollection_3-Model5-3.txt-20"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the office supplies.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 44, "total_costs": 0.00993, "answers": ["Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the office supplies.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tregister requirement\treceive request"], "original_id": "datacollection_3-Model5-3.txt-21"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the process will end.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 850, "output_tokens": 29, "total_costs": 0.00937, "answers": ["request is rejected\nprocess will end\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\trequest is rejected\tprocess will end"], "original_id": "datacollection_3-Model5-3.txt-22"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is asked to make a change, then it is returned to the petitioner who can review the comments for the change request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 866, "output_tokens": 60, "total_costs": 0.010459999999999999, "answers": ["If the request is asked to make a change, then it is returned to the petitioner who can review the comments for the change request.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tmake a change\treturn the request\n0\tFALSE\tresponse\treturn the request\treview the comments"], "original_id": "datacollection_3-Model5-3.txt-23"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, it will go to the purchase department that will be in charge of making quotations (using a subprocess) and select a vendor.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 870, "output_tokens": 70, "total_costs": 0.0108, "answers": ["request is approved\ngo to the purchase department\nmaking quotations\nselect a vendor\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\trequest is approved\tgo to the purchase department\n0\tFALSE\tprecedence\tgo to the purchase department\tmaking quotations\n0\tFALSE\tprecedence\tmaking quotations\tselect a vendor"], "original_id": "datacollection_3-Model5-3.txt-24"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After a vendor is selected and confirmed, the system will generate and send a purchase order and wait for the product to be delivered and the invoice received.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 869, "output_tokens": 106, "total_costs": 0.011869999999999999, "answers": ["select and confirm a vendor\ngenerate a purchase order\nsend a purchase order\nwait for the product to be delivered\nreceive the invoice\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tselect and confirm a vendor\tgenerate a purchase order\n0\tFALSE\tprecedence\tgenerate a purchase order\tsend a purchase order\n0\tFALSE\tsuccession\tsend a purchase order\twait for the product to be delivered\n0\tFALSE\tprecedence\twait for the product to be delivered\treceive the invoice"], "original_id": "datacollection_3-Model5-3.txt-25"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: In any of the cases, approval, rejection or change required the system will send the user a notification.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 90, "total_costs": 0.0113, "answers": ["In any of the cases, approval, rejection or change required the system will send the user a notification.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tapproval\t\n0\tFALSE\texistence\trejection\t\n0\tFALSE\texistence\tchange\t\n0\tFALSE\tresponse\tsend the user a notification\tapproval\t\n0\tFALSE\tresponse\tsend the user a notification\trejection\t\n0\tFALSE\tresponse\tsend the user a notification\tchange\t"], "original_id": "datacollection_3-Model5-3.txt-26"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts when any employee of the organization submits a vacation request.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 853, "output_tokens": 34, "total_costs": 0.00955, "answers": ["The process starts when any employee of the organization submits a vacation request.\n\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\tsubmits a vacation request"], "original_id": "datacollection_3-Model5-2.txt-27"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the requirement is registered, the request is received by the immediate supervisor of the employee requesting the vacation.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 28, "total_costs": 0.00944, "answers": ["register requirement\nreceive request\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tregister requirement\treceive request"], "original_id": "datacollection_3-Model5-2.txt-28"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is rejected, the application is returned to the applicant/employee who can review the rejection reasons.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 50, "total_costs": 0.01011, "answers": ["request is rejected\napplication is returned\nreview the rejection reasons\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\trequest is rejected\tapplication is returned\n0\tFALSE\tresponse\trequest is rejected\treview the rejection reasons"], "original_id": "datacollection_3-Model5-2.txt-29"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the request is approved, a notification is generated to the Human Resources Representative, who must complete the respective management procedures.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 863, "output_tokens": 52, "total_costs": 0.010190000000000001, "answers": ["request is approved\nnotification is generated\ncomplete the respective management procedures\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\trequest is approved\tnotification is generated\n0\tFALSE\tsuccession\tnotification is generated\tcomplete the respective management procedures"], "original_id": "datacollection_3-Model5-2.txt-30"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The process starts by reviewing the order.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 847, "output_tokens": 26, "total_costs": 0.00925, "answers": ["reviewing the order\n#-#-#RESULT#-#-#\n0\tFALSE\tinit\treviewing the order\t"], "original_id": "datacollection_3-784358570_rev2.txt-31"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If something is missing, the staff has to inform customer about a potential delay and order the missing products.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 38, "total_costs": 0.00974, "answers": ["inform customer about a potential delay\norder the missing products\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\tinform customer about a potential delay\torder the missing products"], "original_id": "datacollection_3-784358570_rev2.txt-32"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After waiting an average of x days for the delivery, the staff should check again if all products are on store.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 862, "output_tokens": 54, "total_costs": 0.01024, "answers": ["waiting an average of x days for the delivery\ncheck again if all products are on store\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\twaiting an average of x days for the delivery\tcheck again if all products are on store"], "original_id": "datacollection_3-784358570_rev2.txt-33"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: The courier company informs the client about a potential delay until there are enough human resources to process the delivery.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 860, "output_tokens": 44, "total_costs": 0.00992, "answers": ["The courier company informs the client about a potential delay\nThe courier company process the delivery\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tinforms the client about a potential delay\tprocess the delivery"], "original_id": "datacollection_3-784358570_rev2.txt-34"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the driver delivers the package, she should update the system so all stakeholders are notified.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 857, "output_tokens": 53, "total_costs": 0.010159999999999999, "answers": ["Once the driver delivers the package, she should update the system so all stakeholders are notified.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tsuccession\tdelivers the package\tupdate the system\n0\tFALSE\tresponse\tupdate the system\tnotify all stakeholders"], "original_id": "datacollection_3-784358570_rev2.txt-35"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Whenever the sales department receives an order, a new process instance is created.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 37, "total_costs": 0.00965, "answers": ["receives an order\ncreated a new process instance\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\treceives an order\tcreated a new process instance"], "original_id": "datacollection_3-BicycleManufacturing.txt-36"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the storehouse has successfully reserved or back-ordered every item of the part list and the preparation activity has finished, the engineering department assembles the bicycle.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 871, "output_tokens": 68, "total_costs": 0.010750000000000001, "answers": ["reserve or back-order every item of the part list\nfinish the preparation activity\nassemble the bicycle\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\treserve or back-order every item of the part list\tassemble the bicycle\n0\tFALSE\tprecedence\tfinish the preparation activity\tassemble the bicycle"], "original_id": "datacollection_3-BicycleManufacturing.txt-37"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Afterwards, the sales department ships the bicycle to the customer and finishes the process instance.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 55, "total_costs": 0.01021, "answers": ["ships the bicycle to the customer\nfinishes the process instance\n\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tships the bicycle to the customer\tfinishes the process instance\n0\tFALSE\tend\tfinishes the process instance\t"], "original_id": "datacollection_3-BicycleManufacturing.txt-38"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 55, "total_costs": 0.01026, "answers": ["requested amount is lower or equal to 1M$\tassess the risk of the credit\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\trequested amount is lower or equal to 1M$\tassess the risk of the credit"], "original_id": "datacollection_3-20818304_rev1.txt-39"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: After the approval request, the credit could be accepted or rejected\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 852, "output_tokens": 49, "total_costs": 0.009989999999999999, "answers": ["After the approval request, the credit could be accepted or rejected\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\tapprove request\taccept credit\n0\tFALSE\tprecedence\tapprove request\treject credit"], "original_id": "datacollection_3-20818304_rev1.txt-40"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is greater than 1M$, an approval must be requested.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 856, "output_tokens": 49, "total_costs": 0.01003, "answers": ["requested amount is greater than 1M$  \napproval must be requested  \n\n#-#-#RESULT#-#-#  \n0\tFALSE\tprecedence\trequested amount is greater than 1M$\tapproval must be requested  "], "original_id": "datacollection_3-20818304_rev1.txt-41"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If the requested amount is lower or equal to 1M$, the company assess the risk of the credit.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 861, "output_tokens": 33, "total_costs": 0.0096, "answers": ["assess the risk of the credit\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\texistence\tassess the risk of the credit\t"], "original_id": "datacollection_3-20818304_rev1.txt-42"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: As soon as an employee files an expense report, the process is started.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 854, "output_tokens": 35, "total_costs": 0.009590000000000001, "answers": ["As soon as an employee files an expense report, the process is started.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tinit\tfiles an expense report\t"], "original_id": "datacollection_3-348018817_rev1.txt-43"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Once the expense report is received, a check is performed to make sure the employee has an account.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 859, "output_tokens": 44, "total_costs": 0.00991, "answers": ["Once the expense report is received, a check is performed to make sure the employee has an account.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tprecedence\treceive expense report\tperform check"], "original_id": "datacollection_3-348018817_rev1.txt-44"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: If this check does not take place within 28 days, the process is stopped and the employee is sent a submit email.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 864, "output_tokens": 66, "total_costs": 0.010620000000000001, "answers": ["check does not take place within 28 days\nprocess is stopped\nemployee is sent a submit email\n#-#-#RESULT#-#-#\n0\tFALSE\tprecedence\tcheck does not take place within 28 days\tprocess is stopped\n0\tFALSE\tsuccession\tprocess is stopped\temployee is sent a submit email"], "original_id": "datacollection_3-348018817_rev1.txt-45"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: First, the supervisor approves within 7 days, this will result in the deposit of the reimbursement directly to the employee's bank account.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 866, "output_tokens": 39, "total_costs": 0.009829999999999998, "answers": ["approves within 7 days\ndeposit of the reimbursement\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\tapproves within 7 days\tdeposit of the reimbursement"], "original_id": "datacollection_3-348018817_rev1.txt-46"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Second, the supervisor rejects within 7 days, as a result the employee receives a notification through email that the request has been rejected.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 866, "output_tokens": 43, "total_costs": 0.009949999999999999, "answers": ["rejects within 7 days\nreceives a notification through email\n\n#-#-#RESULT#-#-#\n0\tFALSE\tresponse\trejects within 7 days\treceives a notification through email"], "original_id": "datacollection_3-348018817_rev1.txt-47"}]}, {"meta": {"num_shots": 0, "model": "gpt-4-0125-preview", "temperature": 0.0}, "results": [{"prompts": ["System: You are a business process modelling expert, tasked with identifying\nconstraints between actions in textual process descriptions. Processes consist of actions and, thus, textual process\ndescriptions are sentences that describe a short sequence of actions. Ordering and existence of actions depend on\nconstraints between them. Below you find further definitions for ACTIONS and CONSTRAINTS:\n\n- ACTIONS (Def.): predicate and object describing a task. Predicate is usually a transitive verb, and object is\n          some physical or digital object on which is being acted on.\n\n- CONSTRAINTS (Def.): defines if and how actions can be executed. Always has a source / head\n              action and sometimes a target / tail action, depending on the type. All\n              constraints are one of the following types:\n    - init: marks an action as the start of an entire process. This action is the source / head action of the init\n    constraint. There is no target / tail action. Note that it must be explicitly stated that the PROCESS is started\n    for an init constraint to apply. Signal words alone are not sufficient here.\n    - end: marks an action as the end of the whole process. The action is the source / head action. There is no\n            no target / tail action. Note that it must be explicitly stated that the PROCESS is ended\n    for an end constraint to apply. Signal words alone are not sufficient here.\n    - precedence: The tail action can only be executed, if the head was already executed\n                  before. the head may be executed without the tail being executed.\n    - response: if the head action was executed, the tail action has to be executed, too.\n    - succession: this means if the head activity is executed, the tail activity needs to be\n          executed as well and at the same time, the tail activity requires prior execution of the head activity.\n    - existence: requires that an action is executed at some point in the process; the execution is not dependent on\n        any other explicitly mentioned action; there is only a head action but no tail action.\n    - absence: requires that an action is NOT executed at any time in the process; the absence is not dependent on\n        any other action but other circumstances (e.g., information from the process context); there is only a head\n        action but no tail action; Note: negated absence constraint is semantically equivalent to an existence\n        constraint.\n    - noncooccurrence: requires the head action is not executed if the tail action is executed and vice versa.\n\nAdditionally, you can determine if the given document describes a negation of constraints,\ne.g., \"when something happens, then we DO something\" describes a positive constraint,\nwhile \"when something happens, then we DON'T DO something\" describes a negation.\n\nLet's carry out your task STEPWISE:\n1. First, identify actions contained in the input sentence (a description how you can identify actions is given in\nACTIONS (Def.) above).\n2. Insert the following character sequence in the output: '#-#-#RESULT#-#-#'\n3. Generate constraints based on the constraint types above (see CONSTRAINTS (Def.) for details). To do this, only use\nthe actions that you defined before the mark ('#-#-#RESULT#-#-#'). The format MUST be as follows:\n    Please extract all constraints in the given raw text in the following format:\n    Print one constraint per line, where you separate if the constraint is negative (TRUE if\n    the document describes a negation, else it reads FALSE), the type of the constraint, and the\n    extracted actions by tabs in the following form (<...> are placeholders; <sentence id> is always 0, if a tail action exists depends on the constraint):\n    <sentence id>\t<TRUE or FALSE>\t<constraint type>\t<head action>\t<tail action>.\n\nPlease return raw text, do not use any formatting.\nHuman: Please retrieve all constraints from the following text.\n\n# Text\n\nSentence 0: Third, if it takes the supervisor more than 7 days to respond, an email is sent to the employee informing him/her that the approval is in progress and the part of the processes after a supervisor is asked for approval is repeated.\n"], "steps": [["constraints"]], "formatter_args": [{"prompt_path": "quishpi/re/step-wise-detailed.txt", "separate_tasks": false, "context_tags": null, "only_tags": null}], "formatters": ["VanDerAaRelationListingFormattingStrategy"], "input_tokens": 886, "output_tokens": 79, "total_costs": 0.01123, "answers": ["Third, if it takes the supervisor more than 7 days to respond, an email is sent to the employee informing him/her that the approval is in progress and the part of the processes after a supervisor is asked for approval is repeated.\n\n#-#-#RESULT#-#-#\n\n0\tFALSE\tresponse\trespond\tsend email\n0\tFALSE\tsuccession\task for approval\trepeat process"], "original_id": "datacollection_3-348018817_rev1.txt-48"}]}]